{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"f6344d5e9feac9ccda238dbe322a64bc5eb3131c","modified":1572171172651},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514806389000},{"_id":"themes/next/.DS_Store","hash":"25b1eeae9d8aaecb6507e8c4671db7e6e7e2b243","modified":1571834818473},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514806389000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514806389000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514806389000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514806389000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514806389000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514806389000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514806389000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514806389000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514806389000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514806389000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"themes/next/_config.yml","hash":"7b23828f4093aafa0662e2d33ab3d88b5c0aecb2","modified":1571834768086},{"_id":"source/_posts/LeetCode-有序数组中的单一元素.md","hash":"eb2deb8de2404f89d511374e03d36a9e470a3974","modified":1571577564281},{"_id":"source/_posts/.DS_Store","hash":"10d311cca3df65653f956efeaa966e046f0c0ac1","modified":1572171172652},{"_id":"source/_posts/Redis中的数据结构之简单动态字符串.md","hash":"d2644a468b14bd0ae665c0dc17a2c2df6fde200b","modified":1572172401427},{"_id":"source/_posts/JS有特别的输出banana技巧.md","hash":"29965ba6e52e3f0e76634ae18d26abd2acdb721c","modified":1568988180121},{"_id":"source/_posts/Java中的instanceof关键字.md","hash":"0c39234530c09d760f0b8ac7ec78dfa25ca6a74f","modified":1567932581638},{"_id":"source/_posts/二分查找及其Java代码实现.md","hash":"4d882b2852ee3e2f3954bbc1af3dcf8d6be7fd66","modified":1567932544082},{"_id":"source/_posts/求一个整数转换为二进制之后其中1的个数.md","hash":"53a37af18b0f2dd9c089748babc1e34c02c73860","modified":1570624690285},{"_id":"source/_posts/LeetCode第一题.md","hash":"d0bafd7eddb424017ca050d99457de744905e8cc","modified":1571572246825},{"_id":"source/_posts/递归算法及应用.md","hash":"2b2cc7db9c982302c711943ac41cdb8202266bb9","modified":1567932518426},{"_id":"source/tags/index.md","hash":"9076dd6826a60327f5d754742c0b57d424889310","modified":1567433544727},{"_id":"source/categories/index.md","hash":"a9cbb30618588a395f631ccb18f6a3c206e93ed4","modified":1567433544726},{"_id":"source/uploads/.DS_Store","hash":"3bf8756085aa53cb18a164a5f3e5ccd3f034650f","modified":1571834818476},{"_id":"source/uploads/wechat-qcode.jpg","hash":"cb3e1dae0fbf71813c810b2b8300e77f5da93d02","modified":1570454143319},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514806389000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1514806389000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514806389000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514806389000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514806389000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514806389000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514806389000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/source/.DS_Store","hash":"fb5842ad8231321e9d625a547d3298fa8a83b905","modified":1571834823629},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"source/_posts/pic_doc/redis_c_string.jpeg","hash":"dbfcda975fe79e62ca870aa0480b3c3f11798bc9","modified":1572171051000},{"_id":"source/_posts/pic_doc/.DS_Store","hash":"1f340a93a67e6555bfce3fd87fda0c171f311af4","modified":1572171161976},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514806389000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514806389000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514806389000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514806389000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514806389000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514806389000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514806389000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514806389000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514806389000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/uploads/.DS_Store","hash":"3bf8756085aa53cb18a164a5f3e5ccd3f034650f","modified":1571834818476},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/source/uploads/wechat-qcode.jpg","hash":"cb3e1dae0fbf71813c810b2b8300e77f5da93d02","modified":1570454143319},{"_id":"source/_posts/pic_doc/redis_sds.jpeg","hash":"09cef7fa1d2cd467c0ecb5d2133132a4e6d97d33","modified":1572169721000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514806389000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000},{"_id":"public/tags/index.html","hash":"453ea210430c507df2d1fa4b2f26b4c0fc69df5b","modified":1572172441170},{"_id":"public/categories/index.html","hash":"d95f43503558c83564d47e538642118adeb39780","modified":1572172441170},{"_id":"public/archives/index.html","hash":"53755a442d9154d697cddafc4ccca861a7f468fc","modified":1572172441171},{"_id":"public/archives/2019/index.html","hash":"abfcc5a95ebb00e5f01cb1de1e20c3a0a6b80368","modified":1572172441172},{"_id":"public/archives/2019/08/index.html","hash":"324cd4cbd790d7739e90cfb3ed2ee9feb622e5d0","modified":1572172441172},{"_id":"public/archives/2019/09/index.html","hash":"08005b6f79619e5b9d5ee7d5b0ff56a3ce1b0865","modified":1572172441172},{"_id":"public/archives/2019/10/index.html","hash":"7b18fc3665817263a8643ec48e02cbb57de16060","modified":1572172441172},{"_id":"public/tags/算法/index.html","hash":"ecbe498cd424da67013fefe79f0512a5d4542030","modified":1572172441172},{"_id":"public/tags/LeetCode/index.html","hash":"ce059ce012b65aee8eeedb813c43b1fb7af7fa2f","modified":1572172441172},{"_id":"public/tags/面试题/index.html","hash":"c54dce38e363cf166614132f52ccb58a1cb359c6","modified":1572172441172},{"_id":"public/2019/10/20/LeetCode-有序数组中的单一元素/index.html","hash":"e9f52b59c1e9a5aac7ebf9618648cf220187aa2f","modified":1572172441172},{"_id":"public/2019/10/09/求一个整数转换为二进制之后其中1的个数/index.html","hash":"1a089b31f4266387a68c26741779d107e874966a","modified":1572172441172},{"_id":"public/2019/10/01/LeetCode第一题/index.html","hash":"d497d1fc351f1cd65bf61948d57cd0a477f6839b","modified":1572172441172},{"_id":"public/2019/09/20/JS有特别的输出banana技巧/index.html","hash":"d6aa153deebecc405825f77965a75e9224e0f91a","modified":1572172441172},{"_id":"public/2019/09/08/递归算法及应用/index.html","hash":"f3ee5723c55fca6076b2104e37b36e5843f9c41c","modified":1572172441172},{"_id":"public/2019/08/31/二分查找及其Java代码实现/index.html","hash":"42c4957ebd1cba2fbb07bf22add60358e3786eff","modified":1572172441172},{"_id":"public/2019/08/27/Java中的instanceof关键字/index.html","hash":"7611e462d9b6d9a823a0f3e18e07b64a88d236dc","modified":1572172441172},{"_id":"public/index.html","hash":"223193b398b75e54bcd5466a5cdf69fce5ca3954","modified":1572172441173},{"_id":"public/tags/JavaScript/index.html","hash":"ba4d80ca44c9996156736b6ffcce2995374ec485","modified":1572172441228},{"_id":"public/tags/Java基础/index.html","hash":"6bc71b614cec1a3b6ce0c680b449df6cb5c9deae","modified":1572172441228},{"_id":"public/tags/前端/index.html","hash":"16eb2618544418ee79324954be408b3de5afc389","modified":1572172441228},{"_id":"public/2019/10/23/Redis中的数据结构之简单动态字符串/index.html","hash":"96325f46920e239143a95b0c3b320493cacf9504","modified":1572172441228},{"_id":"public/tags/Redis/index.html","hash":"fd002e162b141e24b3584114de191e91d46f7179","modified":1572172441234},{"_id":"public/tags/数据结构/index.html","hash":"fbda40a051b3600e6086bac039015ad5fb132a48","modified":1572172441234},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1572172441234},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1572172441234},{"_id":"public/uploads/wechat-qcode.jpg","hash":"cb3e1dae0fbf71813c810b2b8300e77f5da93d02","modified":1572172441234},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1572172441234},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1572172441234},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1572172441234},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1572172441234},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1572172441234},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1572172441234},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1572172441234},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1572172441234},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1572172441235},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1572172441235},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1572172441235},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1572172441235},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1572172441235},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1572172441235},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1572172441235},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1572172441235},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1572172441235},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1572172441235},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1572172441235},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1572172441235},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1572172441235},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1572172441235},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1572172441235},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1572172441235},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1572172441235},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1572172441235},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1572172441235},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1572172441235},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1572172441235},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1572172441235},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1572172441236},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1572172442146},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1572172442155},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1572172442172},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1572172442172},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1572172442172},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1572172442172},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1572172442172},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1572172442172},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1572172442172},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1572172442172},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1572172442172},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1572172442173},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1572172442173},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1572172442173},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1572172442173},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1572172442173},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1572172442173},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1572172442173},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1572172442173},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1572172442173},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1572172442173},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1572172442174},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1572172442174},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1572172442174},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1572172442174},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1572172442174},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1572172442174},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1572172442174},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1572172442174},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1572172442174},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1572172442174},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1572172442175},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1572172442175},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1572172442175},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1572172442175},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1572172442175},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1572172442175},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1572172442175},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1572172442175},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1572172442175},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1572172442175},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1572172442175},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1572172442176},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1572172442176},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1572172442176},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1572172442176},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1572172442176},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1572172442176},{"_id":"public/lib/fastclick/README.html","hash":"c5a4c05ca80132b7e343d5fd1d1d1a976b4ad151","modified":1572172442176},{"_id":"public/lib/jquery_lazyload/README.html","hash":"18a600ca1aafd3bf08af52b6a6fe5f056aeed9f4","modified":1572172442176},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"81057e5b518b8ab60474e1ad027e868b558f15b7","modified":1572172442176},{"_id":"public/css/main.css","hash":"2a0cf22f1a42fec02427ddcfc6f94be7e6e33663","modified":1572172442176},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1572172442176},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1572172442176},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1572172442177},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1572172442177},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1572172442177},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1572172442177},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1572172442177},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1572172442177},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1572172442177},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1572172442177},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1572172442177},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1572172442177},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1572172442177},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1572172442177},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1572172442178},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1572172442178},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1572172442178},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1572172442178},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1572172442178},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1572172442178},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1572172442178},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1572172442186},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1572172442186},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1572172442212}],"Category":[],"Data":[],"Page":[{"title":"标签","date":"2019-08-27T08:13:24.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-08-27 16:13:24\ntype: \"tags\"\n---\n","updated":"2019-09-02T14:12:24.727Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck28uvm4f0001yzk3ibp80gea","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2019-08-27T08:18:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-08-27 16:18:45\ntype: \"categories\"\n---\n","updated":"2019-09-02T14:12:24.726Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck28uvm4h0003yzk34qgmwsku","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"LeetCode-有序数组中的单一元素","date":"2019-10-20T11:46:34.000Z","_content":"\n今天来讲一道三月份面试时候遇到的算法题，三月份遇到的，最近刷题又遇到，刚好也开始慢慢地写博客了，就记录下来吧。\n\n> 题目描述\n给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。\n\n- 示例一：\n```\n输入: [1,1,2,3,3,4,4,8,8]\n输出: 2\n```\n\n- 示例二：\n```\n输入: [3,3,7,7,10,11,11]\n输出: 10\n```\n- 注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。\n\n下面来看看如何解决\n\n首先，我们看到，题目中说的是`有序数组`，其次，时间复杂度要求`O(log n)`，最后，查找出这个数，是一个查找问题。根据这些条件，我们想一想，适用于有序数组，时间复杂度为O(log n)的查找算法是哪一个？就是我们之前讲过的`二分查找`。\n\n那么如何利用二分查找解决这个问题呢？难点是，二分搜索后怎么判断是左半边还是右半边。解决方式是通过mid的奇偶性。\n\n1. 令 key 为 Single Element 在数组中的位置。如果 m 为偶数，并且 m + 1 < key，那么 nums[m] == nums[m + 1]；m + 1 >= key，那么 nums[m] != nums[m + 1]；\n\n2. 从上面的规律可以知道，如果 nums[m] == nums[m + 1]，那么 key 所在的数组位置为 [m + 2, h]，此时令 l = m + 2；如果 nums[m] != nums[m + 1]，那么 key 所在的数组位置为 [l, m]，此时令 h = m；\n\n3. 因为 h 的赋值表达式为 h = m，那么循环条件也就只能使用 l < h 这种形式；\n\n代码如下：\n\n```java\npublic int singleNonDuplicate(int[] nums) {\n    int l = 0, h = nums.length - 1;\n    while (l < h) {\n        int m = l + (h - l) / 2;\n        if (m % 2 == 1)\n            m--;   // 保证 l/h/m 都在偶数位，使得查找区间大小一直都是奇数\n        if (nums[m] == nums[m + 1])\n            l = m + 2;\n        else\n            h = m;\n    }\n    return nums[l];\n}\n```\n\n这个题还有一个变种，当我们不考虑时间复杂度以及有序数组的条件时，如何快速找出数组中的单一元素呢？\n- 示例：\n```\n输入: [1,1,2,3,4,4,3,8,8]\n输出: 2\n```\n先看代码：\n\n```java\npublic static int singleNonDuplicate(int[] nums) {\n    int res = 0;\n    for(int num : nums){\n        res = res^num;\n    }\n    return res;\n}\n```\n\n如代码所示，我们又用到了以前讲过的神奇的位运算，这次用到的位运算是`异或`，运算符是`^`。\n\n异或运算有什么特点呢？\n0^0=0，1^0=1，0^1=1，1^1=0,也就是同为0，异为1。0异或任何数字，都会的到这个数字本身。\n\n于是上面代码运行的过程大家可以自己用异或算一下，原理就是，数组中成对的数字经过异或运算之后的结果，也就是变量`res`变为了0，然后0再与数组中的单一元素进行异或运算，变量`res`就变为了这个单一元素，于是我们就得到了数组中的单一元素。\n\n\n","source":"_posts/LeetCode-有序数组中的单一元素.md","raw":"---\ntitle: LeetCode-有序数组中的单一元素\ndate: 2019-10-20 19:46:34\ntags: [算法,LeetCode,面试题]\n---\n\n今天来讲一道三月份面试时候遇到的算法题，三月份遇到的，最近刷题又遇到，刚好也开始慢慢地写博客了，就记录下来吧。\n\n> 题目描述\n给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。\n\n- 示例一：\n```\n输入: [1,1,2,3,3,4,4,8,8]\n输出: 2\n```\n\n- 示例二：\n```\n输入: [3,3,7,7,10,11,11]\n输出: 10\n```\n- 注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。\n\n下面来看看如何解决\n\n首先，我们看到，题目中说的是`有序数组`，其次，时间复杂度要求`O(log n)`，最后，查找出这个数，是一个查找问题。根据这些条件，我们想一想，适用于有序数组，时间复杂度为O(log n)的查找算法是哪一个？就是我们之前讲过的`二分查找`。\n\n那么如何利用二分查找解决这个问题呢？难点是，二分搜索后怎么判断是左半边还是右半边。解决方式是通过mid的奇偶性。\n\n1. 令 key 为 Single Element 在数组中的位置。如果 m 为偶数，并且 m + 1 < key，那么 nums[m] == nums[m + 1]；m + 1 >= key，那么 nums[m] != nums[m + 1]；\n\n2. 从上面的规律可以知道，如果 nums[m] == nums[m + 1]，那么 key 所在的数组位置为 [m + 2, h]，此时令 l = m + 2；如果 nums[m] != nums[m + 1]，那么 key 所在的数组位置为 [l, m]，此时令 h = m；\n\n3. 因为 h 的赋值表达式为 h = m，那么循环条件也就只能使用 l < h 这种形式；\n\n代码如下：\n\n```java\npublic int singleNonDuplicate(int[] nums) {\n    int l = 0, h = nums.length - 1;\n    while (l < h) {\n        int m = l + (h - l) / 2;\n        if (m % 2 == 1)\n            m--;   // 保证 l/h/m 都在偶数位，使得查找区间大小一直都是奇数\n        if (nums[m] == nums[m + 1])\n            l = m + 2;\n        else\n            h = m;\n    }\n    return nums[l];\n}\n```\n\n这个题还有一个变种，当我们不考虑时间复杂度以及有序数组的条件时，如何快速找出数组中的单一元素呢？\n- 示例：\n```\n输入: [1,1,2,3,4,4,3,8,8]\n输出: 2\n```\n先看代码：\n\n```java\npublic static int singleNonDuplicate(int[] nums) {\n    int res = 0;\n    for(int num : nums){\n        res = res^num;\n    }\n    return res;\n}\n```\n\n如代码所示，我们又用到了以前讲过的神奇的位运算，这次用到的位运算是`异或`，运算符是`^`。\n\n异或运算有什么特点呢？\n0^0=0，1^0=1，0^1=1，1^1=0,也就是同为0，异为1。0异或任何数字，都会的到这个数字本身。\n\n于是上面代码运行的过程大家可以自己用异或算一下，原理就是，数组中成对的数字经过异或运算之后的结果，也就是变量`res`变为了0，然后0再与数组中的单一元素进行异或运算，变量`res`就变为了这个单一元素，于是我们就得到了数组中的单一元素。\n\n\n","slug":"LeetCode-有序数组中的单一元素","published":1,"updated":"2019-10-20T13:19:24.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck28uvm4b0000yzk3dw4r8b78","content":"<p>今天来讲一道三月份面试时候遇到的算法题，三月份遇到的，最近刷题又遇到，刚好也开始慢慢地写博客了，就记录下来吧。</p>\n<blockquote>\n<p>题目描述<br>给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</p>\n</blockquote>\n<ul>\n<li><p>示例一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,1,2,3,3,4,4,8,8]</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例二：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [3,3,7,7,10,11,11]</span><br><span class=\"line\">输出: 10</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。</p>\n</li>\n</ul>\n<p>下面来看看如何解决</p>\n<p>首先，我们看到，题目中说的是<code>有序数组</code>，其次，时间复杂度要求<code>O(log n)</code>，最后，查找出这个数，是一个查找问题。根据这些条件，我们想一想，适用于有序数组，时间复杂度为O(log n)的查找算法是哪一个？就是我们之前讲过的<code>二分查找</code>。</p>\n<p>那么如何利用二分查找解决这个问题呢？难点是，二分搜索后怎么判断是左半边还是右半边。解决方式是通过mid的奇偶性。</p>\n<ol>\n<li><p>令 key 为 Single Element 在数组中的位置。如果 m 为偶数，并且 m + 1 &lt; key，那么 nums[m] == nums[m + 1]；m + 1 &gt;= key，那么 nums[m] != nums[m + 1]；</p>\n</li>\n<li><p>从上面的规律可以知道，如果 nums[m] == nums[m + 1]，那么 key 所在的数组位置为 [m + 2, h]，此时令 l = m + 2；如果 nums[m] != nums[m + 1]，那么 key 所在的数组位置为 [l, m]，此时令 h = m；</p>\n</li>\n<li><p>因为 h 的赋值表达式为 h = m，那么循环条件也就只能使用 l &lt; h 这种形式；</p>\n</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNonDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, h = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; h) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = l + (h - l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m % <span class=\"number\">2</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">            m--;   <span class=\"comment\">// 保证 l/h/m 都在偶数位，使得查找区间大小一直都是奇数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[m] == nums[m + <span class=\"number\">1</span>])</span><br><span class=\"line\">            l = m + <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            h = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[l];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个题还有一个变种，当我们不考虑时间复杂度以及有序数组的条件时，如何快速找出数组中的单一元素呢？</p>\n<ul>\n<li>示例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,1,2,3,4,4,3,8,8]</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>先看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNonDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num : nums)&#123;</span><br><span class=\"line\">        res = res^num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如代码所示，我们又用到了以前讲过的神奇的位运算，这次用到的位运算是<code>异或</code>，运算符是<code>^</code>。</p>\n<p>异或运算有什么特点呢？<br>0^0=0，1^0=1，0^1=1，1^1=0,也就是同为0，异为1。0异或任何数字，都会的到这个数字本身。</p>\n<p>于是上面代码运行的过程大家可以自己用异或算一下，原理就是，数组中成对的数字经过异或运算之后的结果，也就是变量<code>res</code>变为了0，然后0再与数组中的单一元素进行异或运算，变量<code>res</code>就变为了这个单一元素，于是我们就得到了数组中的单一元素。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天来讲一道三月份面试时候遇到的算法题，三月份遇到的，最近刷题又遇到，刚好也开始慢慢地写博客了，就记录下来吧。</p>\n<blockquote>\n<p>题目描述<br>给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</p>\n</blockquote>\n<ul>\n<li><p>示例一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,1,2,3,3,4,4,8,8]</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例二：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [3,3,7,7,10,11,11]</span><br><span class=\"line\">输出: 10</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。</p>\n</li>\n</ul>\n<p>下面来看看如何解决</p>\n<p>首先，我们看到，题目中说的是<code>有序数组</code>，其次，时间复杂度要求<code>O(log n)</code>，最后，查找出这个数，是一个查找问题。根据这些条件，我们想一想，适用于有序数组，时间复杂度为O(log n)的查找算法是哪一个？就是我们之前讲过的<code>二分查找</code>。</p>\n<p>那么如何利用二分查找解决这个问题呢？难点是，二分搜索后怎么判断是左半边还是右半边。解决方式是通过mid的奇偶性。</p>\n<ol>\n<li><p>令 key 为 Single Element 在数组中的位置。如果 m 为偶数，并且 m + 1 &lt; key，那么 nums[m] == nums[m + 1]；m + 1 &gt;= key，那么 nums[m] != nums[m + 1]；</p>\n</li>\n<li><p>从上面的规律可以知道，如果 nums[m] == nums[m + 1]，那么 key 所在的数组位置为 [m + 2, h]，此时令 l = m + 2；如果 nums[m] != nums[m + 1]，那么 key 所在的数组位置为 [l, m]，此时令 h = m；</p>\n</li>\n<li><p>因为 h 的赋值表达式为 h = m，那么循环条件也就只能使用 l &lt; h 这种形式；</p>\n</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNonDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, h = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; h) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = l + (h - l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m % <span class=\"number\">2</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">            m--;   <span class=\"comment\">// 保证 l/h/m 都在偶数位，使得查找区间大小一直都是奇数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[m] == nums[m + <span class=\"number\">1</span>])</span><br><span class=\"line\">            l = m + <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            h = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[l];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个题还有一个变种，当我们不考虑时间复杂度以及有序数组的条件时，如何快速找出数组中的单一元素呢？</p>\n<ul>\n<li>示例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,1,2,3,4,4,3,8,8]</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>先看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNonDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num : nums)&#123;</span><br><span class=\"line\">        res = res^num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如代码所示，我们又用到了以前讲过的神奇的位运算，这次用到的位运算是<code>异或</code>，运算符是<code>^</code>。</p>\n<p>异或运算有什么特点呢？<br>0^0=0，1^0=1，0^1=1，1^1=0,也就是同为0，异为1。0异或任何数字，都会的到这个数字本身。</p>\n<p>于是上面代码运行的过程大家可以自己用异或算一下，原理就是，数组中成对的数字经过异或运算之后的结果，也就是变量<code>res</code>变为了0，然后0再与数组中的单一元素进行异或运算，变量<code>res</code>就变为了这个单一元素，于是我们就得到了数组中的单一元素。</p>\n"},{"title":"Redis中的数据结构之简单动态字符串","date":"2019-10-23T12:57:21.000Z","_content":"\n前段时间学习Redis，在网上一搜Redis教程，绝大部分的教程都是在教你怎么使用Redis，比如如何set/get一个字符串，Redis列表怎么添加（获取）值等基础用法，这些就相当于我们学习一门计算机语言的语法过程。简单浏览一遍就好了，用到的时候不记得了再去查。（当然你如果记忆力强悍，全部记住也是极好的，省去了查百度的时间，提高了效率）。这些基础的语法知识，个人感觉没有什么含金量，熟悉编程的人几乎大部分人一看就懂。\n\n所以，我们要学习里面涉及到的原理知识，素闻Redis中的数据结构异常牛B，我呢就找了一本书《Redis设计与实现》来学习，在此也记录一下，加深一下印象，也分享一下学习笔记。\n\n首先我们来学习Redis中最简单的数据结构 `SDS`，也就是 `simple dynamic string`，翻译过来就是 `简单动态字符串`。正如其名字所说的，这种数据结构是一个简单的，动态的(可以被修改值)的字符串。\n\n当Redis需要的不仅仅是一个字符串字面量，而是需要一个可以被修改的字符串的时候，Redis就会使用SDS来表示字符串的值。比如在Redis中，包含字符串值的键值对在底层都是由SDS实现的。\n\n举个例子，在Redis客户端执行如下命令：\n```shell\nredis> set msg \"hello word\"\nOK\n```\n这个命令大家都很熟悉，这在Redis中创建了一个新的键值对，键为`msg`，值就是我们最熟悉的`hello world`。其中，`msg`是一个字符串，`hello world`也是一个字符串。上面说了，包含字符串值的键值对在底层都是由SDS实现的。\n所以\n- 键值对的键 `msg`是一个字符串对象，底层的实现是一个保存着字符串`msg`的SDS\n- 键值对的值 `hello world`也是一个字符串对象，底层的实现是一个保存着字符串`hello world`的SDS\n\n再举个例子：\n```shell\nredis> rpush fruits \"apple\" \"banana\" \"cherry\"\n```\n这个命令大家也知道，在Redis中创建了一个列表，其实也是一个键值对，键为`fruits`，值为`\"apple\" \"banana\" \"cherry\"`，其中：\n- 键值对的键 `fruits`是一个字符串对象，底层的实现是一个保存着字符串`fruits`的SDS\n- 键值对的值 `\"apple\" \"banana\" \"cherry\"`是一个列表对象，其中包含了三个字符串对象，这三个字符串对象分别由三个SDS实现：第一个SDS保存着\"apple\"，第二个SDS保存着\"banana\"，第三个SDS保存着\"cherry\"\n\n除了用来保存Redis中的字符串值之外，SDS还被用作缓冲区，这个以后我们再说。\n\n说了一些SDS在Redis中的应用，那么，SDS的数据结构到底是什么样子呢？\n\n我们来看一下SDS的数据结构定义代码：\n- 注：此书基于的Redis版本不是最新的，最新的版本中，SDS的数据结构做了一些优化，但是大同小异，大家有兴趣可以去github看Redis最新的源码。\n```c++\nstruct sdshdr {\n    int len; //记录buf数组中已使用的字节数量，等于SDS所保存的字符串长度\n    int free; //记录buf数组中未使用的字节数量\n    char buf[]; //字节数组，用来保存字符串的值\n}\n```\n\n比如我们定义一个字符串“Redis”，在SDS中会怎么存储呢？\n![](pic_doc/redis_sds.jpeg) \n\n\n1. free属性的值为0，表示这个SDS没有分配任何未使用空间。\n2. len属性值为5，表示这个SDS保存了一个长度为5的字符串\n3. buf属性是一个char类型的数组，数组的前五个元素分别保存了 'R','e','d','i','s' 五个字符，而最后一个元素则保存了空字符'\\0'。\n\n学过c语言的都知道，c语言中字符串的结尾惯例就是一个空字符 `\\0`，Redis是用c语言编写的，所以遵循c语言字符串结尾的规范。大家可以看到结尾的空字符`\\0`虽然占用了一个字符的空间，但不计算在SDS的len属性里面，所以这个空字符串对于SDS的使用者是完全透明的，这样的好处是SDS可以直接重用一部分c语言字符串库中的函数。比如 `<stdio.h>/printf`函数。\n\n说完SDS的数据结构，大家肯定知道了SDS中的`len`与`buf[]`属性的含义，但可能不知道`free`是用来做什么的，我们暂时不讨论这个，下一篇再详细说明。\n\n既然Redis是用c语言编写的，那么保存字符串的时候为什么不用c语言中的表示方式呢？为何还要定义一个SDS呢？\n\n我们先来看一下\"Redis\"这个字符串在c语言中的表示\n![](pic_doc/redis_c_string.jpeg)\n\n可以看到，c语言使用的这种简单的字符串表示方式，没有记录字符串自身的长度信息，也就是没有SDS中的`len`属性。想一下若是在c语言中获取这个字符串的长度该怎么获取呢？\n\n只有一种方法，那就是循环遍历整个字符串，对遇到的每个字符进行计数，直到遇到代表字符串结尾的空字符`\\0`为止。这个操作的时间复杂度为`O(n)`，虽然这个复杂度看起来并不是很高，但是还是满足不了Redis在效率性方面的要求（众所周知，Redis的应用场景大部分都会面临海量的并发，对其性能要求很高）。\n\n那么SDS在获取字符串长度时候的时间复杂度是多少呢？因为SDS在len属性中记录了SDS本身字符串的长度，所以获取字符串长度只需要访问SDS的len属性，所以时间复杂度为`O(1)`。\n\n可以看到，通过使用SDS而非c语言中的字符串，Redis将获取字符串的时间复杂度从`O(n)`降到了`O(1)`，所以这确保了获取字符串长度的工作不会成为Redis的性能瓶颈。\n\n当然，SDS与c字符串相比并不只是满足Redis在效率方面的要求，也满足了Redis对安全性以及功能方面的要求，这个我们下期再说吧。\n\n\n","source":"_posts/Redis中的数据结构之简单动态字符串.md","raw":"---\ntitle: Redis中的数据结构之简单动态字符串\ndate: 2019-10-23 20:57:21\ntags: [Redis,数据结构]\n---\n\n前段时间学习Redis，在网上一搜Redis教程，绝大部分的教程都是在教你怎么使用Redis，比如如何set/get一个字符串，Redis列表怎么添加（获取）值等基础用法，这些就相当于我们学习一门计算机语言的语法过程。简单浏览一遍就好了，用到的时候不记得了再去查。（当然你如果记忆力强悍，全部记住也是极好的，省去了查百度的时间，提高了效率）。这些基础的语法知识，个人感觉没有什么含金量，熟悉编程的人几乎大部分人一看就懂。\n\n所以，我们要学习里面涉及到的原理知识，素闻Redis中的数据结构异常牛B，我呢就找了一本书《Redis设计与实现》来学习，在此也记录一下，加深一下印象，也分享一下学习笔记。\n\n首先我们来学习Redis中最简单的数据结构 `SDS`，也就是 `simple dynamic string`，翻译过来就是 `简单动态字符串`。正如其名字所说的，这种数据结构是一个简单的，动态的(可以被修改值)的字符串。\n\n当Redis需要的不仅仅是一个字符串字面量，而是需要一个可以被修改的字符串的时候，Redis就会使用SDS来表示字符串的值。比如在Redis中，包含字符串值的键值对在底层都是由SDS实现的。\n\n举个例子，在Redis客户端执行如下命令：\n```shell\nredis> set msg \"hello word\"\nOK\n```\n这个命令大家都很熟悉，这在Redis中创建了一个新的键值对，键为`msg`，值就是我们最熟悉的`hello world`。其中，`msg`是一个字符串，`hello world`也是一个字符串。上面说了，包含字符串值的键值对在底层都是由SDS实现的。\n所以\n- 键值对的键 `msg`是一个字符串对象，底层的实现是一个保存着字符串`msg`的SDS\n- 键值对的值 `hello world`也是一个字符串对象，底层的实现是一个保存着字符串`hello world`的SDS\n\n再举个例子：\n```shell\nredis> rpush fruits \"apple\" \"banana\" \"cherry\"\n```\n这个命令大家也知道，在Redis中创建了一个列表，其实也是一个键值对，键为`fruits`，值为`\"apple\" \"banana\" \"cherry\"`，其中：\n- 键值对的键 `fruits`是一个字符串对象，底层的实现是一个保存着字符串`fruits`的SDS\n- 键值对的值 `\"apple\" \"banana\" \"cherry\"`是一个列表对象，其中包含了三个字符串对象，这三个字符串对象分别由三个SDS实现：第一个SDS保存着\"apple\"，第二个SDS保存着\"banana\"，第三个SDS保存着\"cherry\"\n\n除了用来保存Redis中的字符串值之外，SDS还被用作缓冲区，这个以后我们再说。\n\n说了一些SDS在Redis中的应用，那么，SDS的数据结构到底是什么样子呢？\n\n我们来看一下SDS的数据结构定义代码：\n- 注：此书基于的Redis版本不是最新的，最新的版本中，SDS的数据结构做了一些优化，但是大同小异，大家有兴趣可以去github看Redis最新的源码。\n```c++\nstruct sdshdr {\n    int len; //记录buf数组中已使用的字节数量，等于SDS所保存的字符串长度\n    int free; //记录buf数组中未使用的字节数量\n    char buf[]; //字节数组，用来保存字符串的值\n}\n```\n\n比如我们定义一个字符串“Redis”，在SDS中会怎么存储呢？\n![](pic_doc/redis_sds.jpeg) \n\n\n1. free属性的值为0，表示这个SDS没有分配任何未使用空间。\n2. len属性值为5，表示这个SDS保存了一个长度为5的字符串\n3. buf属性是一个char类型的数组，数组的前五个元素分别保存了 'R','e','d','i','s' 五个字符，而最后一个元素则保存了空字符'\\0'。\n\n学过c语言的都知道，c语言中字符串的结尾惯例就是一个空字符 `\\0`，Redis是用c语言编写的，所以遵循c语言字符串结尾的规范。大家可以看到结尾的空字符`\\0`虽然占用了一个字符的空间，但不计算在SDS的len属性里面，所以这个空字符串对于SDS的使用者是完全透明的，这样的好处是SDS可以直接重用一部分c语言字符串库中的函数。比如 `<stdio.h>/printf`函数。\n\n说完SDS的数据结构，大家肯定知道了SDS中的`len`与`buf[]`属性的含义，但可能不知道`free`是用来做什么的，我们暂时不讨论这个，下一篇再详细说明。\n\n既然Redis是用c语言编写的，那么保存字符串的时候为什么不用c语言中的表示方式呢？为何还要定义一个SDS呢？\n\n我们先来看一下\"Redis\"这个字符串在c语言中的表示\n![](pic_doc/redis_c_string.jpeg)\n\n可以看到，c语言使用的这种简单的字符串表示方式，没有记录字符串自身的长度信息，也就是没有SDS中的`len`属性。想一下若是在c语言中获取这个字符串的长度该怎么获取呢？\n\n只有一种方法，那就是循环遍历整个字符串，对遇到的每个字符进行计数，直到遇到代表字符串结尾的空字符`\\0`为止。这个操作的时间复杂度为`O(n)`，虽然这个复杂度看起来并不是很高，但是还是满足不了Redis在效率性方面的要求（众所周知，Redis的应用场景大部分都会面临海量的并发，对其性能要求很高）。\n\n那么SDS在获取字符串长度时候的时间复杂度是多少呢？因为SDS在len属性中记录了SDS本身字符串的长度，所以获取字符串长度只需要访问SDS的len属性，所以时间复杂度为`O(1)`。\n\n可以看到，通过使用SDS而非c语言中的字符串，Redis将获取字符串的时间复杂度从`O(n)`降到了`O(1)`，所以这确保了获取字符串长度的工作不会成为Redis的性能瓶颈。\n\n当然，SDS与c字符串相比并不只是满足Redis在效率方面的要求，也满足了Redis对安全性以及功能方面的要求，这个我们下期再说吧。\n\n\n","slug":"Redis中的数据结构之简单动态字符串","published":1,"updated":"2019-10-27T10:33:21.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck28uvm4g0002yzk30oplr3k8","content":"<p>前段时间学习Redis，在网上一搜Redis教程，绝大部分的教程都是在教你怎么使用Redis，比如如何set/get一个字符串，Redis列表怎么添加（获取）值等基础用法，这些就相当于我们学习一门计算机语言的语法过程。简单浏览一遍就好了，用到的时候不记得了再去查。（当然你如果记忆力强悍，全部记住也是极好的，省去了查百度的时间，提高了效率）。这些基础的语法知识，个人感觉没有什么含金量，熟悉编程的人几乎大部分人一看就懂。</p>\n<p>所以，我们要学习里面涉及到的原理知识，素闻Redis中的数据结构异常牛B，我呢就找了一本书《Redis设计与实现》来学习，在此也记录一下，加深一下印象，也分享一下学习笔记。</p>\n<p>首先我们来学习Redis中最简单的数据结构 <code>SDS</code>，也就是 <code>simple dynamic string</code>，翻译过来就是 <code>简单动态字符串</code>。正如其名字所说的，这种数据结构是一个简单的，动态的(可以被修改值)的字符串。</p>\n<p>当Redis需要的不仅仅是一个字符串字面量，而是需要一个可以被修改的字符串的时候，Redis就会使用SDS来表示字符串的值。比如在Redis中，包含字符串值的键值对在底层都是由SDS实现的。</p>\n<p>举个例子，在Redis客户端执行如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">redis&gt;</span> set msg \"hello word\"</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>这个命令大家都很熟悉，这在Redis中创建了一个新的键值对，键为<code>msg</code>，值就是我们最熟悉的<code>hello world</code>。其中，<code>msg</code>是一个字符串，<code>hello world</code>也是一个字符串。上面说了，包含字符串值的键值对在底层都是由SDS实现的。<br>所以</p>\n<ul>\n<li>键值对的键 <code>msg</code>是一个字符串对象，底层的实现是一个保存着字符串<code>msg</code>的SDS</li>\n<li>键值对的值 <code>hello world</code>也是一个字符串对象，底层的实现是一个保存着字符串<code>hello world</code>的SDS</li>\n</ul>\n<p>再举个例子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">redis&gt;</span> rpush fruits \"apple\" \"banana\" \"cherry\"</span><br></pre></td></tr></table></figure>\n\n<p>这个命令大家也知道，在Redis中创建了一个列表，其实也是一个键值对，键为<code>fruits</code>，值为<code>&quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;</code>，其中：</p>\n<ul>\n<li>键值对的键 <code>fruits</code>是一个字符串对象，底层的实现是一个保存着字符串<code>fruits</code>的SDS</li>\n<li>键值对的值 <code>&quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;</code>是一个列表对象，其中包含了三个字符串对象，这三个字符串对象分别由三个SDS实现：第一个SDS保存着”apple”，第二个SDS保存着”banana”，第三个SDS保存着”cherry”</li>\n</ul>\n<p>除了用来保存Redis中的字符串值之外，SDS还被用作缓冲区，这个以后我们再说。</p>\n<p>说了一些SDS在Redis中的应用，那么，SDS的数据结构到底是什么样子呢？</p>\n<p>我们来看一下SDS的数据结构定义代码：</p>\n<ul>\n<li>注：此书基于的Redis版本不是最新的，最新的版本中，SDS的数据结构做了一些优化，但是大同小异，大家有兴趣可以去github看Redis最新的源码。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len; <span class=\"comment\">//记录buf数组中已使用的字节数量，等于SDS所保存的字符串长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>; <span class=\"comment\">//记录buf数组中未使用的字节数量</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[]; <span class=\"comment\">//字节数组，用来保存字符串的值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>比如我们定义一个字符串“Redis”，在SDS中会怎么存储呢？<br><img src=\"pic_doc/redis_sds.jpeg\" alt> </p>\n<ol>\n<li>free属性的值为0，表示这个SDS没有分配任何未使用空间。</li>\n<li>len属性值为5，表示这个SDS保存了一个长度为5的字符串</li>\n<li>buf属性是一个char类型的数组，数组的前五个元素分别保存了 ‘R’,’e’,’d’,’i’,’s’ 五个字符，而最后一个元素则保存了空字符’\\0’。</li>\n</ol>\n<p>学过c语言的都知道，c语言中字符串的结尾惯例就是一个空字符 <code>\\0</code>，Redis是用c语言编写的，所以遵循c语言字符串结尾的规范。大家可以看到结尾的空字符<code>\\0</code>虽然占用了一个字符的空间，但不计算在SDS的len属性里面，所以这个空字符串对于SDS的使用者是完全透明的，这样的好处是SDS可以直接重用一部分c语言字符串库中的函数。比如 <code>&lt;stdio.h&gt;/printf</code>函数。</p>\n<p>说完SDS的数据结构，大家肯定知道了SDS中的<code>len</code>与<code>buf[]</code>属性的含义，但可能不知道<code>free</code>是用来做什么的，我们暂时不讨论这个，下一篇再详细说明。</p>\n<p>既然Redis是用c语言编写的，那么保存字符串的时候为什么不用c语言中的表示方式呢？为何还要定义一个SDS呢？</p>\n<p>我们先来看一下”Redis”这个字符串在c语言中的表示<br><img src=\"pic_doc/redis_c_string.jpeg\" alt></p>\n<p>可以看到，c语言使用的这种简单的字符串表示方式，没有记录字符串自身的长度信息，也就是没有SDS中的<code>len</code>属性。想一下若是在c语言中获取这个字符串的长度该怎么获取呢？</p>\n<p>只有一种方法，那就是循环遍历整个字符串，对遇到的每个字符进行计数，直到遇到代表字符串结尾的空字符<code>\\0</code>为止。这个操作的时间复杂度为<code>O(n)</code>，虽然这个复杂度看起来并不是很高，但是还是满足不了Redis在效率性方面的要求（众所周知，Redis的应用场景大部分都会面临海量的并发，对其性能要求很高）。</p>\n<p>那么SDS在获取字符串长度时候的时间复杂度是多少呢？因为SDS在len属性中记录了SDS本身字符串的长度，所以获取字符串长度只需要访问SDS的len属性，所以时间复杂度为<code>O(1)</code>。</p>\n<p>可以看到，通过使用SDS而非c语言中的字符串，Redis将获取字符串的时间复杂度从<code>O(n)</code>降到了<code>O(1)</code>，所以这确保了获取字符串长度的工作不会成为Redis的性能瓶颈。</p>\n<p>当然，SDS与c字符串相比并不只是满足Redis在效率方面的要求，也满足了Redis对安全性以及功能方面的要求，这个我们下期再说吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前段时间学习Redis，在网上一搜Redis教程，绝大部分的教程都是在教你怎么使用Redis，比如如何set/get一个字符串，Redis列表怎么添加（获取）值等基础用法，这些就相当于我们学习一门计算机语言的语法过程。简单浏览一遍就好了，用到的时候不记得了再去查。（当然你如果记忆力强悍，全部记住也是极好的，省去了查百度的时间，提高了效率）。这些基础的语法知识，个人感觉没有什么含金量，熟悉编程的人几乎大部分人一看就懂。</p>\n<p>所以，我们要学习里面涉及到的原理知识，素闻Redis中的数据结构异常牛B，我呢就找了一本书《Redis设计与实现》来学习，在此也记录一下，加深一下印象，也分享一下学习笔记。</p>\n<p>首先我们来学习Redis中最简单的数据结构 <code>SDS</code>，也就是 <code>simple dynamic string</code>，翻译过来就是 <code>简单动态字符串</code>。正如其名字所说的，这种数据结构是一个简单的，动态的(可以被修改值)的字符串。</p>\n<p>当Redis需要的不仅仅是一个字符串字面量，而是需要一个可以被修改的字符串的时候，Redis就会使用SDS来表示字符串的值。比如在Redis中，包含字符串值的键值对在底层都是由SDS实现的。</p>\n<p>举个例子，在Redis客户端执行如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">redis&gt;</span> set msg \"hello word\"</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>这个命令大家都很熟悉，这在Redis中创建了一个新的键值对，键为<code>msg</code>，值就是我们最熟悉的<code>hello world</code>。其中，<code>msg</code>是一个字符串，<code>hello world</code>也是一个字符串。上面说了，包含字符串值的键值对在底层都是由SDS实现的。<br>所以</p>\n<ul>\n<li>键值对的键 <code>msg</code>是一个字符串对象，底层的实现是一个保存着字符串<code>msg</code>的SDS</li>\n<li>键值对的值 <code>hello world</code>也是一个字符串对象，底层的实现是一个保存着字符串<code>hello world</code>的SDS</li>\n</ul>\n<p>再举个例子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">redis&gt;</span> rpush fruits \"apple\" \"banana\" \"cherry\"</span><br></pre></td></tr></table></figure>\n\n<p>这个命令大家也知道，在Redis中创建了一个列表，其实也是一个键值对，键为<code>fruits</code>，值为<code>&quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;</code>，其中：</p>\n<ul>\n<li>键值对的键 <code>fruits</code>是一个字符串对象，底层的实现是一个保存着字符串<code>fruits</code>的SDS</li>\n<li>键值对的值 <code>&quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;</code>是一个列表对象，其中包含了三个字符串对象，这三个字符串对象分别由三个SDS实现：第一个SDS保存着”apple”，第二个SDS保存着”banana”，第三个SDS保存着”cherry”</li>\n</ul>\n<p>除了用来保存Redis中的字符串值之外，SDS还被用作缓冲区，这个以后我们再说。</p>\n<p>说了一些SDS在Redis中的应用，那么，SDS的数据结构到底是什么样子呢？</p>\n<p>我们来看一下SDS的数据结构定义代码：</p>\n<ul>\n<li>注：此书基于的Redis版本不是最新的，最新的版本中，SDS的数据结构做了一些优化，但是大同小异，大家有兴趣可以去github看Redis最新的源码。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len; <span class=\"comment\">//记录buf数组中已使用的字节数量，等于SDS所保存的字符串长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>; <span class=\"comment\">//记录buf数组中未使用的字节数量</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[]; <span class=\"comment\">//字节数组，用来保存字符串的值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>比如我们定义一个字符串“Redis”，在SDS中会怎么存储呢？<br><img src=\"pic_doc/redis_sds.jpeg\" alt> </p>\n<ol>\n<li>free属性的值为0，表示这个SDS没有分配任何未使用空间。</li>\n<li>len属性值为5，表示这个SDS保存了一个长度为5的字符串</li>\n<li>buf属性是一个char类型的数组，数组的前五个元素分别保存了 ‘R’,’e’,’d’,’i’,’s’ 五个字符，而最后一个元素则保存了空字符’\\0’。</li>\n</ol>\n<p>学过c语言的都知道，c语言中字符串的结尾惯例就是一个空字符 <code>\\0</code>，Redis是用c语言编写的，所以遵循c语言字符串结尾的规范。大家可以看到结尾的空字符<code>\\0</code>虽然占用了一个字符的空间，但不计算在SDS的len属性里面，所以这个空字符串对于SDS的使用者是完全透明的，这样的好处是SDS可以直接重用一部分c语言字符串库中的函数。比如 <code>&lt;stdio.h&gt;/printf</code>函数。</p>\n<p>说完SDS的数据结构，大家肯定知道了SDS中的<code>len</code>与<code>buf[]</code>属性的含义，但可能不知道<code>free</code>是用来做什么的，我们暂时不讨论这个，下一篇再详细说明。</p>\n<p>既然Redis是用c语言编写的，那么保存字符串的时候为什么不用c语言中的表示方式呢？为何还要定义一个SDS呢？</p>\n<p>我们先来看一下”Redis”这个字符串在c语言中的表示<br><img src=\"pic_doc/redis_c_string.jpeg\" alt></p>\n<p>可以看到，c语言使用的这种简单的字符串表示方式，没有记录字符串自身的长度信息，也就是没有SDS中的<code>len</code>属性。想一下若是在c语言中获取这个字符串的长度该怎么获取呢？</p>\n<p>只有一种方法，那就是循环遍历整个字符串，对遇到的每个字符进行计数，直到遇到代表字符串结尾的空字符<code>\\0</code>为止。这个操作的时间复杂度为<code>O(n)</code>，虽然这个复杂度看起来并不是很高，但是还是满足不了Redis在效率性方面的要求（众所周知，Redis的应用场景大部分都会面临海量的并发，对其性能要求很高）。</p>\n<p>那么SDS在获取字符串长度时候的时间复杂度是多少呢？因为SDS在len属性中记录了SDS本身字符串的长度，所以获取字符串长度只需要访问SDS的len属性，所以时间复杂度为<code>O(1)</code>。</p>\n<p>可以看到，通过使用SDS而非c语言中的字符串，Redis将获取字符串的时间复杂度从<code>O(n)</code>降到了<code>O(1)</code>，所以这确保了获取字符串长度的工作不会成为Redis的性能瓶颈。</p>\n<p>当然，SDS与c字符串相比并不只是满足Redis在效率方面的要求，也满足了Redis对安全性以及功能方面的要求，这个我们下期再说吧。</p>\n"},{"title":"Java中的instanceof关键字","date":"2019-08-27T07:56:57.000Z","_content":"\n\ninstanceof是Java的一个二元操作符，和==，>，<是同一类。由于它是由字母组成的，所以也是Java的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回boolean类型的数据（true，false）\n\n接下来让我们实际体验一下此关键字的作用\n\n首先我们定义一个类Obj1（为了简单，我们就不在类中定义任何属性与方法了）\n```java\nclass Obj1{\n\n}\n```\n然后来测试一下instanceof\n\n```java\nObj1 obj1 = new Obj1()\nSystem.out.println(obj1 instanceof Obj1);\n```\n输出结果为 `true`\n\n若类存在继承关系呢？，我们来试一下\n\n首先，定义Obj2，并使其继承Obj1\n\n```java\nclass Obj2 extends Obj1{\n\n}\n```\n然后，测试一下instanceof\n```java\nObj2 obj2 = new Obj2();\nSystem.out.println(obj2 instanceof Obj1);\n\n```\n\n输出结果为 `true`\n可以看到，由于Obj2继承了Obj1，所以obj2也是Obj1的实例\n\n那反过来呢？\n\n```java\nObj1 obj1 = new Obj1();\nSystem.out.println(obj1 instanceof Obj2);\n```\n可以看到输出结果为 `false`\n\n\n若是某一个类有接口的继承关系，与上面类的继承关系也一样，大家可以自己试一试。\n","source":"_posts/Java中的instanceof关键字.md","raw":"---\ntitle: Java中的instanceof关键字\ndate: 2019-08-27 15:56:57\ntags: [Java基础]\n---\n\n\ninstanceof是Java的一个二元操作符，和==，>，<是同一类。由于它是由字母组成的，所以也是Java的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回boolean类型的数据（true，false）\n\n接下来让我们实际体验一下此关键字的作用\n\n首先我们定义一个类Obj1（为了简单，我们就不在类中定义任何属性与方法了）\n```java\nclass Obj1{\n\n}\n```\n然后来测试一下instanceof\n\n```java\nObj1 obj1 = new Obj1()\nSystem.out.println(obj1 instanceof Obj1);\n```\n输出结果为 `true`\n\n若类存在继承关系呢？，我们来试一下\n\n首先，定义Obj2，并使其继承Obj1\n\n```java\nclass Obj2 extends Obj1{\n\n}\n```\n然后，测试一下instanceof\n```java\nObj2 obj2 = new Obj2();\nSystem.out.println(obj2 instanceof Obj1);\n\n```\n\n输出结果为 `true`\n可以看到，由于Obj2继承了Obj1，所以obj2也是Obj1的实例\n\n那反过来呢？\n\n```java\nObj1 obj1 = new Obj1();\nSystem.out.println(obj1 instanceof Obj2);\n```\n可以看到输出结果为 `false`\n\n\n若是某一个类有接口的继承关系，与上面类的继承关系也一样，大家可以自己试一试。\n","slug":"Java中的instanceof关键字","published":1,"updated":"2019-09-08T08:49:41.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck28uvm4k0005yzk3zyj670w1","content":"<p>instanceof是Java的一个二元操作符，和==，&gt;，&lt;是同一类。由于它是由字母组成的，所以也是Java的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回boolean类型的数据（true，false）</p>\n<p>接下来让我们实际体验一下此关键字的作用</p>\n<p>首先我们定义一个类Obj1（为了简单，我们就不在类中定义任何属性与方法了）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj1</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后来测试一下instanceof</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj1 obj1 = <span class=\"keyword\">new</span> Obj1()</span><br><span class=\"line\">System.out.println(obj1 <span class=\"keyword\">instanceof</span> Obj1);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为 <code>true</code></p>\n<p>若类存在继承关系呢？，我们来试一下</p>\n<p>首先，定义Obj2，并使其继承Obj1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Obj1</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，测试一下instanceof</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj2 obj2 = <span class=\"keyword\">new</span> Obj2();</span><br><span class=\"line\">System.out.println(obj2 <span class=\"keyword\">instanceof</span> Obj1);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为 <code>true</code><br>可以看到，由于Obj2继承了Obj1，所以obj2也是Obj1的实例</p>\n<p>那反过来呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj1 obj1 = <span class=\"keyword\">new</span> Obj1();</span><br><span class=\"line\">System.out.println(obj1 <span class=\"keyword\">instanceof</span> Obj2);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到输出结果为 <code>false</code></p>\n<p>若是某一个类有接口的继承关系，与上面类的继承关系也一样，大家可以自己试一试。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>instanceof是Java的一个二元操作符，和==，&gt;，&lt;是同一类。由于它是由字母组成的，所以也是Java的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回boolean类型的数据（true，false）</p>\n<p>接下来让我们实际体验一下此关键字的作用</p>\n<p>首先我们定义一个类Obj1（为了简单，我们就不在类中定义任何属性与方法了）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj1</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后来测试一下instanceof</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj1 obj1 = <span class=\"keyword\">new</span> Obj1()</span><br><span class=\"line\">System.out.println(obj1 <span class=\"keyword\">instanceof</span> Obj1);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为 <code>true</code></p>\n<p>若类存在继承关系呢？，我们来试一下</p>\n<p>首先，定义Obj2，并使其继承Obj1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Obj1</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，测试一下instanceof</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj2 obj2 = <span class=\"keyword\">new</span> Obj2();</span><br><span class=\"line\">System.out.println(obj2 <span class=\"keyword\">instanceof</span> Obj1);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为 <code>true</code><br>可以看到，由于Obj2继承了Obj1，所以obj2也是Obj1的实例</p>\n<p>那反过来呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj1 obj1 = <span class=\"keyword\">new</span> Obj1();</span><br><span class=\"line\">System.out.println(obj1 <span class=\"keyword\">instanceof</span> Obj2);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到输出结果为 <code>false</code></p>\n<p>若是某一个类有接口的继承关系，与上面类的继承关系也一样，大家可以自己试一试。</p>\n"},{"title":"二分查找及其Java代码实现","date":"2019-08-31T06:38:11.000Z","_content":"假设我们在词典中查找一个k开头的单词，我们会怎么做呢？\n1. 从词典第一页开始一页一页的翻页，然后直到翻到k开头的单词。\n2. 直接翻页到词典大概中间的位置，然后根据词典a-z排列规律，判断翻到的页在k之前，还是之后，然后继续翻页。\n\n其实这就是一个查找问题，上面第二种方法就是 `二分查找`\n\n我们再举一个例子：\n我自己随便想一个 `1-100` 之间的数字，然后让你来猜，你每次猜测之后我都会告诉你，猜大了还是猜小了。（假设我心中想的数字是60）\n\n1. 第一种方式：假设你从 `1` 开始依次往上猜，要猜到 `60` 你得猜60次才能猜到。这种方式就是 `简单查找`。（当然聪明如你肯定不会以这种方式来猜）\n2. 第二种方式：从 `50` 开始，小了，排除`1-50`，排除了一半数字；接下来你猜 `75`，大了，又排除了一半数字`75-100`；接下来你猜 `63`，大了；依次类推，你每次猜测的都是中间的数字，从而每次都将余下的数字排除一半，无论我心中的所想的数字是几，你在7步之内就能猜到。（大家想想为什么是7次？给个提示，2的6次方是64,2的7次方是128。）\n\n上述第二种方式就是 `二分查找` 。\n\n一般而言，对于包含n个元素的列表，用二分查找最多需要 `logn` 步（log以2为底），用简单查找最多需要 `n` 步\n\n接下来我们看看如何编写二分查找的Java代码，有两种方式，一种是利用循环，另一种是利用递归（递归是什么此篇文章就不展开讲了，之后再讲。）\n\n另外需要注意的是，二分查找只能应用在排好顺序的数组或列表上。\n```java\n\n/**\n* BinSearch\n*/\npublic class BinSearch {\n    public static void main(String[] args) {\n        int[] arr = {1,4,8,16,45,48,78};\n        int index = recursionBinarySearch(arr,48,0,arr.length-1);\n        int index2 = commonBinarySearch(arr,48);\n        System.out.println(index);\n        System.out.println(index2);\n    }\n    //递归\n    public static int recursionBinarySearch(int[] arr,int key,int low,int high){\n        \n        if(key < arr[low] || key > arr[high] || low > high){\n            return -1;              \n        }\n        \n        int middle = (low + high) / 2;          //初始中间位置\n        if(arr[middle] > key){\n            //比关键字大则关键字在左区域\n            return recursionBinarySearch(arr, key,low,middle-1);\n        }else if(arr[middle] < key){\n            //比关键字小则关键字在右区域\n            return recursionBinarySearch(arr, key,middle+1,high);\n        }else {\n            return middle;\n        }\n    }\n    //循环\n    public static int commonBinarySearch(int[] arr,int key){\n        int low = 0;\n        int high = arr.length - 1;\n        int middle = 0;         //定义middle\n        \n        if(key < arr[low] || key > arr[high] || low > high){\n            return -1;              \n        }\n        \n        while(low <= high){\n            middle = (low + high) / 2;\n            if(arr[middle] > key){\n                //比关键字大则关键字在左区域\n                high = middle - 1;\n            }else if(arr[middle] < key){\n                //比关键字小则关键字在右区域\n                low = middle + 1;\n            }else{\n                return middle;\n            }\n        }\n        return -1;      //最后仍然没有找到，则返回-1\n    }\n}\n\n\n```\n","source":"_posts/二分查找及其Java代码实现.md","raw":"---\ntitle: 二分查找及其Java代码实现\ndate: 2019-08-31 14:38:11\ntags: 算法\n---\n假设我们在词典中查找一个k开头的单词，我们会怎么做呢？\n1. 从词典第一页开始一页一页的翻页，然后直到翻到k开头的单词。\n2. 直接翻页到词典大概中间的位置，然后根据词典a-z排列规律，判断翻到的页在k之前，还是之后，然后继续翻页。\n\n其实这就是一个查找问题，上面第二种方法就是 `二分查找`\n\n我们再举一个例子：\n我自己随便想一个 `1-100` 之间的数字，然后让你来猜，你每次猜测之后我都会告诉你，猜大了还是猜小了。（假设我心中想的数字是60）\n\n1. 第一种方式：假设你从 `1` 开始依次往上猜，要猜到 `60` 你得猜60次才能猜到。这种方式就是 `简单查找`。（当然聪明如你肯定不会以这种方式来猜）\n2. 第二种方式：从 `50` 开始，小了，排除`1-50`，排除了一半数字；接下来你猜 `75`，大了，又排除了一半数字`75-100`；接下来你猜 `63`，大了；依次类推，你每次猜测的都是中间的数字，从而每次都将余下的数字排除一半，无论我心中的所想的数字是几，你在7步之内就能猜到。（大家想想为什么是7次？给个提示，2的6次方是64,2的7次方是128。）\n\n上述第二种方式就是 `二分查找` 。\n\n一般而言，对于包含n个元素的列表，用二分查找最多需要 `logn` 步（log以2为底），用简单查找最多需要 `n` 步\n\n接下来我们看看如何编写二分查找的Java代码，有两种方式，一种是利用循环，另一种是利用递归（递归是什么此篇文章就不展开讲了，之后再讲。）\n\n另外需要注意的是，二分查找只能应用在排好顺序的数组或列表上。\n```java\n\n/**\n* BinSearch\n*/\npublic class BinSearch {\n    public static void main(String[] args) {\n        int[] arr = {1,4,8,16,45,48,78};\n        int index = recursionBinarySearch(arr,48,0,arr.length-1);\n        int index2 = commonBinarySearch(arr,48);\n        System.out.println(index);\n        System.out.println(index2);\n    }\n    //递归\n    public static int recursionBinarySearch(int[] arr,int key,int low,int high){\n        \n        if(key < arr[low] || key > arr[high] || low > high){\n            return -1;              \n        }\n        \n        int middle = (low + high) / 2;          //初始中间位置\n        if(arr[middle] > key){\n            //比关键字大则关键字在左区域\n            return recursionBinarySearch(arr, key,low,middle-1);\n        }else if(arr[middle] < key){\n            //比关键字小则关键字在右区域\n            return recursionBinarySearch(arr, key,middle+1,high);\n        }else {\n            return middle;\n        }\n    }\n    //循环\n    public static int commonBinarySearch(int[] arr,int key){\n        int low = 0;\n        int high = arr.length - 1;\n        int middle = 0;         //定义middle\n        \n        if(key < arr[low] || key > arr[high] || low > high){\n            return -1;              \n        }\n        \n        while(low <= high){\n            middle = (low + high) / 2;\n            if(arr[middle] > key){\n                //比关键字大则关键字在左区域\n                high = middle - 1;\n            }else if(arr[middle] < key){\n                //比关键字小则关键字在右区域\n                low = middle + 1;\n            }else{\n                return middle;\n            }\n        }\n        return -1;      //最后仍然没有找到，则返回-1\n    }\n}\n\n\n```\n","slug":"二分查找及其Java代码实现","published":1,"updated":"2019-09-08T08:49:04.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck28uvm4l0006yzk3812b4hqs","content":"<p>假设我们在词典中查找一个k开头的单词，我们会怎么做呢？</p>\n<ol>\n<li>从词典第一页开始一页一页的翻页，然后直到翻到k开头的单词。</li>\n<li>直接翻页到词典大概中间的位置，然后根据词典a-z排列规律，判断翻到的页在k之前，还是之后，然后继续翻页。</li>\n</ol>\n<p>其实这就是一个查找问题，上面第二种方法就是 <code>二分查找</code></p>\n<p>我们再举一个例子：<br>我自己随便想一个 <code>1-100</code> 之间的数字，然后让你来猜，你每次猜测之后我都会告诉你，猜大了还是猜小了。（假设我心中想的数字是60）</p>\n<ol>\n<li>第一种方式：假设你从 <code>1</code> 开始依次往上猜，要猜到 <code>60</code> 你得猜60次才能猜到。这种方式就是 <code>简单查找</code>。（当然聪明如你肯定不会以这种方式来猜）</li>\n<li>第二种方式：从 <code>50</code> 开始，小了，排除<code>1-50</code>，排除了一半数字；接下来你猜 <code>75</code>，大了，又排除了一半数字<code>75-100</code>；接下来你猜 <code>63</code>，大了；依次类推，你每次猜测的都是中间的数字，从而每次都将余下的数字排除一半，无论我心中的所想的数字是几，你在7步之内就能猜到。（大家想想为什么是7次？给个提示，2的6次方是64,2的7次方是128。）</li>\n</ol>\n<p>上述第二种方式就是 <code>二分查找</code> 。</p>\n<p>一般而言，对于包含n个元素的列表，用二分查找最多需要 <code>logn</code> 步（log以2为底），用简单查找最多需要 <code>n</code> 步</p>\n<p>接下来我们看看如何编写二分查找的Java代码，有两种方式，一种是利用循环，另一种是利用递归（递归是什么此篇文章就不展开讲了，之后再讲。）</p>\n<p>另外需要注意的是，二分查找只能应用在排好顺序的数组或列表上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* BinSearch</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinSearch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">16</span>,<span class=\"number\">45</span>,<span class=\"number\">48</span>,<span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = recursionBinarySearch(arr,<span class=\"number\">48</span>,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index2 = commonBinarySearch(arr,<span class=\"number\">48</span>);</span><br><span class=\"line\">        System.out.println(index);</span><br><span class=\"line\">        System.out.println(index2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//递归</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">recursionBinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> key,<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; arr[low] || key &gt; arr[high] || low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = (low + high) / <span class=\"number\">2</span>;          <span class=\"comment\">//初始中间位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字大则关键字在左区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,low,middle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字小则关键字在右区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,middle+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//循环</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">commonBinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> high = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = <span class=\"number\">0</span>;         <span class=\"comment\">//定义middle</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; arr[low] || key &gt; arr[high] || low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(low &lt;= high)&#123;</span><br><span class=\"line\">            middle = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//比关键字大则关键字在左区域</span></span><br><span class=\"line\">                high = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//比关键字小则关键字在右区域</span></span><br><span class=\"line\">                low = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;      <span class=\"comment\">//最后仍然没有找到，则返回-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>假设我们在词典中查找一个k开头的单词，我们会怎么做呢？</p>\n<ol>\n<li>从词典第一页开始一页一页的翻页，然后直到翻到k开头的单词。</li>\n<li>直接翻页到词典大概中间的位置，然后根据词典a-z排列规律，判断翻到的页在k之前，还是之后，然后继续翻页。</li>\n</ol>\n<p>其实这就是一个查找问题，上面第二种方法就是 <code>二分查找</code></p>\n<p>我们再举一个例子：<br>我自己随便想一个 <code>1-100</code> 之间的数字，然后让你来猜，你每次猜测之后我都会告诉你，猜大了还是猜小了。（假设我心中想的数字是60）</p>\n<ol>\n<li>第一种方式：假设你从 <code>1</code> 开始依次往上猜，要猜到 <code>60</code> 你得猜60次才能猜到。这种方式就是 <code>简单查找</code>。（当然聪明如你肯定不会以这种方式来猜）</li>\n<li>第二种方式：从 <code>50</code> 开始，小了，排除<code>1-50</code>，排除了一半数字；接下来你猜 <code>75</code>，大了，又排除了一半数字<code>75-100</code>；接下来你猜 <code>63</code>，大了；依次类推，你每次猜测的都是中间的数字，从而每次都将余下的数字排除一半，无论我心中的所想的数字是几，你在7步之内就能猜到。（大家想想为什么是7次？给个提示，2的6次方是64,2的7次方是128。）</li>\n</ol>\n<p>上述第二种方式就是 <code>二分查找</code> 。</p>\n<p>一般而言，对于包含n个元素的列表，用二分查找最多需要 <code>logn</code> 步（log以2为底），用简单查找最多需要 <code>n</code> 步</p>\n<p>接下来我们看看如何编写二分查找的Java代码，有两种方式，一种是利用循环，另一种是利用递归（递归是什么此篇文章就不展开讲了，之后再讲。）</p>\n<p>另外需要注意的是，二分查找只能应用在排好顺序的数组或列表上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* BinSearch</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinSearch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">16</span>,<span class=\"number\">45</span>,<span class=\"number\">48</span>,<span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = recursionBinarySearch(arr,<span class=\"number\">48</span>,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index2 = commonBinarySearch(arr,<span class=\"number\">48</span>);</span><br><span class=\"line\">        System.out.println(index);</span><br><span class=\"line\">        System.out.println(index2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//递归</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">recursionBinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> key,<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; arr[low] || key &gt; arr[high] || low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = (low + high) / <span class=\"number\">2</span>;          <span class=\"comment\">//初始中间位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字大则关键字在左区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,low,middle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字小则关键字在右区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,middle+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//循环</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">commonBinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> high = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = <span class=\"number\">0</span>;         <span class=\"comment\">//定义middle</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; arr[low] || key &gt; arr[high] || low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(low &lt;= high)&#123;</span><br><span class=\"line\">            middle = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//比关键字大则关键字在左区域</span></span><br><span class=\"line\">                high = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//比关键字小则关键字在右区域</span></span><br><span class=\"line\">                low = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;      <span class=\"comment\">//最后仍然没有找到，则返回-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"LeetCode第一题-TwoSum","date":"2019-10-01T12:14:26.000Z","_content":"\n刷了无数遍的LeetCode第一题，为啥刷了无数遍呢，因为每次想提高自己算法与数据结构能力的时候我都会下定决心来LeetCode刷题，而每次刷题，都是从第一题开始...\n\n不多扯淡，直接开题。\n\n题目要求是这样的：\n```\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n```\n\n\n啥意思呢，帮英文不好的同学翻译一下：\n\n给定一个整数数组 `nums` 和一个目标值 `target`，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n例如：\n```\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n```\n\n首先，一般人第一个想到的方法就是暴力破解，也就是直接循环两次数组，遍历数组中每个元素 `x`，再次遍历数组，并查找是否存在一个值与 `target - x` 相等的目标元素。\n\n先亮出代码，我们再来讨论程序性能。\n\n```Java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n然后我们来讨论一下此种解决方式的代码性能，分析一段代码的性能，主要从时间复杂度，以及空间复杂度两个方面来考虑。\n简单解释一下什么是时间复杂度，什么是空间复杂度。\n\n时间复杂度指的是解决一个问题，程序所需要进行多少次操作。\n空间复杂度指的是解决一个问题，所需要的额外空间。\n\n上述算法的复杂度为：\n\n时间复杂度：O(n<sup>2</sup>)，对于每个元素（一共`n`个），我们试图通过遍历数组的其余部分（其余的`n-1`个元素）来寻找它所对应的目标元素，这将耗费`O(n)`的时间。遍历数组中每个元素时间复杂度为O(n)，遍历数组其余部分的时间复杂度为`O(n)`（准确的来说为`O(n-1)`，但是因为`1`是常数，与n比起来可以忽略不计，所以简写为`O(n)`），因此时间复杂度为O(n<sup>2</sup>)。\n\n空间复杂度：`O(1)`。\n\n可以看到，此种方法的时间复杂度很高，因为这道题的本质还是在数组中查找元素，这相当于两层嵌套循环。说到查找元素，可能同学们会想到，可以用二分查找啊，二分查找不比简单的for循环速度快多了。确实，二分查找比暴力查找速度快得多，但是，二分查找只适用于有序数组，此题目中数组并不是有序的，所以不能使用二分查找。\n\n那么，这道题有没有更加快速的解法呢？当然是有的。\n\n上面说了，这道题的本质还是在数组中查找元素，重点在于查找，我们的目的是缩短查找的时间。那么有什么方法可以缩短查找时间呢？学过数据结构的同学应该都知道或者听说过一种数据结构--`散列表`（又叫做`哈希表`）。这种数据结构，在无冲突的情况下，查找元素的时间复杂度为`O(1)`，比暴力循环数组的`O(n)`快了很多。那么我们如何利用它来解决这个问题呢？\n\n一个简单的实现，使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素`(target - nums[i])`是否存在于表中。注意，该目标元素不能是 `nums[i]` 本身！\n\n```Java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            map.put(nums[i], i);\n        }\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement) && map.get(complement) != i) {\n                return new int[] { i, map.get(complement) };\n            }\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n\n`注：这里使用了Java中的集合类HashMap，其实HashMap本质上就是哈希表`\n\n复杂度分析：\n\n时间复杂度：`O(n)`，\n我们把包含有 `n` 个元素的列表遍历两次。由于哈希表将查找时间缩短到 `O(1)` ，所以时间复杂度为 `O(n)`。\n\n空间复杂度：`O(n)`，\n所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 `n` 个元素。\n\n可以看到，我们将程序的时间复杂度从O(n<sup>2</sup>)降到了`O(n)`，这说明我们的程序变得更快了，但是空间复杂度从`O(1)`变成了`O(n)`，占用的空间更多了。我们使用空间换取了时间，在现在程序效率要求较高，而内存空间或者硬盘空间成本日益廉价的情况下，如果没有特殊要求，我们可以不关注程序的空间复杂度，只关心程序的时间复杂度。\n\n\n上面哈希表的解法，我们使用了两遍哈希表，第一遍是把数组中的元素放到哈希表中，也就是建表；第二遍从哈希表中进行查找。\n那么我们能不能使用一次哈希表就解决问题呢？\n\n我们看一下下面的代码\n```Java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            }\n            map.put(nums[i], i);\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。\n\n复杂度分析：\n\n时间复杂度：`O(n)`，\n我们只遍历了包含有 `n` 个元素的列表一次。在表中进行的每次查找只花费 `O(1)` 的时间。\n\n空间复杂度：`O(n)`，\n所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 `n` 个元素。\n\n可以看到，这种方法的时间复杂度与空间复杂度，和两遍哈希表的方法是一样的，程序性能没有什么差别。但这种方法只用了一次for循环，看起来就很高端，看起来就要比两遍哈希表的方法效率要高（只是看起来要高，其实效率提高很有限。。），为啥还要讲最后一种解法呢？因为很多面试官就喜欢这种看起来高端的解法。（当然，只要你不用第一中方法暴力求解，面试官还是会欣赏你的。。。）\n\n\n\n\n\n","source":"_posts/LeetCode第一题.md","raw":"---\ntitle: LeetCode第一题-TwoSum\ndate: 2019-10-01 20:14:26\ntags: [算法,LeetCode,面试题]\n---\n\n刷了无数遍的LeetCode第一题，为啥刷了无数遍呢，因为每次想提高自己算法与数据结构能力的时候我都会下定决心来LeetCode刷题，而每次刷题，都是从第一题开始...\n\n不多扯淡，直接开题。\n\n题目要求是这样的：\n```\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n```\n\n\n啥意思呢，帮英文不好的同学翻译一下：\n\n给定一个整数数组 `nums` 和一个目标值 `target`，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n例如：\n```\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n```\n\n首先，一般人第一个想到的方法就是暴力破解，也就是直接循环两次数组，遍历数组中每个元素 `x`，再次遍历数组，并查找是否存在一个值与 `target - x` 相等的目标元素。\n\n先亮出代码，我们再来讨论程序性能。\n\n```Java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n然后我们来讨论一下此种解决方式的代码性能，分析一段代码的性能，主要从时间复杂度，以及空间复杂度两个方面来考虑。\n简单解释一下什么是时间复杂度，什么是空间复杂度。\n\n时间复杂度指的是解决一个问题，程序所需要进行多少次操作。\n空间复杂度指的是解决一个问题，所需要的额外空间。\n\n上述算法的复杂度为：\n\n时间复杂度：O(n<sup>2</sup>)，对于每个元素（一共`n`个），我们试图通过遍历数组的其余部分（其余的`n-1`个元素）来寻找它所对应的目标元素，这将耗费`O(n)`的时间。遍历数组中每个元素时间复杂度为O(n)，遍历数组其余部分的时间复杂度为`O(n)`（准确的来说为`O(n-1)`，但是因为`1`是常数，与n比起来可以忽略不计，所以简写为`O(n)`），因此时间复杂度为O(n<sup>2</sup>)。\n\n空间复杂度：`O(1)`。\n\n可以看到，此种方法的时间复杂度很高，因为这道题的本质还是在数组中查找元素，这相当于两层嵌套循环。说到查找元素，可能同学们会想到，可以用二分查找啊，二分查找不比简单的for循环速度快多了。确实，二分查找比暴力查找速度快得多，但是，二分查找只适用于有序数组，此题目中数组并不是有序的，所以不能使用二分查找。\n\n那么，这道题有没有更加快速的解法呢？当然是有的。\n\n上面说了，这道题的本质还是在数组中查找元素，重点在于查找，我们的目的是缩短查找的时间。那么有什么方法可以缩短查找时间呢？学过数据结构的同学应该都知道或者听说过一种数据结构--`散列表`（又叫做`哈希表`）。这种数据结构，在无冲突的情况下，查找元素的时间复杂度为`O(1)`，比暴力循环数组的`O(n)`快了很多。那么我们如何利用它来解决这个问题呢？\n\n一个简单的实现，使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素`(target - nums[i])`是否存在于表中。注意，该目标元素不能是 `nums[i]` 本身！\n\n```Java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            map.put(nums[i], i);\n        }\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement) && map.get(complement) != i) {\n                return new int[] { i, map.get(complement) };\n            }\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n\n`注：这里使用了Java中的集合类HashMap，其实HashMap本质上就是哈希表`\n\n复杂度分析：\n\n时间复杂度：`O(n)`，\n我们把包含有 `n` 个元素的列表遍历两次。由于哈希表将查找时间缩短到 `O(1)` ，所以时间复杂度为 `O(n)`。\n\n空间复杂度：`O(n)`，\n所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 `n` 个元素。\n\n可以看到，我们将程序的时间复杂度从O(n<sup>2</sup>)降到了`O(n)`，这说明我们的程序变得更快了，但是空间复杂度从`O(1)`变成了`O(n)`，占用的空间更多了。我们使用空间换取了时间，在现在程序效率要求较高，而内存空间或者硬盘空间成本日益廉价的情况下，如果没有特殊要求，我们可以不关注程序的空间复杂度，只关心程序的时间复杂度。\n\n\n上面哈希表的解法，我们使用了两遍哈希表，第一遍是把数组中的元素放到哈希表中，也就是建表；第二遍从哈希表中进行查找。\n那么我们能不能使用一次哈希表就解决问题呢？\n\n我们看一下下面的代码\n```Java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            }\n            map.put(nums[i], i);\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。\n\n复杂度分析：\n\n时间复杂度：`O(n)`，\n我们只遍历了包含有 `n` 个元素的列表一次。在表中进行的每次查找只花费 `O(1)` 的时间。\n\n空间复杂度：`O(n)`，\n所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 `n` 个元素。\n\n可以看到，这种方法的时间复杂度与空间复杂度，和两遍哈希表的方法是一样的，程序性能没有什么差别。但这种方法只用了一次for循环，看起来就很高端，看起来就要比两遍哈希表的方法效率要高（只是看起来要高，其实效率提高很有限。。），为啥还要讲最后一种解法呢？因为很多面试官就喜欢这种看起来高端的解法。（当然，只要你不用第一中方法暴力求解，面试官还是会欣赏你的。。。）\n\n\n\n\n\n","slug":"LeetCode第一题","published":1,"updated":"2019-10-20T11:50:46.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck28uvm4m0007yzk367w9bqu3","content":"<p>刷了无数遍的LeetCode第一题，为啥刷了无数遍呢，因为每次想提高自己算法与数据结构能力的时候我都会下定决心来LeetCode刷题，而每次刷题，都是从第一题开始…</p>\n<p>不多扯淡，直接开题。</p>\n<p>题目要求是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given an array of integers, return indices of the two numbers such that they add up to a specific target.</span><br><span class=\"line\"></span><br><span class=\"line\">You may assume that each input would have exactly one solution, and you may not use the same element twice.</span><br></pre></td></tr></table></figure>\n\n<p>啥意思呢，帮英文不好的同学翻译一下：</p>\n<p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class=\"line\"></span><br><span class=\"line\">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class=\"line\">return [0, 1].</span><br></pre></td></tr></table></figure>\n\n<p>首先，一般人第一个想到的方法就是暴力破解，也就是直接循环两次数组，遍历数组中每个元素 <code>x</code>，再次遍历数组，并查找是否存在一个值与 <code>target - x</code> 相等的目标元素。</p>\n<p>先亮出代码，我们再来讨论程序性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[j] == target - nums[i]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, j &#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们来讨论一下此种解决方式的代码性能，分析一段代码的性能，主要从时间复杂度，以及空间复杂度两个方面来考虑。<br>简单解释一下什么是时间复杂度，什么是空间复杂度。</p>\n<p>时间复杂度指的是解决一个问题，程序所需要进行多少次操作。<br>空间复杂度指的是解决一个问题，所需要的额外空间。</p>\n<p>上述算法的复杂度为：</p>\n<p>时间复杂度：O(n<sup>2</sup>)，对于每个元素（一共<code>n</code>个），我们试图通过遍历数组的其余部分（其余的<code>n-1</code>个元素）来寻找它所对应的目标元素，这将耗费<code>O(n)</code>的时间。遍历数组中每个元素时间复杂度为O(n)，遍历数组其余部分的时间复杂度为<code>O(n)</code>（准确的来说为<code>O(n-1)</code>，但是因为<code>1</code>是常数，与n比起来可以忽略不计，所以简写为<code>O(n)</code>），因此时间复杂度为O(n<sup>2</sup>)。</p>\n<p>空间复杂度：<code>O(1)</code>。</p>\n<p>可以看到，此种方法的时间复杂度很高，因为这道题的本质还是在数组中查找元素，这相当于两层嵌套循环。说到查找元素，可能同学们会想到，可以用二分查找啊，二分查找不比简单的for循环速度快多了。确实，二分查找比暴力查找速度快得多，但是，二分查找只适用于有序数组，此题目中数组并不是有序的，所以不能使用二分查找。</p>\n<p>那么，这道题有没有更加快速的解法呢？当然是有的。</p>\n<p>上面说了，这道题的本质还是在数组中查找元素，重点在于查找，我们的目的是缩短查找的时间。那么有什么方法可以缩短查找时间呢？学过数据结构的同学应该都知道或者听说过一种数据结构–<code>散列表</code>（又叫做<code>哈希表</code>）。这种数据结构，在无冲突的情况下，查找元素的时间复杂度为<code>O(1)</code>，比暴力循环数组的<code>O(n)</code>快了很多。那么我们如何利用它来解决这个问题呢？</p>\n<p>一个简单的实现，使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素<code>(target - nums[i])</code>是否存在于表中。注意，该目标元素不能是 <code>nums[i]</code> 本身！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            map.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, map.get(complement) &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>注：这里使用了Java中的集合类HashMap，其实HashMap本质上就是哈希表</code></p>\n<p>复杂度分析：</p>\n<p>时间复杂度：<code>O(n)</code>，<br>我们把包含有 <code>n</code> 个元素的列表遍历两次。由于哈希表将查找时间缩短到 <code>O(1)</code> ，所以时间复杂度为 <code>O(n)</code>。</p>\n<p>空间复杂度：<code>O(n)</code>，<br>所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 <code>n</code> 个元素。</p>\n<p>可以看到，我们将程序的时间复杂度从O(n<sup>2</sup>)降到了<code>O(n)</code>，这说明我们的程序变得更快了，但是空间复杂度从<code>O(1)</code>变成了<code>O(n)</code>，占用的空间更多了。我们使用空间换取了时间，在现在程序效率要求较高，而内存空间或者硬盘空间成本日益廉价的情况下，如果没有特殊要求，我们可以不关注程序的空间复杂度，只关心程序的时间复杂度。</p>\n<p>上面哈希表的解法，我们使用了两遍哈希表，第一遍是把数组中的元素放到哈希表中，也就是建表；第二遍从哈希表中进行查找。<br>那么我们能不能使用一次哈希表就解决问题呢？</p>\n<p>我们看一下下面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(complement)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            map.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。</p>\n<p>复杂度分析：</p>\n<p>时间复杂度：<code>O(n)</code>，<br>我们只遍历了包含有 <code>n</code> 个元素的列表一次。在表中进行的每次查找只花费 <code>O(1)</code> 的时间。</p>\n<p>空间复杂度：<code>O(n)</code>，<br>所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 <code>n</code> 个元素。</p>\n<p>可以看到，这种方法的时间复杂度与空间复杂度，和两遍哈希表的方法是一样的，程序性能没有什么差别。但这种方法只用了一次for循环，看起来就很高端，看起来就要比两遍哈希表的方法效率要高（只是看起来要高，其实效率提高很有限。。），为啥还要讲最后一种解法呢？因为很多面试官就喜欢这种看起来高端的解法。（当然，只要你不用第一中方法暴力求解，面试官还是会欣赏你的。。。）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>刷了无数遍的LeetCode第一题，为啥刷了无数遍呢，因为每次想提高自己算法与数据结构能力的时候我都会下定决心来LeetCode刷题，而每次刷题，都是从第一题开始…</p>\n<p>不多扯淡，直接开题。</p>\n<p>题目要求是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given an array of integers, return indices of the two numbers such that they add up to a specific target.</span><br><span class=\"line\"></span><br><span class=\"line\">You may assume that each input would have exactly one solution, and you may not use the same element twice.</span><br></pre></td></tr></table></figure>\n\n<p>啥意思呢，帮英文不好的同学翻译一下：</p>\n<p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class=\"line\"></span><br><span class=\"line\">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class=\"line\">return [0, 1].</span><br></pre></td></tr></table></figure>\n\n<p>首先，一般人第一个想到的方法就是暴力破解，也就是直接循环两次数组，遍历数组中每个元素 <code>x</code>，再次遍历数组，并查找是否存在一个值与 <code>target - x</code> 相等的目标元素。</p>\n<p>先亮出代码，我们再来讨论程序性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[j] == target - nums[i]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, j &#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们来讨论一下此种解决方式的代码性能，分析一段代码的性能，主要从时间复杂度，以及空间复杂度两个方面来考虑。<br>简单解释一下什么是时间复杂度，什么是空间复杂度。</p>\n<p>时间复杂度指的是解决一个问题，程序所需要进行多少次操作。<br>空间复杂度指的是解决一个问题，所需要的额外空间。</p>\n<p>上述算法的复杂度为：</p>\n<p>时间复杂度：O(n<sup>2</sup>)，对于每个元素（一共<code>n</code>个），我们试图通过遍历数组的其余部分（其余的<code>n-1</code>个元素）来寻找它所对应的目标元素，这将耗费<code>O(n)</code>的时间。遍历数组中每个元素时间复杂度为O(n)，遍历数组其余部分的时间复杂度为<code>O(n)</code>（准确的来说为<code>O(n-1)</code>，但是因为<code>1</code>是常数，与n比起来可以忽略不计，所以简写为<code>O(n)</code>），因此时间复杂度为O(n<sup>2</sup>)。</p>\n<p>空间复杂度：<code>O(1)</code>。</p>\n<p>可以看到，此种方法的时间复杂度很高，因为这道题的本质还是在数组中查找元素，这相当于两层嵌套循环。说到查找元素，可能同学们会想到，可以用二分查找啊，二分查找不比简单的for循环速度快多了。确实，二分查找比暴力查找速度快得多，但是，二分查找只适用于有序数组，此题目中数组并不是有序的，所以不能使用二分查找。</p>\n<p>那么，这道题有没有更加快速的解法呢？当然是有的。</p>\n<p>上面说了，这道题的本质还是在数组中查找元素，重点在于查找，我们的目的是缩短查找的时间。那么有什么方法可以缩短查找时间呢？学过数据结构的同学应该都知道或者听说过一种数据结构–<code>散列表</code>（又叫做<code>哈希表</code>）。这种数据结构，在无冲突的情况下，查找元素的时间复杂度为<code>O(1)</code>，比暴力循环数组的<code>O(n)</code>快了很多。那么我们如何利用它来解决这个问题呢？</p>\n<p>一个简单的实现，使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素<code>(target - nums[i])</code>是否存在于表中。注意，该目标元素不能是 <code>nums[i]</code> 本身！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            map.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, map.get(complement) &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>注：这里使用了Java中的集合类HashMap，其实HashMap本质上就是哈希表</code></p>\n<p>复杂度分析：</p>\n<p>时间复杂度：<code>O(n)</code>，<br>我们把包含有 <code>n</code> 个元素的列表遍历两次。由于哈希表将查找时间缩短到 <code>O(1)</code> ，所以时间复杂度为 <code>O(n)</code>。</p>\n<p>空间复杂度：<code>O(n)</code>，<br>所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 <code>n</code> 个元素。</p>\n<p>可以看到，我们将程序的时间复杂度从O(n<sup>2</sup>)降到了<code>O(n)</code>，这说明我们的程序变得更快了，但是空间复杂度从<code>O(1)</code>变成了<code>O(n)</code>，占用的空间更多了。我们使用空间换取了时间，在现在程序效率要求较高，而内存空间或者硬盘空间成本日益廉价的情况下，如果没有特殊要求，我们可以不关注程序的空间复杂度，只关心程序的时间复杂度。</p>\n<p>上面哈希表的解法，我们使用了两遍哈希表，第一遍是把数组中的元素放到哈希表中，也就是建表；第二遍从哈希表中进行查找。<br>那么我们能不能使用一次哈希表就解决问题呢？</p>\n<p>我们看一下下面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(complement)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            map.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。</p>\n<p>复杂度分析：</p>\n<p>时间复杂度：<code>O(n)</code>，<br>我们只遍历了包含有 <code>n</code> 个元素的列表一次。在表中进行的每次查找只花费 <code>O(1)</code> 的时间。</p>\n<p>空间复杂度：<code>O(n)</code>，<br>所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 <code>n</code> 个元素。</p>\n<p>可以看到，这种方法的时间复杂度与空间复杂度，和两遍哈希表的方法是一样的，程序性能没有什么差别。但这种方法只用了一次for循环，看起来就很高端，看起来就要比两遍哈希表的方法效率要高（只是看起来要高，其实效率提高很有限。。），为啥还要讲最后一种解法呢？因为很多面试官就喜欢这种看起来高端的解法。（当然，只要你不用第一中方法暴力求解，面试官还是会欣赏你的。。。）</p>\n"},{"title":"递归算法及应用","date":"2019-09-08T06:55:10.000Z","_content":"\n\n在上一篇讲二分查找的文章中我们提到了实现二分查找的一种方式，那就是使用递归算法。\n\n```java\n    //递归\n    public static int recursionBinarySearch(int[] arr,int key,int low,int high){\n        \n        if(key < arr[low] || key > arr[high] || low > high){\n            return -1;              \n        }\n        \n        int middle = (low + high) / 2;          //初始中间位置\n        if(arr[middle] > key){\n            //比关键字大则关键字在左区域\n            return recursionBinarySearch(arr, key,low,middle-1);\n        }else if(arr[middle] < key){\n            //比关键字小则关键字在右区域\n            return recursionBinarySearch(arr, key,middle+1,high);\n        }else {\n            return middle;\n        }\n    }\n```\n根据二分查找的原理，当我们取得中间值`arr[middle]`大于想要查找的目标值`key`的时候，我们需要排除比`key`大的那一半数据，也就是`arr[middle]`之后的数据。在代码中我们可以看到，我们通过将`high`参数设置为`middle-1`来排除`middle`之后的数据。同时我们将`middle-1`当做新的`high`传入到函数中继续调用。也就是这个函数自己又继续调用了自己本身，只是改变了参数，将问题分解为原来的一半。然后在此函数中继续上面的步骤，改变参数`low`或者`high`，将`low`或者`high`的新值作为参数继续传给自己并调用自己，这就是递归。\n\n递归算法设计的基本思想是：对于一个复杂的问题，把原问题分解为若干个相对简单类同的子问题，继续下去直到子问题简单到能够直接求解，也就是说到了递归的出口，这样原问题就有递归得解。\n例如上面二分查找(一个复杂的问题)，我们不断将查找范围减半（也就是把原问题分解为相对简单的子问题），直到查找范围就剩一个数（子问题简单到能够直接求解），我们就找到了递归的出口(也就是上述函数中的return middle)。\n\n举两个个生活中的例子来说明什么是递归\n1. 递归就是洋葱，一个洋葱是带着一层洋葱皮的洋葱，拨开一层洋葱皮，里面还是洋葱，再剥开一层洋葱皮，里面···还是洋葱。（如果你愿意一层一层一层的剥开TA的心。。。）\n2. 递归就是包子馅的包子，也就是你剥开包子皮，发现里面是一个新的包子。对这个包子取一个极限，你就会发现，这个包子就是一个馒头。。。\n\n上面说到，使用递归算法求解，需要找到递归的出口，很容易理解，若是没有出口，那么函数总是自己调用自己，永远也不会停下来，直到报出栈溢出(StackOverflowError)的异常。例如如下代码\n```java\npublic class Test {\n\n    public static void main(String[] args) {\n        test();        \n    }\n\n    public static void test(){\n        test();     //自己调用自己   \n    }\n}\n```\n\n输出结果为：\n```java\nException in thread \"main\" java.lang.StackOverflowError\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n```\n拿上面包子馅的包子来举例，我们一层层的剥开包子皮，目的就是找到最里面的包子，但如果我们在递归算法中不设置出口条件，那么就会出现不管剥开多少次包子皮，都找不到最里面的包子的情况。然后你就会发现，这包子其实就是一个馒头。。\n\n所以在我们使用递归算法的时候，必须有一个明确的递归结束条件，称为`递归出口`，有的书上也称为`基线条件`。\n每个递归函数都需要包含两部分，基线条件和递归条件。递归条件指的是函数调用自己，而基线条件指的是函数不再调用自己，从而避免无线循环。\n例如上述二分查找中的基线条件与递归条件，\n\n```java\n        if(arr[middle] > key){           //递归条件\n            return recursionBinarySearch(arr, key,low,middle-1);\n        }else if(arr[middle] < key){    //递归条件\n            return recursionBinarySearch(arr, key,middle+1,high);\n        }else {                         //基线条件（递归出口）\n            return middle;\n        }\n \n```\n递归的应用有哪些呢？最经典的应用就是求斐波那契数列了。\n```java\npublic int f(int n){  \n    if(n == 1 || n == 2){     // 基线条件（递归出口）\n        return 1;  \n    }  \n    return f(n-1) + f(n-2);    //递归条件\n}\n```\n当然斐波那契数列也可以用循环的方式来解决。\n```java\npublic int f(int n) {  \n    int f0 = 1;  \n    int f1 = 1;  \n    int f2 = 0;  \n  \n    for(int i = 2; i < n; i++){  \n        f2 = f0 + f1;  \n        f0 = f1;  \n        f1 = f2;  \n    }  \n    return f2;  \n}\n```\n这两种方法的作用相同，结过相同，但在程序运行的性能上有很大差距。\n使用递归的方式来求解斐波那契数列的时间复杂度为O(2<sup>n</sup>)，而使用循环的方式的时间复杂度为O(n)。可见递归只是让解决方案变得更清晰，并没有性能上的优势。实际上，在一些情况下，使用循环的性能更好。\n\n当然，递归的应用并不只是斐波那契数列求和，二叉树的遍历，排序算法中的排序，都可以用递归来实现。\n\n递归是一种非常优雅的问题解决方法（在不考虑程序性能的前提下），递归将人分为截然不同的阵营：恨它的、爱它的以及恨了几年后又爱上它的。\n\n最后分享一句话，Leigh Caldwell在Stack Overflow上说：“如果使用循环，程序的性能可能更高；如果使用递归，程序可能更容易理解。如何选择要看什么对你来说更重要。”\n\n\n","source":"_posts/递归算法及应用.md","raw":"---\ntitle: 递归算法及应用\ndate: 2019-09-08 14:55:10\ntags: [算法]\n---\n\n\n在上一篇讲二分查找的文章中我们提到了实现二分查找的一种方式，那就是使用递归算法。\n\n```java\n    //递归\n    public static int recursionBinarySearch(int[] arr,int key,int low,int high){\n        \n        if(key < arr[low] || key > arr[high] || low > high){\n            return -1;              \n        }\n        \n        int middle = (low + high) / 2;          //初始中间位置\n        if(arr[middle] > key){\n            //比关键字大则关键字在左区域\n            return recursionBinarySearch(arr, key,low,middle-1);\n        }else if(arr[middle] < key){\n            //比关键字小则关键字在右区域\n            return recursionBinarySearch(arr, key,middle+1,high);\n        }else {\n            return middle;\n        }\n    }\n```\n根据二分查找的原理，当我们取得中间值`arr[middle]`大于想要查找的目标值`key`的时候，我们需要排除比`key`大的那一半数据，也就是`arr[middle]`之后的数据。在代码中我们可以看到，我们通过将`high`参数设置为`middle-1`来排除`middle`之后的数据。同时我们将`middle-1`当做新的`high`传入到函数中继续调用。也就是这个函数自己又继续调用了自己本身，只是改变了参数，将问题分解为原来的一半。然后在此函数中继续上面的步骤，改变参数`low`或者`high`，将`low`或者`high`的新值作为参数继续传给自己并调用自己，这就是递归。\n\n递归算法设计的基本思想是：对于一个复杂的问题，把原问题分解为若干个相对简单类同的子问题，继续下去直到子问题简单到能够直接求解，也就是说到了递归的出口，这样原问题就有递归得解。\n例如上面二分查找(一个复杂的问题)，我们不断将查找范围减半（也就是把原问题分解为相对简单的子问题），直到查找范围就剩一个数（子问题简单到能够直接求解），我们就找到了递归的出口(也就是上述函数中的return middle)。\n\n举两个个生活中的例子来说明什么是递归\n1. 递归就是洋葱，一个洋葱是带着一层洋葱皮的洋葱，拨开一层洋葱皮，里面还是洋葱，再剥开一层洋葱皮，里面···还是洋葱。（如果你愿意一层一层一层的剥开TA的心。。。）\n2. 递归就是包子馅的包子，也就是你剥开包子皮，发现里面是一个新的包子。对这个包子取一个极限，你就会发现，这个包子就是一个馒头。。。\n\n上面说到，使用递归算法求解，需要找到递归的出口，很容易理解，若是没有出口，那么函数总是自己调用自己，永远也不会停下来，直到报出栈溢出(StackOverflowError)的异常。例如如下代码\n```java\npublic class Test {\n\n    public static void main(String[] args) {\n        test();        \n    }\n\n    public static void test(){\n        test();     //自己调用自己   \n    }\n}\n```\n\n输出结果为：\n```java\nException in thread \"main\" java.lang.StackOverflowError\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n```\n拿上面包子馅的包子来举例，我们一层层的剥开包子皮，目的就是找到最里面的包子，但如果我们在递归算法中不设置出口条件，那么就会出现不管剥开多少次包子皮，都找不到最里面的包子的情况。然后你就会发现，这包子其实就是一个馒头。。\n\n所以在我们使用递归算法的时候，必须有一个明确的递归结束条件，称为`递归出口`，有的书上也称为`基线条件`。\n每个递归函数都需要包含两部分，基线条件和递归条件。递归条件指的是函数调用自己，而基线条件指的是函数不再调用自己，从而避免无线循环。\n例如上述二分查找中的基线条件与递归条件，\n\n```java\n        if(arr[middle] > key){           //递归条件\n            return recursionBinarySearch(arr, key,low,middle-1);\n        }else if(arr[middle] < key){    //递归条件\n            return recursionBinarySearch(arr, key,middle+1,high);\n        }else {                         //基线条件（递归出口）\n            return middle;\n        }\n \n```\n递归的应用有哪些呢？最经典的应用就是求斐波那契数列了。\n```java\npublic int f(int n){  \n    if(n == 1 || n == 2){     // 基线条件（递归出口）\n        return 1;  \n    }  \n    return f(n-1) + f(n-2);    //递归条件\n}\n```\n当然斐波那契数列也可以用循环的方式来解决。\n```java\npublic int f(int n) {  \n    int f0 = 1;  \n    int f1 = 1;  \n    int f2 = 0;  \n  \n    for(int i = 2; i < n; i++){  \n        f2 = f0 + f1;  \n        f0 = f1;  \n        f1 = f2;  \n    }  \n    return f2;  \n}\n```\n这两种方法的作用相同，结过相同，但在程序运行的性能上有很大差距。\n使用递归的方式来求解斐波那契数列的时间复杂度为O(2<sup>n</sup>)，而使用循环的方式的时间复杂度为O(n)。可见递归只是让解决方案变得更清晰，并没有性能上的优势。实际上，在一些情况下，使用循环的性能更好。\n\n当然，递归的应用并不只是斐波那契数列求和，二叉树的遍历，排序算法中的排序，都可以用递归来实现。\n\n递归是一种非常优雅的问题解决方法（在不考虑程序性能的前提下），递归将人分为截然不同的阵营：恨它的、爱它的以及恨了几年后又爱上它的。\n\n最后分享一句话，Leigh Caldwell在Stack Overflow上说：“如果使用循环，程序的性能可能更高；如果使用递归，程序可能更容易理解。如何选择要看什么对你来说更重要。”\n\n\n","slug":"递归算法及应用","published":1,"updated":"2019-09-08T08:48:38.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck28uvm4n000ayzk3rf4v6by0","content":"<p>在上一篇讲二分查找的文章中我们提到了实现二分查找的一种方式，那就是使用递归算法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">recursionBinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> key,<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; arr[low] || key &gt; arr[high] || low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = (low + high) / <span class=\"number\">2</span>;          <span class=\"comment\">//初始中间位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字大则关键字在左区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,low,middle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字小则关键字在右区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,middle+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据二分查找的原理，当我们取得中间值<code>arr[middle]</code>大于想要查找的目标值<code>key</code>的时候，我们需要排除比<code>key</code>大的那一半数据，也就是<code>arr[middle]</code>之后的数据。在代码中我们可以看到，我们通过将<code>high</code>参数设置为<code>middle-1</code>来排除<code>middle</code>之后的数据。同时我们将<code>middle-1</code>当做新的<code>high</code>传入到函数中继续调用。也就是这个函数自己又继续调用了自己本身，只是改变了参数，将问题分解为原来的一半。然后在此函数中继续上面的步骤，改变参数<code>low</code>或者<code>high</code>，将<code>low</code>或者<code>high</code>的新值作为参数继续传给自己并调用自己，这就是递归。</p>\n<p>递归算法设计的基本思想是：对于一个复杂的问题，把原问题分解为若干个相对简单类同的子问题，继续下去直到子问题简单到能够直接求解，也就是说到了递归的出口，这样原问题就有递归得解。<br>例如上面二分查找(一个复杂的问题)，我们不断将查找范围减半（也就是把原问题分解为相对简单的子问题），直到查找范围就剩一个数（子问题简单到能够直接求解），我们就找到了递归的出口(也就是上述函数中的return middle)。</p>\n<p>举两个个生活中的例子来说明什么是递归</p>\n<ol>\n<li>递归就是洋葱，一个洋葱是带着一层洋葱皮的洋葱，拨开一层洋葱皮，里面还是洋葱，再剥开一层洋葱皮，里面···还是洋葱。（如果你愿意一层一层一层的剥开TA的心。。。）</li>\n<li>递归就是包子馅的包子，也就是你剥开包子皮，发现里面是一个新的包子。对这个包子取一个极限，你就会发现，这个包子就是一个馒头。。。</li>\n</ol>\n<p>上面说到，使用递归算法求解，需要找到递归的出口，很容易理解，若是没有出口，那么函数总是自己调用自己，永远也不会停下来，直到报出栈溢出(StackOverflowError)的异常。例如如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        test();        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        test();     <span class=\"comment\">//自己调用自己   </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.StackOverflowError</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br></pre></td></tr></table></figure>\n\n<p>拿上面包子馅的包子来举例，我们一层层的剥开包子皮，目的就是找到最里面的包子，但如果我们在递归算法中不设置出口条件，那么就会出现不管剥开多少次包子皮，都找不到最里面的包子的情况。然后你就会发现，这包子其实就是一个馒头。。</p>\n<p>所以在我们使用递归算法的时候，必须有一个明确的递归结束条件，称为<code>递归出口</code>，有的书上也称为<code>基线条件</code>。<br>每个递归函数都需要包含两部分，基线条件和递归条件。递归条件指的是函数调用自己，而基线条件指的是函数不再调用自己，从而避免无线循环。<br>例如上述二分查找中的基线条件与递归条件，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;           <span class=\"comment\">//递归条件</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,low,middle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;    <span class=\"comment\">//递归条件</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,middle+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;                         <span class=\"comment\">//基线条件（递归出口）</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>递归的应用有哪些呢？最经典的应用就是求斐波那契数列了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>)&#123;     <span class=\"comment\">// 基线条件（递归出口）</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(n-<span class=\"number\">1</span>) + f(n-<span class=\"number\">2</span>);    <span class=\"comment\">//递归条件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然斐波那契数列也可以用循环的方式来解决。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> f0 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> f1 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> f2 = <span class=\"number\">0</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n; i++)&#123;  </span><br><span class=\"line\">        f2 = f0 + f1;  </span><br><span class=\"line\">        f0 = f1;  </span><br><span class=\"line\">        f1 = f2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f2;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两种方法的作用相同，结过相同，但在程序运行的性能上有很大差距。<br>使用递归的方式来求解斐波那契数列的时间复杂度为O(2<sup>n</sup>)，而使用循环的方式的时间复杂度为O(n)。可见递归只是让解决方案变得更清晰，并没有性能上的优势。实际上，在一些情况下，使用循环的性能更好。</p>\n<p>当然，递归的应用并不只是斐波那契数列求和，二叉树的遍历，排序算法中的排序，都可以用递归来实现。</p>\n<p>递归是一种非常优雅的问题解决方法（在不考虑程序性能的前提下），递归将人分为截然不同的阵营：恨它的、爱它的以及恨了几年后又爱上它的。</p>\n<p>最后分享一句话，Leigh Caldwell在Stack Overflow上说：“如果使用循环，程序的性能可能更高；如果使用递归，程序可能更容易理解。如何选择要看什么对你来说更重要。”</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在上一篇讲二分查找的文章中我们提到了实现二分查找的一种方式，那就是使用递归算法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">recursionBinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> key,<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; arr[low] || key &gt; arr[high] || low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = (low + high) / <span class=\"number\">2</span>;          <span class=\"comment\">//初始中间位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字大则关键字在左区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,low,middle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字小则关键字在右区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,middle+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据二分查找的原理，当我们取得中间值<code>arr[middle]</code>大于想要查找的目标值<code>key</code>的时候，我们需要排除比<code>key</code>大的那一半数据，也就是<code>arr[middle]</code>之后的数据。在代码中我们可以看到，我们通过将<code>high</code>参数设置为<code>middle-1</code>来排除<code>middle</code>之后的数据。同时我们将<code>middle-1</code>当做新的<code>high</code>传入到函数中继续调用。也就是这个函数自己又继续调用了自己本身，只是改变了参数，将问题分解为原来的一半。然后在此函数中继续上面的步骤，改变参数<code>low</code>或者<code>high</code>，将<code>low</code>或者<code>high</code>的新值作为参数继续传给自己并调用自己，这就是递归。</p>\n<p>递归算法设计的基本思想是：对于一个复杂的问题，把原问题分解为若干个相对简单类同的子问题，继续下去直到子问题简单到能够直接求解，也就是说到了递归的出口，这样原问题就有递归得解。<br>例如上面二分查找(一个复杂的问题)，我们不断将查找范围减半（也就是把原问题分解为相对简单的子问题），直到查找范围就剩一个数（子问题简单到能够直接求解），我们就找到了递归的出口(也就是上述函数中的return middle)。</p>\n<p>举两个个生活中的例子来说明什么是递归</p>\n<ol>\n<li>递归就是洋葱，一个洋葱是带着一层洋葱皮的洋葱，拨开一层洋葱皮，里面还是洋葱，再剥开一层洋葱皮，里面···还是洋葱。（如果你愿意一层一层一层的剥开TA的心。。。）</li>\n<li>递归就是包子馅的包子，也就是你剥开包子皮，发现里面是一个新的包子。对这个包子取一个极限，你就会发现，这个包子就是一个馒头。。。</li>\n</ol>\n<p>上面说到，使用递归算法求解，需要找到递归的出口，很容易理解，若是没有出口，那么函数总是自己调用自己，永远也不会停下来，直到报出栈溢出(StackOverflowError)的异常。例如如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        test();        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        test();     <span class=\"comment\">//自己调用自己   </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.StackOverflowError</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br></pre></td></tr></table></figure>\n\n<p>拿上面包子馅的包子来举例，我们一层层的剥开包子皮，目的就是找到最里面的包子，但如果我们在递归算法中不设置出口条件，那么就会出现不管剥开多少次包子皮，都找不到最里面的包子的情况。然后你就会发现，这包子其实就是一个馒头。。</p>\n<p>所以在我们使用递归算法的时候，必须有一个明确的递归结束条件，称为<code>递归出口</code>，有的书上也称为<code>基线条件</code>。<br>每个递归函数都需要包含两部分，基线条件和递归条件。递归条件指的是函数调用自己，而基线条件指的是函数不再调用自己，从而避免无线循环。<br>例如上述二分查找中的基线条件与递归条件，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;           <span class=\"comment\">//递归条件</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,low,middle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;    <span class=\"comment\">//递归条件</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,middle+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;                         <span class=\"comment\">//基线条件（递归出口）</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>递归的应用有哪些呢？最经典的应用就是求斐波那契数列了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>)&#123;     <span class=\"comment\">// 基线条件（递归出口）</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(n-<span class=\"number\">1</span>) + f(n-<span class=\"number\">2</span>);    <span class=\"comment\">//递归条件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然斐波那契数列也可以用循环的方式来解决。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> f0 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> f1 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> f2 = <span class=\"number\">0</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n; i++)&#123;  </span><br><span class=\"line\">        f2 = f0 + f1;  </span><br><span class=\"line\">        f0 = f1;  </span><br><span class=\"line\">        f1 = f2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f2;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两种方法的作用相同，结过相同，但在程序运行的性能上有很大差距。<br>使用递归的方式来求解斐波那契数列的时间复杂度为O(2<sup>n</sup>)，而使用循环的方式的时间复杂度为O(n)。可见递归只是让解决方案变得更清晰，并没有性能上的优势。实际上，在一些情况下，使用循环的性能更好。</p>\n<p>当然，递归的应用并不只是斐波那契数列求和，二叉树的遍历，排序算法中的排序，都可以用递归来实现。</p>\n<p>递归是一种非常优雅的问题解决方法（在不考虑程序性能的前提下），递归将人分为截然不同的阵营：恨它的、爱它的以及恨了几年后又爱上它的。</p>\n<p>最后分享一句话，Leigh Caldwell在Stack Overflow上说：“如果使用循环，程序的性能可能更高；如果使用递归，程序可能更容易理解。如何选择要看什么对你来说更重要。”</p>\n"},{"title":"JS：我有特别的输出banana技巧","date":"2019-09-20T13:26:15.000Z","_content":"\n今天之前一个关系不错的同事发来一段很有意思的js代码，代码如下\n\n```JavaScript\n('b' + 'a' + + 'a' + 'a').toLowerCase()\n```\n\n这段代码的输出为`banana`。\n\n大家都知道js的一些语法和规则都比较怪异，这段代码也不例外，那为什么这段代码会输出这样的结果呢？\n这就与JavaScript运算符优先级相关了，我们先了解一下这段代码涉及到的运算符及其优先级，如下：\n\n优先级 | 运算类型 | 关联性 | 运算符\n:-: | :-: | :-: | :-: \n20 | 圆括号 | n/a | (...) \n16 | 一元正号 | 从右至左 | + ... \n13 | 加法 | 从左至右 | ... + ...\n\nOK，了解了上面的运算符优先级之后，我们来分析一下上面那段代码。\n\n首先`('b' + 'a' + + 'a' + 'a')` ，按照运算符优先级分解一下运算步骤，\n从上面优先级的表格我们可以看到圆括号的优先级最高，其次是一元正号（有人可能不太明白什么是一元正号，这里解释一下一元正号 `+` ，大家都知道一元负号 `-` ，比如说一个正数 `2` 前面加上一元负号运算符，就会变成负数 `-2` ，那么加上一元正号呢？变为 `+2` ，其实还是正数 `2`。一元正号，其实就是我们初中学正负数时候的正数前面省略的 `+` ）\n\n\n此段代码中运算优先级最低的就是加法运算，所以按照运算符优先级，代码可以转换成这个样子\n\n```JavaScript\n'b' + 'a' + (+ 'a') + 'a' //因为一元正号的优先级比加法高，所以用括号标注一下\n```\n\n那么就会先运算 `(+ 'a')`\n\n我们来看一下一元正号的说明：\n```\n一元正号运算符位于其操作数前面，计算其操作数的数值，如果操作数不是一个数值，会尝试将其转换成一个数值。 尽管一元负号也能转换非数值类型，但是一元正号是转换其他对象到数值的最快方法，也是最推荐的做法，因为它不会对数值执行任何多余操作。它可以将字符串转换成整数和浮点数形式，也可以转换非字符串值 true，false 和 null。小数和十六进制格式字符串也可以转换成数值。负数形式字符串也可以转换成数值（对于十六进制不适用）。如果它不能解析一个值，则计算结果为 NaN。\n```\n\n请注意看这段话：`如果操作数不是一个数值，会尝试将其转换成一个数值和如果它不能解析一个值，则计算结果为 NaN`\n\n那么`(+ 'a')`就会是变成 `NaN`，然后又涉及到了隐式转化，加号在JavaScript规则里有一条是，当操作符有一个是字符串类型时，另一个也要转成字符串类型。也就是说 `NaN` 要进行`toString`，然后原代码执行过程如下:\n\n```JavaScript\n'b' + 'a' + (+ 'a') + 'a'\n// to\n'b' + 'a' + Number('a') + 'a'\n// to\n'b' + 'a' + NaN + 'a'\n//to\n'b' + 'a' + 'NaN' + 'a'\n```\n\n最终再调用 `toLowerCase()` 将其转换为小写，就变成了 `banana`","source":"_posts/JS有特别的输出banana技巧.md","raw":"---\ntitle: JS：我有特别的输出banana技巧\ndate: 2019-09-20 21:26:15\ntags: [JavaScript,前端]\n---\n\n今天之前一个关系不错的同事发来一段很有意思的js代码，代码如下\n\n```JavaScript\n('b' + 'a' + + 'a' + 'a').toLowerCase()\n```\n\n这段代码的输出为`banana`。\n\n大家都知道js的一些语法和规则都比较怪异，这段代码也不例外，那为什么这段代码会输出这样的结果呢？\n这就与JavaScript运算符优先级相关了，我们先了解一下这段代码涉及到的运算符及其优先级，如下：\n\n优先级 | 运算类型 | 关联性 | 运算符\n:-: | :-: | :-: | :-: \n20 | 圆括号 | n/a | (...) \n16 | 一元正号 | 从右至左 | + ... \n13 | 加法 | 从左至右 | ... + ...\n\nOK，了解了上面的运算符优先级之后，我们来分析一下上面那段代码。\n\n首先`('b' + 'a' + + 'a' + 'a')` ，按照运算符优先级分解一下运算步骤，\n从上面优先级的表格我们可以看到圆括号的优先级最高，其次是一元正号（有人可能不太明白什么是一元正号，这里解释一下一元正号 `+` ，大家都知道一元负号 `-` ，比如说一个正数 `2` 前面加上一元负号运算符，就会变成负数 `-2` ，那么加上一元正号呢？变为 `+2` ，其实还是正数 `2`。一元正号，其实就是我们初中学正负数时候的正数前面省略的 `+` ）\n\n\n此段代码中运算优先级最低的就是加法运算，所以按照运算符优先级，代码可以转换成这个样子\n\n```JavaScript\n'b' + 'a' + (+ 'a') + 'a' //因为一元正号的优先级比加法高，所以用括号标注一下\n```\n\n那么就会先运算 `(+ 'a')`\n\n我们来看一下一元正号的说明：\n```\n一元正号运算符位于其操作数前面，计算其操作数的数值，如果操作数不是一个数值，会尝试将其转换成一个数值。 尽管一元负号也能转换非数值类型，但是一元正号是转换其他对象到数值的最快方法，也是最推荐的做法，因为它不会对数值执行任何多余操作。它可以将字符串转换成整数和浮点数形式，也可以转换非字符串值 true，false 和 null。小数和十六进制格式字符串也可以转换成数值。负数形式字符串也可以转换成数值（对于十六进制不适用）。如果它不能解析一个值，则计算结果为 NaN。\n```\n\n请注意看这段话：`如果操作数不是一个数值，会尝试将其转换成一个数值和如果它不能解析一个值，则计算结果为 NaN`\n\n那么`(+ 'a')`就会是变成 `NaN`，然后又涉及到了隐式转化，加号在JavaScript规则里有一条是，当操作符有一个是字符串类型时，另一个也要转成字符串类型。也就是说 `NaN` 要进行`toString`，然后原代码执行过程如下:\n\n```JavaScript\n'b' + 'a' + (+ 'a') + 'a'\n// to\n'b' + 'a' + Number('a') + 'a'\n// to\n'b' + 'a' + NaN + 'a'\n//to\n'b' + 'a' + 'NaN' + 'a'\n```\n\n最终再调用 `toLowerCase()` 将其转换为小写，就变成了 `banana`","slug":"JS有特别的输出banana技巧","published":1,"updated":"2019-09-20T14:03:00.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck28uvm4p000byzk34ip27d55","content":"<p>今天之前一个关系不错的同事发来一段很有意思的js代码，代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + + <span class=\"string\">'a'</span> + <span class=\"string\">'a'</span>).toLowerCase()</span><br></pre></td></tr></table></figure>\n\n<p>这段代码的输出为<code>banana</code>。</p>\n<p>大家都知道js的一些语法和规则都比较怪异，这段代码也不例外，那为什么这段代码会输出这样的结果呢？<br>这就与JavaScript运算符优先级相关了，我们先了解一下这段代码涉及到的运算符及其优先级，如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">优先级</th>\n<th align=\"center\">运算类型</th>\n<th align=\"center\">关联性</th>\n<th align=\"center\">运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">20</td>\n<td align=\"center\">圆括号</td>\n<td align=\"center\">n/a</td>\n<td align=\"center\">(…)</td>\n</tr>\n<tr>\n<td align=\"center\">16</td>\n<td align=\"center\">一元正号</td>\n<td align=\"center\">从右至左</td>\n<td align=\"center\">+ …</td>\n</tr>\n<tr>\n<td align=\"center\">13</td>\n<td align=\"center\">加法</td>\n<td align=\"center\">从左至右</td>\n<td align=\"center\">… + …</td>\n</tr>\n</tbody></table>\n<p>OK，了解了上面的运算符优先级之后，我们来分析一下上面那段代码。</p>\n<p>首先<code>(&#39;b&#39; + &#39;a&#39; + + &#39;a&#39; + &#39;a&#39;)</code> ，按照运算符优先级分解一下运算步骤，<br>从上面优先级的表格我们可以看到圆括号的优先级最高，其次是一元正号（有人可能不太明白什么是一元正号，这里解释一下一元正号 <code>+</code> ，大家都知道一元负号 <code>-</code> ，比如说一个正数 <code>2</code> 前面加上一元负号运算符，就会变成负数 <code>-2</code> ，那么加上一元正号呢？变为 <code>+2</code> ，其实还是正数 <code>2</code>。一元正号，其实就是我们初中学正负数时候的正数前面省略的 <code>+</code> ）</p>\n<p>此段代码中运算优先级最低的就是加法运算，所以按照运算符优先级，代码可以转换成这个样子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + (+ <span class=\"string\">'a'</span>) + <span class=\"string\">'a'</span> <span class=\"comment\">//因为一元正号的优先级比加法高，所以用括号标注一下</span></span><br></pre></td></tr></table></figure>\n\n<p>那么就会先运算 <code>(+ &#39;a&#39;)</code></p>\n<p>我们来看一下一元正号的说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一元正号运算符位于其操作数前面，计算其操作数的数值，如果操作数不是一个数值，会尝试将其转换成一个数值。 尽管一元负号也能转换非数值类型，但是一元正号是转换其他对象到数值的最快方法，也是最推荐的做法，因为它不会对数值执行任何多余操作。它可以将字符串转换成整数和浮点数形式，也可以转换非字符串值 true，false 和 null。小数和十六进制格式字符串也可以转换成数值。负数形式字符串也可以转换成数值（对于十六进制不适用）。如果它不能解析一个值，则计算结果为 NaN。</span><br></pre></td></tr></table></figure>\n\n<p>请注意看这段话：<code>如果操作数不是一个数值，会尝试将其转换成一个数值和如果它不能解析一个值，则计算结果为 NaN</code></p>\n<p>那么<code>(+ &#39;a&#39;)</code>就会是变成 <code>NaN</code>，然后又涉及到了隐式转化，加号在JavaScript规则里有一条是，当操作符有一个是字符串类型时，另一个也要转成字符串类型。也就是说 <code>NaN</code> 要进行<code>toString</code>，然后原代码执行过程如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + (+ <span class=\"string\">'a'</span>) + <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"comment\">// to</span></span><br><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + <span class=\"built_in\">Number</span>(<span class=\"string\">'a'</span>) + <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"comment\">// to</span></span><br><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + <span class=\"literal\">NaN</span> + <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"comment\">//to</span></span><br><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + <span class=\"string\">'NaN'</span> + <span class=\"string\">'a'</span></span><br></pre></td></tr></table></figure>\n\n<p>最终再调用 <code>toLowerCase()</code> 将其转换为小写，就变成了 <code>banana</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天之前一个关系不错的同事发来一段很有意思的js代码，代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + + <span class=\"string\">'a'</span> + <span class=\"string\">'a'</span>).toLowerCase()</span><br></pre></td></tr></table></figure>\n\n<p>这段代码的输出为<code>banana</code>。</p>\n<p>大家都知道js的一些语法和规则都比较怪异，这段代码也不例外，那为什么这段代码会输出这样的结果呢？<br>这就与JavaScript运算符优先级相关了，我们先了解一下这段代码涉及到的运算符及其优先级，如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">优先级</th>\n<th align=\"center\">运算类型</th>\n<th align=\"center\">关联性</th>\n<th align=\"center\">运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">20</td>\n<td align=\"center\">圆括号</td>\n<td align=\"center\">n/a</td>\n<td align=\"center\">(…)</td>\n</tr>\n<tr>\n<td align=\"center\">16</td>\n<td align=\"center\">一元正号</td>\n<td align=\"center\">从右至左</td>\n<td align=\"center\">+ …</td>\n</tr>\n<tr>\n<td align=\"center\">13</td>\n<td align=\"center\">加法</td>\n<td align=\"center\">从左至右</td>\n<td align=\"center\">… + …</td>\n</tr>\n</tbody></table>\n<p>OK，了解了上面的运算符优先级之后，我们来分析一下上面那段代码。</p>\n<p>首先<code>(&#39;b&#39; + &#39;a&#39; + + &#39;a&#39; + &#39;a&#39;)</code> ，按照运算符优先级分解一下运算步骤，<br>从上面优先级的表格我们可以看到圆括号的优先级最高，其次是一元正号（有人可能不太明白什么是一元正号，这里解释一下一元正号 <code>+</code> ，大家都知道一元负号 <code>-</code> ，比如说一个正数 <code>2</code> 前面加上一元负号运算符，就会变成负数 <code>-2</code> ，那么加上一元正号呢？变为 <code>+2</code> ，其实还是正数 <code>2</code>。一元正号，其实就是我们初中学正负数时候的正数前面省略的 <code>+</code> ）</p>\n<p>此段代码中运算优先级最低的就是加法运算，所以按照运算符优先级，代码可以转换成这个样子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + (+ <span class=\"string\">'a'</span>) + <span class=\"string\">'a'</span> <span class=\"comment\">//因为一元正号的优先级比加法高，所以用括号标注一下</span></span><br></pre></td></tr></table></figure>\n\n<p>那么就会先运算 <code>(+ &#39;a&#39;)</code></p>\n<p>我们来看一下一元正号的说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一元正号运算符位于其操作数前面，计算其操作数的数值，如果操作数不是一个数值，会尝试将其转换成一个数值。 尽管一元负号也能转换非数值类型，但是一元正号是转换其他对象到数值的最快方法，也是最推荐的做法，因为它不会对数值执行任何多余操作。它可以将字符串转换成整数和浮点数形式，也可以转换非字符串值 true，false 和 null。小数和十六进制格式字符串也可以转换成数值。负数形式字符串也可以转换成数值（对于十六进制不适用）。如果它不能解析一个值，则计算结果为 NaN。</span><br></pre></td></tr></table></figure>\n\n<p>请注意看这段话：<code>如果操作数不是一个数值，会尝试将其转换成一个数值和如果它不能解析一个值，则计算结果为 NaN</code></p>\n<p>那么<code>(+ &#39;a&#39;)</code>就会是变成 <code>NaN</code>，然后又涉及到了隐式转化，加号在JavaScript规则里有一条是，当操作符有一个是字符串类型时，另一个也要转成字符串类型。也就是说 <code>NaN</code> 要进行<code>toString</code>，然后原代码执行过程如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + (+ <span class=\"string\">'a'</span>) + <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"comment\">// to</span></span><br><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + <span class=\"built_in\">Number</span>(<span class=\"string\">'a'</span>) + <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"comment\">// to</span></span><br><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + <span class=\"literal\">NaN</span> + <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"comment\">//to</span></span><br><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + <span class=\"string\">'NaN'</span> + <span class=\"string\">'a'</span></span><br></pre></td></tr></table></figure>\n\n<p>最终再调用 <code>toLowerCase()</code> 将其转换为小写，就变成了 <code>banana</code></p>\n"},{"title":"求一个整数转换为二进制之后其中1的个数","date":"2019-10-09T11:20:01.000Z","_content":"\n今天面试摩拜单车遇到一道算法题，题目如下：\n\n给定一个正整数范围(m,n)，返回一个数组，该数组是每个正整数转换为相应二进制之后包含1的个数\n\n> 示例\n\n```\n给定 (1,5) ， \n1的二进制位1，二进制表示中包含位1的个数位1，\n2的二进制位10，二进制表示中包含位1的个数位1，\n3的二进制为11，二进制表示中包含位1的个数位2，\n4的二进制位100，二进制表示中包含位1的个数位1，\n5的二进制位101，二进制表示中包含位1的个数位2，\n所以返回数组 [1，1，2，1，2]\n```\n\n这道题有点像LeetCode上`位1的个数`这道题目。\n\n那么怎么解决呢？\n\n最简单的方法就是，求出每一个数二进制中位1的个数，拼成一个数组，那么如何求出正整数中二进制位1的个数呢？\n\n重点就是求每个数的位1的个数。\n\n这里就要用到位运算了。大家初中高中或者大学学计算机基础的时候应该都学过基础位运算，也就是`与`，`或`，`非`的运算。(还有一些比较复杂的，例如`异或`，`与非`等组合位运算)\n\n代码如下：\n\n```Java\npublic static int NumberOfOne(int n){\n    int count = 0;\n    while (n != 0) {\n        count++;\n        n &= (n - 1);\n    }\n    return count;\n}\n```\n\n我们不断把数字最后一个 `1` 反转，并把答案加一。当数字变成 `0` 的时候偶，我们就知道它没有 `1` 的位了，此时返回答案。\n\n这里关键的想法是对于任意数字 `n` ，将 `n` 和 `n-1`做与运算，会把最后一个 `1` 的位变成 `0` 。为什么？考虑 `n` 和 `n−1` 的二进制表示。\n\n我们来详细解读一下 `n & (n - 1)`\n1. 假设`n=5`,`n & (n - 1)`就是`5&4`，转换为二进制就是 `101&100=100`\n2. 假设`n=4`,`n & (n - 1)`就是`4&3`，转换为二进制就是 `100&011=000`\n\n可以看到，每一次`n&(n-1)`的操作就会把n中的位1减少一位，为什么呢？因为二进制，无论数字是多少，在二进制运算中，只要做了-1的操作，就会改变最后一位的值，1变为0或者0变为1.\n\n1变为0就是上面`1`的情况，\n0变为1就是上面`2`的情况。\n\n可以发现，由于每次`- 1`操作都会带了位的变化，所以每次`n&n-1`,都会把二进制中`最后的一位1`消除掉，比如`101&100=100`，消除了`101`最后的1变为`100`，`100&011=000`，消除了`100`最后的`1`，也是惟一的1变为`000`。所以，当我们不断把`n&=n-1`，直到`n=0`的时候，n中的位1就被完全消除了，这个操作做了几次，也就代表n转换为二进制，其中位1的个数有几个。\n\n看到这里，这道题最重要的问题就解决了，剩下的工作就是写个for循环将每位数的结果封装成一个数组就行了，for循环很简单，这里就不再赘述了。\n\n","source":"_posts/求一个整数转换为二进制之后其中1的个数.md","raw":"---\ntitle: 求一个整数转换为二进制之后其中1的个数\ndate: 2019-10-09 19:20:01\ntags: [算法,LeetCode]\n---\n\n今天面试摩拜单车遇到一道算法题，题目如下：\n\n给定一个正整数范围(m,n)，返回一个数组，该数组是每个正整数转换为相应二进制之后包含1的个数\n\n> 示例\n\n```\n给定 (1,5) ， \n1的二进制位1，二进制表示中包含位1的个数位1，\n2的二进制位10，二进制表示中包含位1的个数位1，\n3的二进制为11，二进制表示中包含位1的个数位2，\n4的二进制位100，二进制表示中包含位1的个数位1，\n5的二进制位101，二进制表示中包含位1的个数位2，\n所以返回数组 [1，1，2，1，2]\n```\n\n这道题有点像LeetCode上`位1的个数`这道题目。\n\n那么怎么解决呢？\n\n最简单的方法就是，求出每一个数二进制中位1的个数，拼成一个数组，那么如何求出正整数中二进制位1的个数呢？\n\n重点就是求每个数的位1的个数。\n\n这里就要用到位运算了。大家初中高中或者大学学计算机基础的时候应该都学过基础位运算，也就是`与`，`或`，`非`的运算。(还有一些比较复杂的，例如`异或`，`与非`等组合位运算)\n\n代码如下：\n\n```Java\npublic static int NumberOfOne(int n){\n    int count = 0;\n    while (n != 0) {\n        count++;\n        n &= (n - 1);\n    }\n    return count;\n}\n```\n\n我们不断把数字最后一个 `1` 反转，并把答案加一。当数字变成 `0` 的时候偶，我们就知道它没有 `1` 的位了，此时返回答案。\n\n这里关键的想法是对于任意数字 `n` ，将 `n` 和 `n-1`做与运算，会把最后一个 `1` 的位变成 `0` 。为什么？考虑 `n` 和 `n−1` 的二进制表示。\n\n我们来详细解读一下 `n & (n - 1)`\n1. 假设`n=5`,`n & (n - 1)`就是`5&4`，转换为二进制就是 `101&100=100`\n2. 假设`n=4`,`n & (n - 1)`就是`4&3`，转换为二进制就是 `100&011=000`\n\n可以看到，每一次`n&(n-1)`的操作就会把n中的位1减少一位，为什么呢？因为二进制，无论数字是多少，在二进制运算中，只要做了-1的操作，就会改变最后一位的值，1变为0或者0变为1.\n\n1变为0就是上面`1`的情况，\n0变为1就是上面`2`的情况。\n\n可以发现，由于每次`- 1`操作都会带了位的变化，所以每次`n&n-1`,都会把二进制中`最后的一位1`消除掉，比如`101&100=100`，消除了`101`最后的1变为`100`，`100&011=000`，消除了`100`最后的`1`，也是惟一的1变为`000`。所以，当我们不断把`n&=n-1`，直到`n=0`的时候，n中的位1就被完全消除了，这个操作做了几次，也就代表n转换为二进制，其中位1的个数有几个。\n\n看到这里，这道题最重要的问题就解决了，剩下的工作就是写个for循环将每位数的结果封装成一个数组就行了，for循环很简单，这里就不再赘述了。\n\n","slug":"求一个整数转换为二进制之后其中1的个数","published":1,"updated":"2019-10-09T12:38:10.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck28uvm4r000eyzk3qcx5jqdw","content":"<p>今天面试摩拜单车遇到一道算法题，题目如下：</p>\n<p>给定一个正整数范围(m,n)，返回一个数组，该数组是每个正整数转换为相应二进制之后包含1的个数</p>\n<blockquote>\n<p>示例</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 (1,5) ， </span><br><span class=\"line\">1的二进制位1，二进制表示中包含位1的个数位1，</span><br><span class=\"line\">2的二进制位10，二进制表示中包含位1的个数位1，</span><br><span class=\"line\">3的二进制为11，二进制表示中包含位1的个数位2，</span><br><span class=\"line\">4的二进制位100，二进制表示中包含位1的个数位1，</span><br><span class=\"line\">5的二进制位101，二进制表示中包含位1的个数位2，</span><br><span class=\"line\">所以返回数组 [1，1，2，1，2]</span><br></pre></td></tr></table></figure>\n\n<p>这道题有点像LeetCode上<code>位1的个数</code>这道题目。</p>\n<p>那么怎么解决呢？</p>\n<p>最简单的方法就是，求出每一个数二进制中位1的个数，拼成一个数组，那么如何求出正整数中二进制位1的个数呢？</p>\n<p>重点就是求每个数的位1的个数。</p>\n<p>这里就要用到位运算了。大家初中高中或者大学学计算机基础的时候应该都学过基础位运算，也就是<code>与</code>，<code>或</code>，<code>非</code>的运算。(还有一些比较复杂的，例如<code>异或</code>，<code>与非</code>等组合位运算)</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOfOne</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        n &amp;= (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们不断把数字最后一个 <code>1</code> 反转，并把答案加一。当数字变成 <code>0</code> 的时候偶，我们就知道它没有 <code>1</code> 的位了，此时返回答案。</p>\n<p>这里关键的想法是对于任意数字 <code>n</code> ，将 <code>n</code> 和 <code>n-1</code>做与运算，会把最后一个 <code>1</code> 的位变成 <code>0</code> 。为什么？考虑 <code>n</code> 和 <code>n−1</code> 的二进制表示。</p>\n<p>我们来详细解读一下 <code>n &amp; (n - 1)</code></p>\n<ol>\n<li>假设<code>n=5</code>,<code>n &amp; (n - 1)</code>就是<code>5&amp;4</code>，转换为二进制就是 <code>101&amp;100=100</code></li>\n<li>假设<code>n=4</code>,<code>n &amp; (n - 1)</code>就是<code>4&amp;3</code>，转换为二进制就是 <code>100&amp;011=000</code></li>\n</ol>\n<p>可以看到，每一次<code>n&amp;(n-1)</code>的操作就会把n中的位1减少一位，为什么呢？因为二进制，无论数字是多少，在二进制运算中，只要做了-1的操作，就会改变最后一位的值，1变为0或者0变为1.</p>\n<p>1变为0就是上面<code>1</code>的情况，<br>0变为1就是上面<code>2</code>的情况。</p>\n<p>可以发现，由于每次<code>- 1</code>操作都会带了位的变化，所以每次<code>n&amp;n-1</code>,都会把二进制中<code>最后的一位1</code>消除掉，比如<code>101&amp;100=100</code>，消除了<code>101</code>最后的1变为<code>100</code>，<code>100&amp;011=000</code>，消除了<code>100</code>最后的<code>1</code>，也是惟一的1变为<code>000</code>。所以，当我们不断把<code>n&amp;=n-1</code>，直到<code>n=0</code>的时候，n中的位1就被完全消除了，这个操作做了几次，也就代表n转换为二进制，其中位1的个数有几个。</p>\n<p>看到这里，这道题最重要的问题就解决了，剩下的工作就是写个for循环将每位数的结果封装成一个数组就行了，for循环很简单，这里就不再赘述了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天面试摩拜单车遇到一道算法题，题目如下：</p>\n<p>给定一个正整数范围(m,n)，返回一个数组，该数组是每个正整数转换为相应二进制之后包含1的个数</p>\n<blockquote>\n<p>示例</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 (1,5) ， </span><br><span class=\"line\">1的二进制位1，二进制表示中包含位1的个数位1，</span><br><span class=\"line\">2的二进制位10，二进制表示中包含位1的个数位1，</span><br><span class=\"line\">3的二进制为11，二进制表示中包含位1的个数位2，</span><br><span class=\"line\">4的二进制位100，二进制表示中包含位1的个数位1，</span><br><span class=\"line\">5的二进制位101，二进制表示中包含位1的个数位2，</span><br><span class=\"line\">所以返回数组 [1，1，2，1，2]</span><br></pre></td></tr></table></figure>\n\n<p>这道题有点像LeetCode上<code>位1的个数</code>这道题目。</p>\n<p>那么怎么解决呢？</p>\n<p>最简单的方法就是，求出每一个数二进制中位1的个数，拼成一个数组，那么如何求出正整数中二进制位1的个数呢？</p>\n<p>重点就是求每个数的位1的个数。</p>\n<p>这里就要用到位运算了。大家初中高中或者大学学计算机基础的时候应该都学过基础位运算，也就是<code>与</code>，<code>或</code>，<code>非</code>的运算。(还有一些比较复杂的，例如<code>异或</code>，<code>与非</code>等组合位运算)</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOfOne</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        n &amp;= (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们不断把数字最后一个 <code>1</code> 反转，并把答案加一。当数字变成 <code>0</code> 的时候偶，我们就知道它没有 <code>1</code> 的位了，此时返回答案。</p>\n<p>这里关键的想法是对于任意数字 <code>n</code> ，将 <code>n</code> 和 <code>n-1</code>做与运算，会把最后一个 <code>1</code> 的位变成 <code>0</code> 。为什么？考虑 <code>n</code> 和 <code>n−1</code> 的二进制表示。</p>\n<p>我们来详细解读一下 <code>n &amp; (n - 1)</code></p>\n<ol>\n<li>假设<code>n=5</code>,<code>n &amp; (n - 1)</code>就是<code>5&amp;4</code>，转换为二进制就是 <code>101&amp;100=100</code></li>\n<li>假设<code>n=4</code>,<code>n &amp; (n - 1)</code>就是<code>4&amp;3</code>，转换为二进制就是 <code>100&amp;011=000</code></li>\n</ol>\n<p>可以看到，每一次<code>n&amp;(n-1)</code>的操作就会把n中的位1减少一位，为什么呢？因为二进制，无论数字是多少，在二进制运算中，只要做了-1的操作，就会改变最后一位的值，1变为0或者0变为1.</p>\n<p>1变为0就是上面<code>1</code>的情况，<br>0变为1就是上面<code>2</code>的情况。</p>\n<p>可以发现，由于每次<code>- 1</code>操作都会带了位的变化，所以每次<code>n&amp;n-1</code>,都会把二进制中<code>最后的一位1</code>消除掉，比如<code>101&amp;100=100</code>，消除了<code>101</code>最后的1变为<code>100</code>，<code>100&amp;011=000</code>，消除了<code>100</code>最后的<code>1</code>，也是惟一的1变为<code>000</code>。所以，当我们不断把<code>n&amp;=n-1</code>，直到<code>n=0</code>的时候，n中的位1就被完全消除了，这个操作做了几次，也就代表n转换为二进制，其中位1的个数有几个。</p>\n<p>看到这里，这道题最重要的问题就解决了，剩下的工作就是写个for循环将每位数的结果封装成一个数组就行了，for循环很简单，这里就不再赘述了。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck28uvm4l0006yzk3812b4hqs","tag_id":"ck28uvm4i0004yzk3xmtsc5zq","_id":"ck28uvm4n0009yzk3ae2r5gfa"},{"post_id":"ck28uvm4n000ayzk3rf4v6by0","tag_id":"ck28uvm4i0004yzk3xmtsc5zq","_id":"ck28uvm4r000dyzk37r1gu4ra"},{"post_id":"ck28uvm4r000eyzk3qcx5jqdw","tag_id":"ck28uvm4i0004yzk3xmtsc5zq","_id":"ck28uvm4t000gyzk3updcsbku"},{"post_id":"ck28uvm4r000eyzk3qcx5jqdw","tag_id":"ck28uvm4n0008yzk3hhrpiw1w","_id":"ck28uvm4t000hyzk3lrzrczl3"},{"post_id":"ck28uvm4b0000yzk3dw4r8b78","tag_id":"ck28uvm4i0004yzk3xmtsc5zq","_id":"ck28uvm4t000iyzk37ah08m92"},{"post_id":"ck28uvm4b0000yzk3dw4r8b78","tag_id":"ck28uvm4n0008yzk3hhrpiw1w","_id":"ck28uvm4t000kyzk3m7l3u9lv"},{"post_id":"ck28uvm4b0000yzk3dw4r8b78","tag_id":"ck28uvm4q000cyzk3qjxg7fnq","_id":"ck28uvm4t000lyzk3skvdvsbw"},{"post_id":"ck28uvm4g0002yzk30oplr3k8","tag_id":"ck28uvm4s000fyzk3c2usgci8","_id":"ck28uvm4u000nyzk3frufuq1c"},{"post_id":"ck28uvm4g0002yzk30oplr3k8","tag_id":"ck28uvm4t000jyzk34a2d1ozt","_id":"ck28uvm4u000oyzk3bqjd8yuv"},{"post_id":"ck28uvm4k0005yzk3zyj670w1","tag_id":"ck28uvm4t000myzk3ffm0h9er","_id":"ck28uvm4w000qyzk3vmlpzhev"},{"post_id":"ck28uvm4m0007yzk367w9bqu3","tag_id":"ck28uvm4i0004yzk3xmtsc5zq","_id":"ck28uvm4y000tyzk3nvtg2t6k"},{"post_id":"ck28uvm4m0007yzk367w9bqu3","tag_id":"ck28uvm4n0008yzk3hhrpiw1w","_id":"ck28uvm4y000uyzk3jnnuhy2x"},{"post_id":"ck28uvm4m0007yzk367w9bqu3","tag_id":"ck28uvm4q000cyzk3qjxg7fnq","_id":"ck28uvm4y000wyzk3oij6yffm"},{"post_id":"ck28uvm4p000byzk34ip27d55","tag_id":"ck28uvm4x000syzk3evegg6m1","_id":"ck28uvm4y000xyzk34s54vd39"},{"post_id":"ck28uvm4p000byzk34ip27d55","tag_id":"ck28uvm4y000vyzk36fq30aq4","_id":"ck28uvm4y000yyzk3je7tmk5o"}],"Tag":[{"name":"算法","_id":"ck28uvm4i0004yzk3xmtsc5zq"},{"name":"LeetCode","_id":"ck28uvm4n0008yzk3hhrpiw1w"},{"name":"面试题","_id":"ck28uvm4q000cyzk3qjxg7fnq"},{"name":"Redis","_id":"ck28uvm4s000fyzk3c2usgci8"},{"name":"数据结构","_id":"ck28uvm4t000jyzk34a2d1ozt"},{"name":"Java基础","_id":"ck28uvm4t000myzk3ffm0h9er"},{"name":"JavaScript","_id":"ck28uvm4x000syzk3evegg6m1"},{"name":"前端","_id":"ck28uvm4y000vyzk36fq30aq4"}]}}