{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/pic_doc/c_string_s1&s2_buf_overflow.jpeg","path":"pic_doc/c_string_s1&s2_buf_overflow.jpeg","modified":0,"renderable":0},{"_id":"source/pic_doc/c_string_s1&s2.jpeg","path":"pic_doc/c_string_s1&s2.jpeg","modified":0,"renderable":0},{"_id":"source/pic_doc/redis_c_string.jpeg","path":"pic_doc/redis_c_string.jpeg","modified":0,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":0,"renderable":0},{"_id":"source/pic_doc/java_mem_model.jpg","path":"pic_doc/java_mem_model.jpg","modified":0,"renderable":0},{"_id":"source/pic_doc/sds_after_sdscat.jpeg","path":"pic_doc/sds_after_sdscat.jpeg","modified":0,"renderable":0},{"_id":"source/pic_doc/redis_sds.jpeg","path":"pic_doc/redis_sds.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/pic_doc/pu_mem_model.jpg","path":"pic_doc/pu_mem_model.jpg","modified":0,"renderable":0},{"_id":"source/pic_doc/cpu_mem_model.jpg.png","path":"pic_doc/cpu_mem_model.jpg.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1589505793586},{"_id":"source/.DS_Store","hash":"9d37caa48f380feddfb5c563378bee578a543500","modified":1589506216341},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1589505793589},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1589505793589},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1589505793589},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1589505793590},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1589505793590},{"_id":"themes/next/_config.yml","hash":"a9199f69cdccf11afa4e437bc7ed295544b97f48","modified":1589506471070},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1589505793591},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1589505793596},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1589505793621},{"_id":"source/_posts/.DS_Store","hash":"15c49ae50f752919380d5d0d8cccf1da39872df3","modified":1572172940082},{"_id":"source/_posts/JS有特别的输出banana技巧.md","hash":"29965ba6e52e3f0e76634ae18d26abd2acdb721c","modified":1568988180121},{"_id":"source/_posts/Java中的instanceof关键字.md","hash":"0c39234530c09d760f0b8ac7ec78dfa25ca6a74f","modified":1567932581638},{"_id":"source/_posts/Java并发编程（一）之并发编程基础知识.md","hash":"fd3076ec4148e47edc6c905c28485fb674da6754","modified":1573653895446},{"_id":"source/_posts/Java并发编程（七）之各种锁.md","hash":"cd94aa079c8fab3fdac6d0b7ad0dbd93e39f8e3d","modified":1587521195302},{"_id":"source/_posts/Java并发编程（三）之线程池的使用.md","hash":"3c56a16df89452a7e8789b2ac0c1607cb9185b5d","modified":1574594411963},{"_id":"source/_posts/Java并发编程（九）之指令重排序.md","hash":"c24cc042e1afee272a12cbb48a809782a5e8873b","modified":1588149370936},{"_id":"source/_posts/Java并发编程（二）之线程的创建.md","hash":"26eac1561af1010d1c52d6001d26e042b17ddbb2","modified":1573982666097},{"_id":"source/_posts/Java并发编程（五）之线程安全问题-volatitle关键字.md","hash":"61bd37229114fc88253ed825541bf68b4076385c","modified":1589524458174},{"_id":"source/_posts/Java并发编程（八）之CAS操作.md","hash":"837ca7932af4fc1ef25633938da6b9f4b6802d5b","modified":1587715108410},{"_id":"source/_posts/Java并发编程（六）之synchronized与volatile关键字.md","hash":"f7262e6fe107724a44482d2e65fff5b9d0da7e7c","modified":1587367669422},{"_id":"source/_posts/LeetCode-有序数组中的单一元素.md","hash":"eb2deb8de2404f89d511374e03d36a9e470a3974","modified":1571577564281},{"_id":"source/_posts/Java并发编程（四）之线程安全问题.md","hash":"857f934b949b7c325e64accf698196fd3e148fc4","modified":1574692138231},{"_id":"source/_posts/LeetCode第一题.md","hash":"d0bafd7eddb424017ca050d99457de744905e8cc","modified":1571572246825},{"_id":"source/_posts/MySQL优化（一）之简单介绍.md","hash":"7b0b16ca9f722cc2a91f805ddfb44e272e2c1c8f","modified":1573989984300},{"_id":"source/_posts/Redis中的数据结构之简单动态字符串.md","hash":"f8ffa5614bfdd3bc9d74b8429e53c01ff7e0c349","modified":1572172980680},{"_id":"source/_posts/Redis中的数据结构之简单动态字符串（二）.md","hash":"82e26dbba3adaba7ecb0facae93a025461d7e256","modified":1573219905969},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1589505793586},{"_id":"themes/next/.DS_Store","hash":"e1d4892307ec87dcce92f3bf4dc88ea0f31e7e73","modified":1589506224311},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1589505793586},{"_id":"source/_posts/二分查找及其Java代码实现.md","hash":"4d882b2852ee3e2f3954bbc1af3dcf8d6be7fd66","modified":1567932544082},{"_id":"source/_posts/递归算法及应用.md","hash":"2b2cc7db9c982302c711943ac41cdb8202266bb9","modified":1567932518426},{"_id":"source/_posts/求一个整数转换为二进制之后其中1的个数.md","hash":"53a37af18b0f2dd9c089748babc1e34c02c73860","modified":1570624690285},{"_id":"source/categories/index.md","hash":"a9cbb30618588a395f631ccb18f6a3c206e93ed4","modified":1567433544726},{"_id":"source/pic_doc/c_string_s1&s2_buf_overflow.jpeg","hash":"d63575425147cd855e129859881a1d12cf1cd6de","modified":1573216667000},{"_id":"source/pic_doc/c_string_s1&s2.jpeg","hash":"021d4fc21efcdf18e302f63740b7bde070f68823","modified":1573215993000},{"_id":"source/pic_doc/redis_c_string.jpeg","hash":"dbfcda975fe79e62ca870aa0480b3c3f11798bc9","modified":1572171051000},{"_id":"source/tags/index.md","hash":"9076dd6826a60327f5d754742c0b57d424889310","modified":1567433544727},{"_id":"source/uploads/.DS_Store","hash":"3bf8756085aa53cb18a164a5f3e5ccd3f034650f","modified":1571834818476},{"_id":"source/uploads/wechat-qcode.jpg","hash":"cb3e1dae0fbf71813c810b2b8300e77f5da93d02","modified":1570454143319},{"_id":"source/pic_doc/.DS_Store","hash":"1e9701873f192690decf16d1cd72438d006d0d72","modified":1589530934453},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1589505793586},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1589505793588},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1589505793587},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1589505793588},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1589505793588},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1589505793588},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1589505793588},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1589505793589},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1589505793589},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1589505793588},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1589505793591},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1589505793588},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1589505793591},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1589505793592},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1589505793592},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1589505793592},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1589505793592},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1589505793592},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1589505793593},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1589505793593},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1589505793596},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1589505793596},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1589505793596},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1589505793597},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1589505793597},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1589505793596},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1589505793596},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1589505793597},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1589505793598},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1589505793598},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1589505793596},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1589505793598},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1589505793598},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1589505793597},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1589505793597},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1589505793599},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1589505793598},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1589505793600},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1589505793601},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1589505793601},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1589505793625},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1589505793599},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1589505793600},{"_id":"themes/next/source/.DS_Store","hash":"99705752aaffbb9b70921e663cc99b21306d8517","modified":1589506224314},{"_id":"source/pic_doc/java_mem_model.jpg","hash":"33744ce1b1f55a39dace6703662bf1cc3403a581","modified":1574598317709},{"_id":"source/pic_doc/cpu_mem_model.jpg","hash":"33744ce1b1f55a39dace6703662bf1cc3403a581","modified":1574598828655},{"_id":"source/_posts/pic_doc/redis_c_string.jpeg","hash":"dbfcda975fe79e62ca870aa0480b3c3f11798bc9","modified":1572171051000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1589505793602},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1589505793620},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1589505793620},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1589505793620},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1589505793621},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1589505793621},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1589505793621},{"_id":"source/pic_doc/sds_after_sdscat.jpeg","hash":"cb9adbc649f62d5cb9205cd2c1a1d4843e207d5c","modified":1573219034000},{"_id":"source/pic_doc/redis_sds.jpeg","hash":"09cef7fa1d2cd467c0ecb5d2133132a4e6d97d33","modified":1572169721000},{"_id":"source/_posts/pic_doc/.DS_Store","hash":"b9ec2c17b56454a53169b7641014b5423ebd78cf","modified":1572172929908},{"_id":"source/_posts/.vscode/settings.json","hash":"cba83b9b595e86ab3cdfe9876a210eac2534d03e","modified":1587722634961},{"_id":"source/_posts/pic_doc/redis_sds.jpeg","hash":"09cef7fa1d2cd467c0ecb5d2133132a4e6d97d33","modified":1572169721000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1589505793587},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1589505793587},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1589505793587},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1589505793587},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1589505793593},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1589505793593},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1589505793593},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1589505793593},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1589505793594},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1589505793594},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1589505793594},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1589505793594},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1589505793595},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1589505793595},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1589505793595},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1589505793595},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1589505793595},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1589505793624},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1589505793624},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1589505793624},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1589505793624},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1589505793624},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1589505793624},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1589505793625},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1589505793625},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1589505793625},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1589505793625},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1589505793625},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1589505793625},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1589505793626},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1589505793626},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1589505793626},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1589505793626},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1589505793626},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1589505793627},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1589505793630},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1589505793631},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1589505793658},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1589505793670},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1589505793671},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1589505793672},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1589505793673},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1589505793672},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1589505793672},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1589505793673},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1589505793674},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1589505793674},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1589505793674},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1589505793675},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1589505793673},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1589505793676},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1589505793679},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1589505793675},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1589505793676},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1589505793677},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1589505793677},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1589505793677},{"_id":"themes/next/source/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1589505793678},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1589505793621},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1589505793671},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1589505793604},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1589505793603},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1589505793603},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1589505793605},{"_id":"themes/next/layout/_partials/footer.swig","hash":"700c3e7bd449bce51f6faee42c052e13ed5f8b3e","modified":1589505793605},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1589505793610},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1589505793609},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1589505793613},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1589505793614},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1589505793613},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1589505793613},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1589505793614},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1589505793615},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1589505793616},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1589505793617},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1589505793618},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1589505793618},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1589505793622},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1589505793622},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1589505793622},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1589505793622},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1589505793622},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1589505793622},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1589505793623},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1589505793623},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1589505793623},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1589505793623},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1589505793623},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1589505793668},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1589505793668},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1589505793668},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1589505793669},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1589505793670},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1589505793683},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1589505793678},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1589505793606},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1589505793678},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1589505793608},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1589505793606},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1589505793608},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1589505793608},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1589505793610},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1589505793610},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1589505793609},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1589505793611},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1589505793611},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1589505793611},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1589505793612},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1589505793612},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1589505793612},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1589505793613},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1589505793612},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1589505793613},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1589505793614},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1589505793612},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1589505793614},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1589505793615},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1589505793614},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1589505793614},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1589505793616},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1589505793615},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1589505793616},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1589505793615},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1589505793617},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1589505793616},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1589505793616},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1589505793616},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1589505793617},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1589505793617},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1589505793617},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1589505793617},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1589505793618},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1589505793618},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1589505793618},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1589505793619},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1589505793618},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1589505793619},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1589505793618},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1589505793620},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1589505793620},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1589505793619},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1589505793620},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1589505793619},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1589505793683},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1589505793607},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1589505793632},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1589505793632},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1589505793643},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1589505793650},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1589505793650},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1589505793651},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1589505793654},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1589505793654},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1589505793654},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1589505793655},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1589505793658},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1589505793646},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1589505793647},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1589505793659},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1589505793659},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1589505793659},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1589505793660},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1589505793660},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1589505793661},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1589505793661},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1589505793662},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1589505793663},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1589505793665},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1589505793665},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1589505793666},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1589505793666},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1589505793666},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1589505793667},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1589505793667},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1589505793667},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1589505793667},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1589505793680},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1589505793632},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1589505793681},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1589505793680},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1589505793682},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1589505793643},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1589505793643},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1589505793643},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1589505793644},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1589505793644},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1589505793632},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1589505793633},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1589505793638},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1589505793638},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1589505793638},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1589505793639},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1589505793640},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1589505793640},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1589505793639},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1589505793641},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1589505793641},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1589505793642},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1589505793642},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1589505793642},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1589505793641},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1589505793651},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1589505793642},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1589505793651},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1589505793652},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1589505793652},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1589505793655},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1589505793655},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1589505793656},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1589505793656},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1589505793657},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1589505793657},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1589505793657},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1589505793644},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1589505793645},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1589505793645},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1589505793645},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1589505793645},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1589505793646},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1589505793646},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1589505793646},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1589505793647},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1589505793647},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1589505793648},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1589505793648},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1589505793649},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1589505793649},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1589505793649},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1589505793649},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1589505793650},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1589505793650},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1589505793639},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1589505793641},{"_id":"public/tags/index.html","hash":"b66a35b7ab0c39b873796087e4e9e374f73177a6","modified":1590407803973},{"_id":"public/categories/index.html","hash":"30c4d7970a4d45ed5ebb91f51bda864ced620c38","modified":1590407803973},{"_id":"public/tags/Java基础/index.html","hash":"3e77e033ce81fd713238b6fceaadb5928c2c1ce1","modified":1590407803973},{"_id":"public/tags/JavaScript/index.html","hash":"1de117517e49a06a9123c486231ce79b2e5ebb56","modified":1590407803973},{"_id":"public/tags/前端/index.html","hash":"28864cbf4d9faceedfe580765c83af6383a606fd","modified":1590407803973},{"_id":"public/tags/多线程/index.html","hash":"d109d4345f66f042e196ecc77e1e5dc304ce1294","modified":1590407803973},{"_id":"public/tags/并发/index.html","hash":"74d85c5fa78f8599bc294a344d3666492fbf1351","modified":1590407803973},{"_id":"public/tags/Java/index.html","hash":"d6fd9f3d78803f2b55dc26f683fc07038ac69637","modified":1590407803973},{"_id":"public/tags/算法/index.html","hash":"ae3f69fbe528a2f2716b3efdf1e3b5ceaa9647eb","modified":1590407803973},{"_id":"public/tags/LeetCode/index.html","hash":"067286e7bcfd95af6d20399c1a7bbcce56815b90","modified":1590407803973},{"_id":"public/tags/面试题/index.html","hash":"7cc9c5973e9c8d974f15b642a1c244d59d75ef35","modified":1590407803973},{"_id":"public/tags/MySQL/index.html","hash":"8c16ca9b0f84882ccfbc91bf14533a637a16e800","modified":1590407803973},{"_id":"public/tags/SQL优化/index.html","hash":"9f41fb8a34a06edad4f45ac06f5c246c5ad9c369","modified":1590407803973},{"_id":"public/tags/Redis/index.html","hash":"9afe657aaf6d4db2d57e7b8cb79e167411bb8738","modified":1590407803973},{"_id":"public/tags/数据结构/index.html","hash":"95d22021b72d5331c9a0f30f83673597ee63efe7","modified":1590407803973},{"_id":"public/archives/page/2/index.html","hash":"9fd067929a1e8e701240cdb41965bc668fe20f4e","modified":1590407803973},{"_id":"public/archives/2019/page/2/index.html","hash":"eae0827891d3fa1c8e8a7c20a64b66fa384a17ef","modified":1590407803973},{"_id":"public/archives/2019/08/index.html","hash":"4fec227f2aa0b2ab05eb299b3222f6bce196bc6d","modified":1590407803973},{"_id":"public/archives/2019/09/index.html","hash":"50024e015f99c0d6c893a2593d9500295b6cdce3","modified":1590407803973},{"_id":"public/archives/2019/10/index.html","hash":"2c6014082719298f836a471d8f8c2e43adeb8a6c","modified":1590407803973},{"_id":"public/archives/2019/11/index.html","hash":"aeaf21d8899a8c45fe2658eac8bff1f1af4339ae","modified":1590407803973},{"_id":"public/archives/2019/12/index.html","hash":"c2ce28ad7a383d4b05d0a57cab16b4773b640211","modified":1590407803973},{"_id":"public/archives/2020/index.html","hash":"c6f8ebf7d226af8f2214a20f79a8270262c3b5bd","modified":1590407803973},{"_id":"public/archives/2020/04/index.html","hash":"3afd744e0a6bcd7dd316c5fb086d7283b4715489","modified":1590407803973},{"_id":"public/2020/04/28/Java并发编程（九）之指令重排序/index.html","hash":"80ea7ddcb8cba9e53be511cfe22b7d242888810d","modified":1590407803973},{"_id":"public/2020/04/22/Java并发编程（八）之CAS操作/index.html","hash":"9383bb40bbc8aba1d4718c32d8fb891ea89d4eec","modified":1590407803973},{"_id":"public/2020/04/20/Java并发编程（六）之synchronized与volatile关键字/index.html","hash":"502e2d970ce759066227085116f1ad8672d72ad8","modified":1590407803973},{"_id":"public/2020/04/20/Java并发编程（七）之各种锁/index.html","hash":"2e3a80ba5e086fad374edf85ac3db592dbca285f","modified":1590407803973},{"_id":"public/2019/12/14/Java并发编程（五）之线程安全问题-volatitle关键字/index.html","hash":"2771cc1a5e05acb2e09c49c70057353d310614b0","modified":1590407803973},{"_id":"public/2019/11/24/Java并发编程（四）之线程安全问题/index.html","hash":"0088ef7af1e1010c29fb918b076baf88e5e3306c","modified":1590407803973},{"_id":"public/2019/11/24/Java并发编程（三）之线程池的使用/index.html","hash":"44c4362171cabf1b94229ed45e26832ae8e6f555","modified":1590407803973},{"_id":"public/2019/11/17/MySQL优化（一）之简单介绍/index.html","hash":"c505e5fd5d13ccd177479713855b2559ed05ddc2","modified":1590407803973},{"_id":"public/2019/11/17/Java并发编程（二）之线程的创建/index.html","hash":"9b3838a43915c7661539a871898799ddbf1cfe8e","modified":1590407803973},{"_id":"public/2019/11/13/Java并发编程（一）之并发编程基础知识/index.html","hash":"5e0c2b0f270439d03d26f1e26b0a1438d910c1f1","modified":1590407803973},{"_id":"public/2019/11/08/Redis中的数据结构之简单动态字符串（二）/index.html","hash":"010507ac5598d91077dee600a1f7efd1d59a760e","modified":1590407803973},{"_id":"public/2019/10/23/Redis中的数据结构之简单动态字符串/index.html","hash":"19f68d77e7634b71c1651226042fd0c3cd7ebf87","modified":1590407803973},{"_id":"public/2019/10/20/LeetCode-有序数组中的单一元素/index.html","hash":"496bf9f60acff05bcf10679059cb573e65484e2f","modified":1590407803973},{"_id":"public/2019/10/09/求一个整数转换为二进制之后其中1的个数/index.html","hash":"2918136f6303727ac8a04e8254fc0aba1c804093","modified":1590407803973},{"_id":"public/2019/10/01/LeetCode第一题/index.html","hash":"6541207959212aebc53e40343164e392e6254235","modified":1590407803973},{"_id":"public/2019/09/20/JS有特别的输出banana技巧/index.html","hash":"1e41fd90d33926d42491c3e61d4e320db5af1d8b","modified":1590407803973},{"_id":"public/2019/09/08/递归算法及应用/index.html","hash":"76b31c6155dac46d2493a346a7c6f0f89779220f","modified":1590407803973},{"_id":"public/2019/08/31/二分查找及其Java代码实现/index.html","hash":"ff9ca9415d970eb69b8e14cf770850f23dc1683e","modified":1590407803973},{"_id":"public/2019/08/27/Java中的instanceof关键字/index.html","hash":"473f3aeb4afd6d4be6c269f4ef989b59a38b1699","modified":1590407803973},{"_id":"public/index.html","hash":"510178b1fac8af04d132b8bc23b99c0b5755afa6","modified":1590407803973},{"_id":"public/page/2/index.html","hash":"71cd408d41cc3218ebed056510b33abb9cdd1415","modified":1590407803973},{"_id":"public/archives/index.html","hash":"aefce8fd31f4d39f0128d9cfb762cf9f7a0055ce","modified":1590407803973},{"_id":"public/archives/2019/index.html","hash":"e10a97deb04e4481a705cbd14ed08a405e38eabe","modified":1590407803973},{"_id":"public/pic_doc/redis_c_string.jpeg","hash":"dbfcda975fe79e62ca870aa0480b3c3f11798bc9","modified":1589506619487},{"_id":"public/uploads/wechat-qcode.jpg","hash":"cb3e1dae0fbf71813c810b2b8300e77f5da93d02","modified":1589506619487},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1589506619487},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1589506619487},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1589506619487},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1589506619487},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1589506619487},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1589506619487},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1589506619487},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1589506619487},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1589506619487},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1589506619487},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1589506619487},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1589506619487},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1589506619487},{"_id":"public/pic_doc/c_string_s1&s2.jpeg","hash":"021d4fc21efcdf18e302f63740b7bde070f68823","modified":1589506619487},{"_id":"public/pic_doc/c_string_s1&s2_buf_overflow.jpeg","hash":"d63575425147cd855e129859881a1d12cf1cd6de","modified":1589506619487},{"_id":"public/pic_doc/java_mem_model.jpg","hash":"33744ce1b1f55a39dace6703662bf1cc3403a581","modified":1589506619487},{"_id":"public/pic_doc/cpu_mem_model.jpg","hash":"33744ce1b1f55a39dace6703662bf1cc3403a581","modified":1589506619487},{"_id":"public/pic_doc/sds_after_sdscat.jpeg","hash":"cb9adbc649f62d5cb9205cd2c1a1d4843e207d5c","modified":1589506619487},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1589506619487},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1589506619487},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1589506619487},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1589506619487},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1589506619487},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1589506619487},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1589506619487},{"_id":"public/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1589506619487},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1589506619487},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1589506619487},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1589506619487},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1589506619487},{"_id":"public/css/main.css","hash":"2996247a8742ae56df46faf4b27cec81cc527129","modified":1589506619487},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1589506619487},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1589506619487},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1589506619487},{"_id":"public/pic_doc/redis_sds.jpeg","hash":"09cef7fa1d2cd467c0ecb5d2133132a4e6d97d33","modified":1589506619487},{"_id":"source/_posts/Java代理模式.md","hash":"894af06a74fce826dd587e0ffef1aa09431ba180","modified":1589526656311},{"_id":"public/tags/设计模式/index.html","hash":"5471dc9b2bfaaf6cdfe1633bf3442a710a95583a","modified":1590407803973},{"_id":"public/tags/jdk动态代理/index.html","hash":"a76771edcc58e386de9c22f1ef931918d0df4d3c","modified":1590407803973},{"_id":"public/tags/cglib/index.html","hash":"7098452c53519fca407dfb9fa063651db9c5699e","modified":1590407803973},{"_id":"public/archives/2020/05/index.html","hash":"277cdd6a01f6655d792e2713d51ee3fe757347d0","modified":1590407803973},{"_id":"public/2020/05/15/Java代理模式/index.html","hash":"47780da94a783187843cfcf16a245ba1c23efe6d","modified":1590407803973},{"_id":"source/_posts/Java如何快速读取大文件.md","hash":"87694e6b33aa133dedb2213f20cc898b2de4d6b2","modified":1589942027916},{"_id":"source/pic_doc/pu_mem_model.jpg","hash":"33744ce1b1f55a39dace6703662bf1cc3403a581","modified":1574598828655},{"_id":"source/pic_doc/cpu_mem_model.jpg.png","hash":"f8f28f17c735d08b36edc53d07940cfb360b07f3","modified":1589524185063},{"_id":"public/tags/大文件/index.html","hash":"7ee480c5db5924c1625db29151a67130297aaa27","modified":1590407803973},{"_id":"public/tags/NIO/index.html","hash":"7f9256b718e3f523c2e8fc33baaf5888df5fa75b","modified":1590407803973},{"_id":"public/archives/page/3/index.html","hash":"1f7dca6e9a97d131b9f0c7db64972c23cb8132a7","modified":1590407803973},{"_id":"public/page/3/index.html","hash":"cea8ffce1a1ea08ec855cbe67b6d61adf376bfcf","modified":1590407803973},{"_id":"public/2020/05/20/Java如何快速读取大文件/index.html","hash":"9d3363d82d24a2c4a554372efc71edfb5fa6370f","modified":1590407803973},{"_id":"public/pic_doc/pu_mem_model.jpg","hash":"33744ce1b1f55a39dace6703662bf1cc3403a581","modified":1589942036359},{"_id":"public/pic_doc/cpu_mem_model.jpg.png","hash":"f8f28f17c735d08b36edc53d07940cfb360b07f3","modified":1589942036359},{"_id":"source/_posts/动态规划简述.md","hash":"72e0860a0ea60d1f126f26e85a351dbea4096bbc","modified":1590407797604},{"_id":"public/2020/05/25/动态规划简述/index.html","hash":"10891b081ed7043228557c88a87933a200f5bca1","modified":1590407803973}],"Category":[],"Data":[],"Page":[{"title":"分类","date":"2019-08-27T08:18:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-08-27 16:18:45\ntype: \"categories\"\n---\n","updated":"2019-09-02T14:12:24.726Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cka7j79fp002s07k321be6myg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-08-27T08:13:24.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-08-27 16:13:24\ntype: \"tags\"\n---\n","updated":"2019-09-02T14:12:24.727Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cka7j79fu002u07k3b28ag17l","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Java中的instanceof关键字","date":"2019-08-27T07:56:57.000Z","_content":"\n\ninstanceof是Java的一个二元操作符，和==，>，<是同一类。由于它是由字母组成的，所以也是Java的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回boolean类型的数据（true，false）\n\n接下来让我们实际体验一下此关键字的作用\n\n首先我们定义一个类Obj1（为了简单，我们就不在类中定义任何属性与方法了）\n```java\nclass Obj1{\n\n}\n```\n然后来测试一下instanceof\n\n```java\nObj1 obj1 = new Obj1()\nSystem.out.println(obj1 instanceof Obj1);\n```\n输出结果为 `true`\n\n若类存在继承关系呢？，我们来试一下\n\n首先，定义Obj2，并使其继承Obj1\n\n```java\nclass Obj2 extends Obj1{\n\n}\n```\n然后，测试一下instanceof\n```java\nObj2 obj2 = new Obj2();\nSystem.out.println(obj2 instanceof Obj1);\n\n```\n\n输出结果为 `true`\n可以看到，由于Obj2继承了Obj1，所以obj2也是Obj1的实例\n\n那反过来呢？\n\n```java\nObj1 obj1 = new Obj1();\nSystem.out.println(obj1 instanceof Obj2);\n```\n可以看到输出结果为 `false`\n\n\n若是某一个类有接口的继承关系，与上面类的继承关系也一样，大家可以自己试一试。\n","source":"_posts/Java中的instanceof关键字.md","raw":"---\ntitle: Java中的instanceof关键字\ndate: 2019-08-27 15:56:57\ntags: [Java基础]\n---\n\n\ninstanceof是Java的一个二元操作符，和==，>，<是同一类。由于它是由字母组成的，所以也是Java的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回boolean类型的数据（true，false）\n\n接下来让我们实际体验一下此关键字的作用\n\n首先我们定义一个类Obj1（为了简单，我们就不在类中定义任何属性与方法了）\n```java\nclass Obj1{\n\n}\n```\n然后来测试一下instanceof\n\n```java\nObj1 obj1 = new Obj1()\nSystem.out.println(obj1 instanceof Obj1);\n```\n输出结果为 `true`\n\n若类存在继承关系呢？，我们来试一下\n\n首先，定义Obj2，并使其继承Obj1\n\n```java\nclass Obj2 extends Obj1{\n\n}\n```\n然后，测试一下instanceof\n```java\nObj2 obj2 = new Obj2();\nSystem.out.println(obj2 instanceof Obj1);\n\n```\n\n输出结果为 `true`\n可以看到，由于Obj2继承了Obj1，所以obj2也是Obj1的实例\n\n那反过来呢？\n\n```java\nObj1 obj1 = new Obj1();\nSystem.out.println(obj1 instanceof Obj2);\n```\n可以看到输出结果为 `false`\n\n\n若是某一个类有接口的继承关系，与上面类的继承关系也一样，大家可以自己试一试。\n","slug":"Java中的instanceof关键字","published":1,"updated":"2019-09-08T08:49:41.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79bu000007k379cg817d","content":"<p>instanceof是Java的一个二元操作符，和==，&gt;，&lt;是同一类。由于它是由字母组成的，所以也是Java的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回boolean类型的数据（true，false）</p>\n<p>接下来让我们实际体验一下此关键字的作用</p>\n<p>首先我们定义一个类Obj1（为了简单，我们就不在类中定义任何属性与方法了）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj1</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后来测试一下instanceof</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj1 obj1 = <span class=\"keyword\">new</span> Obj1()</span><br><span class=\"line\">System.out.println(obj1 <span class=\"keyword\">instanceof</span> Obj1);</span><br></pre></td></tr></table></figure>\n<p>输出结果为 <code>true</code></p>\n<p>若类存在继承关系呢？，我们来试一下</p>\n<p>首先，定义Obj2，并使其继承Obj1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Obj1</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，测试一下instanceof</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj2 obj2 = <span class=\"keyword\">new</span> Obj2();</span><br><span class=\"line\">System.out.println(obj2 <span class=\"keyword\">instanceof</span> Obj1);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为 <code>true</code><br>可以看到，由于Obj2继承了Obj1，所以obj2也是Obj1的实例</p>\n<p>那反过来呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj1 obj1 = <span class=\"keyword\">new</span> Obj1();</span><br><span class=\"line\">System.out.println(obj1 <span class=\"keyword\">instanceof</span> Obj2);</span><br></pre></td></tr></table></figure>\n<p>可以看到输出结果为 <code>false</code></p>\n<p>若是某一个类有接口的继承关系，与上面类的继承关系也一样，大家可以自己试一试。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>instanceof是Java的一个二元操作符，和==，&gt;，&lt;是同一类。由于它是由字母组成的，所以也是Java的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回boolean类型的数据（true，false）</p>\n<p>接下来让我们实际体验一下此关键字的作用</p>\n<p>首先我们定义一个类Obj1（为了简单，我们就不在类中定义任何属性与方法了）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj1</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后来测试一下instanceof</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj1 obj1 = <span class=\"keyword\">new</span> Obj1()</span><br><span class=\"line\">System.out.println(obj1 <span class=\"keyword\">instanceof</span> Obj1);</span><br></pre></td></tr></table></figure>\n<p>输出结果为 <code>true</code></p>\n<p>若类存在继承关系呢？，我们来试一下</p>\n<p>首先，定义Obj2，并使其继承Obj1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Obj1</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，测试一下instanceof</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj2 obj2 = <span class=\"keyword\">new</span> Obj2();</span><br><span class=\"line\">System.out.println(obj2 <span class=\"keyword\">instanceof</span> Obj1);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为 <code>true</code><br>可以看到，由于Obj2继承了Obj1，所以obj2也是Obj1的实例</p>\n<p>那反过来呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj1 obj1 = <span class=\"keyword\">new</span> Obj1();</span><br><span class=\"line\">System.out.println(obj1 <span class=\"keyword\">instanceof</span> Obj2);</span><br></pre></td></tr></table></figure>\n<p>可以看到输出结果为 <code>false</code></p>\n<p>若是某一个类有接口的继承关系，与上面类的继承关系也一样，大家可以自己试一试。</p>\n"},{"title":"JS：我有特别的输出banana技巧","date":"2019-09-20T13:26:15.000Z","_content":"\n今天之前一个关系不错的同事发来一段很有意思的js代码，代码如下\n\n```JavaScript\n('b' + 'a' + + 'a' + 'a').toLowerCase()\n```\n\n这段代码的输出为`banana`。\n\n大家都知道js的一些语法和规则都比较怪异，这段代码也不例外，那为什么这段代码会输出这样的结果呢？\n这就与JavaScript运算符优先级相关了，我们先了解一下这段代码涉及到的运算符及其优先级，如下：\n\n优先级 | 运算类型 | 关联性 | 运算符\n:-: | :-: | :-: | :-: \n20 | 圆括号 | n/a | (...) \n16 | 一元正号 | 从右至左 | + ... \n13 | 加法 | 从左至右 | ... + ...\n\nOK，了解了上面的运算符优先级之后，我们来分析一下上面那段代码。\n\n首先`('b' + 'a' + + 'a' + 'a')` ，按照运算符优先级分解一下运算步骤，\n从上面优先级的表格我们可以看到圆括号的优先级最高，其次是一元正号（有人可能不太明白什么是一元正号，这里解释一下一元正号 `+` ，大家都知道一元负号 `-` ，比如说一个正数 `2` 前面加上一元负号运算符，就会变成负数 `-2` ，那么加上一元正号呢？变为 `+2` ，其实还是正数 `2`。一元正号，其实就是我们初中学正负数时候的正数前面省略的 `+` ）\n\n\n此段代码中运算优先级最低的就是加法运算，所以按照运算符优先级，代码可以转换成这个样子\n\n```JavaScript\n'b' + 'a' + (+ 'a') + 'a' //因为一元正号的优先级比加法高，所以用括号标注一下\n```\n\n那么就会先运算 `(+ 'a')`\n\n我们来看一下一元正号的说明：\n```\n一元正号运算符位于其操作数前面，计算其操作数的数值，如果操作数不是一个数值，会尝试将其转换成一个数值。 尽管一元负号也能转换非数值类型，但是一元正号是转换其他对象到数值的最快方法，也是最推荐的做法，因为它不会对数值执行任何多余操作。它可以将字符串转换成整数和浮点数形式，也可以转换非字符串值 true，false 和 null。小数和十六进制格式字符串也可以转换成数值。负数形式字符串也可以转换成数值（对于十六进制不适用）。如果它不能解析一个值，则计算结果为 NaN。\n```\n\n请注意看这段话：`如果操作数不是一个数值，会尝试将其转换成一个数值和如果它不能解析一个值，则计算结果为 NaN`\n\n那么`(+ 'a')`就会是变成 `NaN`，然后又涉及到了隐式转化，加号在JavaScript规则里有一条是，当操作符有一个是字符串类型时，另一个也要转成字符串类型。也就是说 `NaN` 要进行`toString`，然后原代码执行过程如下:\n\n```JavaScript\n'b' + 'a' + (+ 'a') + 'a'\n// to\n'b' + 'a' + Number('a') + 'a'\n// to\n'b' + 'a' + NaN + 'a'\n//to\n'b' + 'a' + 'NaN' + 'a'\n```\n\n最终再调用 `toLowerCase()` 将其转换为小写，就变成了 `banana`","source":"_posts/JS有特别的输出banana技巧.md","raw":"---\ntitle: JS：我有特别的输出banana技巧\ndate: 2019-09-20 21:26:15\ntags: [JavaScript,前端]\n---\n\n今天之前一个关系不错的同事发来一段很有意思的js代码，代码如下\n\n```JavaScript\n('b' + 'a' + + 'a' + 'a').toLowerCase()\n```\n\n这段代码的输出为`banana`。\n\n大家都知道js的一些语法和规则都比较怪异，这段代码也不例外，那为什么这段代码会输出这样的结果呢？\n这就与JavaScript运算符优先级相关了，我们先了解一下这段代码涉及到的运算符及其优先级，如下：\n\n优先级 | 运算类型 | 关联性 | 运算符\n:-: | :-: | :-: | :-: \n20 | 圆括号 | n/a | (...) \n16 | 一元正号 | 从右至左 | + ... \n13 | 加法 | 从左至右 | ... + ...\n\nOK，了解了上面的运算符优先级之后，我们来分析一下上面那段代码。\n\n首先`('b' + 'a' + + 'a' + 'a')` ，按照运算符优先级分解一下运算步骤，\n从上面优先级的表格我们可以看到圆括号的优先级最高，其次是一元正号（有人可能不太明白什么是一元正号，这里解释一下一元正号 `+` ，大家都知道一元负号 `-` ，比如说一个正数 `2` 前面加上一元负号运算符，就会变成负数 `-2` ，那么加上一元正号呢？变为 `+2` ，其实还是正数 `2`。一元正号，其实就是我们初中学正负数时候的正数前面省略的 `+` ）\n\n\n此段代码中运算优先级最低的就是加法运算，所以按照运算符优先级，代码可以转换成这个样子\n\n```JavaScript\n'b' + 'a' + (+ 'a') + 'a' //因为一元正号的优先级比加法高，所以用括号标注一下\n```\n\n那么就会先运算 `(+ 'a')`\n\n我们来看一下一元正号的说明：\n```\n一元正号运算符位于其操作数前面，计算其操作数的数值，如果操作数不是一个数值，会尝试将其转换成一个数值。 尽管一元负号也能转换非数值类型，但是一元正号是转换其他对象到数值的最快方法，也是最推荐的做法，因为它不会对数值执行任何多余操作。它可以将字符串转换成整数和浮点数形式，也可以转换非字符串值 true，false 和 null。小数和十六进制格式字符串也可以转换成数值。负数形式字符串也可以转换成数值（对于十六进制不适用）。如果它不能解析一个值，则计算结果为 NaN。\n```\n\n请注意看这段话：`如果操作数不是一个数值，会尝试将其转换成一个数值和如果它不能解析一个值，则计算结果为 NaN`\n\n那么`(+ 'a')`就会是变成 `NaN`，然后又涉及到了隐式转化，加号在JavaScript规则里有一条是，当操作符有一个是字符串类型时，另一个也要转成字符串类型。也就是说 `NaN` 要进行`toString`，然后原代码执行过程如下:\n\n```JavaScript\n'b' + 'a' + (+ 'a') + 'a'\n// to\n'b' + 'a' + Number('a') + 'a'\n// to\n'b' + 'a' + NaN + 'a'\n//to\n'b' + 'a' + 'NaN' + 'a'\n```\n\n最终再调用 `toLowerCase()` 将其转换为小写，就变成了 `banana`","slug":"JS有特别的输出banana技巧","published":1,"updated":"2019-09-20T14:03:00.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79d2000107k38ekd5hsm","content":"<p>今天之前一个关系不错的同事发来一段很有意思的js代码，代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + + <span class=\"string\">'a'</span> + <span class=\"string\">'a'</span>).toLowerCase()</span><br></pre></td></tr></table></figure>\n\n<p>这段代码的输出为<code>banana</code>。</p>\n<p>大家都知道js的一些语法和规则都比较怪异，这段代码也不例外，那为什么这段代码会输出这样的结果呢？<br>这就与JavaScript运算符优先级相关了，我们先了解一下这段代码涉及到的运算符及其优先级，如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">优先级</th>\n<th align=\"center\">运算类型</th>\n<th align=\"center\">关联性</th>\n<th align=\"center\">运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">20</td>\n<td align=\"center\">圆括号</td>\n<td align=\"center\">n/a</td>\n<td align=\"center\">(…)</td>\n</tr>\n<tr>\n<td align=\"center\">16</td>\n<td align=\"center\">一元正号</td>\n<td align=\"center\">从右至左</td>\n<td align=\"center\">+ …</td>\n</tr>\n<tr>\n<td align=\"center\">13</td>\n<td align=\"center\">加法</td>\n<td align=\"center\">从左至右</td>\n<td align=\"center\">… + …</td>\n</tr>\n</tbody></table>\n<p>OK，了解了上面的运算符优先级之后，我们来分析一下上面那段代码。</p>\n<p>首先<code>(&#39;b&#39; + &#39;a&#39; + + &#39;a&#39; + &#39;a&#39;)</code> ，按照运算符优先级分解一下运算步骤，<br>从上面优先级的表格我们可以看到圆括号的优先级最高，其次是一元正号（有人可能不太明白什么是一元正号，这里解释一下一元正号 <code>+</code> ，大家都知道一元负号 <code>-</code> ，比如说一个正数 <code>2</code> 前面加上一元负号运算符，就会变成负数 <code>-2</code> ，那么加上一元正号呢？变为 <code>+2</code> ，其实还是正数 <code>2</code>。一元正号，其实就是我们初中学正负数时候的正数前面省略的 <code>+</code> ）</p>\n<p>此段代码中运算优先级最低的就是加法运算，所以按照运算符优先级，代码可以转换成这个样子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + (+ <span class=\"string\">'a'</span>) + <span class=\"string\">'a'</span> <span class=\"comment\">//因为一元正号的优先级比加法高，所以用括号标注一下</span></span><br></pre></td></tr></table></figure>\n\n<p>那么就会先运算 <code>(+ &#39;a&#39;)</code></p>\n<p>我们来看一下一元正号的说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一元正号运算符位于其操作数前面，计算其操作数的数值，如果操作数不是一个数值，会尝试将其转换成一个数值。 尽管一元负号也能转换非数值类型，但是一元正号是转换其他对象到数值的最快方法，也是最推荐的做法，因为它不会对数值执行任何多余操作。它可以将字符串转换成整数和浮点数形式，也可以转换非字符串值 true，false 和 null。小数和十六进制格式字符串也可以转换成数值。负数形式字符串也可以转换成数值（对于十六进制不适用）。如果它不能解析一个值，则计算结果为 NaN。</span><br></pre></td></tr></table></figure>\n\n<p>请注意看这段话：<code>如果操作数不是一个数值，会尝试将其转换成一个数值和如果它不能解析一个值，则计算结果为 NaN</code></p>\n<p>那么<code>(+ &#39;a&#39;)</code>就会是变成 <code>NaN</code>，然后又涉及到了隐式转化，加号在JavaScript规则里有一条是，当操作符有一个是字符串类型时，另一个也要转成字符串类型。也就是说 <code>NaN</code> 要进行<code>toString</code>，然后原代码执行过程如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + (+ <span class=\"string\">'a'</span>) + <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"comment\">// to</span></span><br><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + <span class=\"built_in\">Number</span>(<span class=\"string\">'a'</span>) + <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"comment\">// to</span></span><br><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + <span class=\"literal\">NaN</span> + <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"comment\">//to</span></span><br><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + <span class=\"string\">'NaN'</span> + <span class=\"string\">'a'</span></span><br></pre></td></tr></table></figure>\n\n<p>最终再调用 <code>toLowerCase()</code> 将其转换为小写，就变成了 <code>banana</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天之前一个关系不错的同事发来一段很有意思的js代码，代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + + <span class=\"string\">'a'</span> + <span class=\"string\">'a'</span>).toLowerCase()</span><br></pre></td></tr></table></figure>\n\n<p>这段代码的输出为<code>banana</code>。</p>\n<p>大家都知道js的一些语法和规则都比较怪异，这段代码也不例外，那为什么这段代码会输出这样的结果呢？<br>这就与JavaScript运算符优先级相关了，我们先了解一下这段代码涉及到的运算符及其优先级，如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">优先级</th>\n<th align=\"center\">运算类型</th>\n<th align=\"center\">关联性</th>\n<th align=\"center\">运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">20</td>\n<td align=\"center\">圆括号</td>\n<td align=\"center\">n/a</td>\n<td align=\"center\">(…)</td>\n</tr>\n<tr>\n<td align=\"center\">16</td>\n<td align=\"center\">一元正号</td>\n<td align=\"center\">从右至左</td>\n<td align=\"center\">+ …</td>\n</tr>\n<tr>\n<td align=\"center\">13</td>\n<td align=\"center\">加法</td>\n<td align=\"center\">从左至右</td>\n<td align=\"center\">… + …</td>\n</tr>\n</tbody></table>\n<p>OK，了解了上面的运算符优先级之后，我们来分析一下上面那段代码。</p>\n<p>首先<code>(&#39;b&#39; + &#39;a&#39; + + &#39;a&#39; + &#39;a&#39;)</code> ，按照运算符优先级分解一下运算步骤，<br>从上面优先级的表格我们可以看到圆括号的优先级最高，其次是一元正号（有人可能不太明白什么是一元正号，这里解释一下一元正号 <code>+</code> ，大家都知道一元负号 <code>-</code> ，比如说一个正数 <code>2</code> 前面加上一元负号运算符，就会变成负数 <code>-2</code> ，那么加上一元正号呢？变为 <code>+2</code> ，其实还是正数 <code>2</code>。一元正号，其实就是我们初中学正负数时候的正数前面省略的 <code>+</code> ）</p>\n<p>此段代码中运算优先级最低的就是加法运算，所以按照运算符优先级，代码可以转换成这个样子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + (+ <span class=\"string\">'a'</span>) + <span class=\"string\">'a'</span> <span class=\"comment\">//因为一元正号的优先级比加法高，所以用括号标注一下</span></span><br></pre></td></tr></table></figure>\n\n<p>那么就会先运算 <code>(+ &#39;a&#39;)</code></p>\n<p>我们来看一下一元正号的说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一元正号运算符位于其操作数前面，计算其操作数的数值，如果操作数不是一个数值，会尝试将其转换成一个数值。 尽管一元负号也能转换非数值类型，但是一元正号是转换其他对象到数值的最快方法，也是最推荐的做法，因为它不会对数值执行任何多余操作。它可以将字符串转换成整数和浮点数形式，也可以转换非字符串值 true，false 和 null。小数和十六进制格式字符串也可以转换成数值。负数形式字符串也可以转换成数值（对于十六进制不适用）。如果它不能解析一个值，则计算结果为 NaN。</span><br></pre></td></tr></table></figure>\n\n<p>请注意看这段话：<code>如果操作数不是一个数值，会尝试将其转换成一个数值和如果它不能解析一个值，则计算结果为 NaN</code></p>\n<p>那么<code>(+ &#39;a&#39;)</code>就会是变成 <code>NaN</code>，然后又涉及到了隐式转化，加号在JavaScript规则里有一条是，当操作符有一个是字符串类型时，另一个也要转成字符串类型。也就是说 <code>NaN</code> 要进行<code>toString</code>，然后原代码执行过程如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + (+ <span class=\"string\">'a'</span>) + <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"comment\">// to</span></span><br><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + <span class=\"built_in\">Number</span>(<span class=\"string\">'a'</span>) + <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"comment\">// to</span></span><br><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + <span class=\"literal\">NaN</span> + <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"comment\">//to</span></span><br><span class=\"line\"><span class=\"string\">'b'</span> + <span class=\"string\">'a'</span> + <span class=\"string\">'NaN'</span> + <span class=\"string\">'a'</span></span><br></pre></td></tr></table></figure>\n\n<p>最终再调用 <code>toLowerCase()</code> 将其转换为小写，就变成了 <code>banana</code></p>\n"},{"title":"Java并发编程（一）之并发编程基础知识","date":"2019-11-13T13:02:52.000Z","_content":"\n并发编程是每一个软件工程师（不要再叫自己程序员了，我们是软件工程师）都需要学习的知识，对于一个优秀的软件工程师来说，掌握好并发编程是一门必修课。所以，为了成为一名优秀的软件工程师，我在半年多以前就开始学习并发编程的知识，但是因为后来工作的原因，这个学习计划就被搁置了，今天再次回顾以前学习的知识，发现大部分都被我忘记了，因为工作中用到并发编程的知识实在是少。做Java后端开发的同学也应该深有体会，大部分工作只是业务逻辑的curd，一些同行也戏称自己是“curd boy”。今天再次拾起并发编程的知识，也在此做个笔记，分享一下，有理解的不正确的还请大家指正，共同学习，也为自己加深一遍印象，让自己忘得慢一些，也方便以后复习的时候再去慢慢翻书，直接看笔记就好，会省下很多时间。\n\n要学习并发编程，首先我们要了解，什么是并发编程？\n\n提起并发编程很多人会混乱并发与并行两个概念，所以首先要澄清并发与并行的概念与区别。\n\n```\n并发是指同一个时间段内多个任务同时都在执行，而并行是说在单位时间内多个任务同时执行。\n```\n\n看起来很迷惑对不对，什么叫同一个时间段，什么叫单位时间？通俗的来说，一个时间段有多个单位时间累积而成，并发就是多个任务在这个时间段内执行，但不一定在同一个单位时间执行。而并行则是多个任务在同一个单位时间同时执行。\n\n举个例子：\n\n就拿人吃饭来说，一般大家吃饭的时候都会有再配一碗汤，我们可以把吃饭看做两个任务，一个是吃馒头，一个是喝汤，吃一口馒头是一个单位时间，喝一口汤也是一个单位时间，吃饭花费的时间就是一个时间段，而我们的嘴，是用来执行吃饭任务的，也就是一个CPU。一般我们吃饭的时候都是吃两口馒头，喝一口汤，在单个CPU的情况下（也就是我们只有一个嘴的情况下），吃馒头和喝汤是交替执行的，不可能在吃馒头的同时再喝一口汤，这就是并发，两个任务吃馒头喝汤，在同一个时间段内执行，但不一定是同一个单位时间执行。那么什么是并行呢，假设有人长了两张嘴，在吃饭的时候，一张嘴吃馒头的同时，另一张嘴喝汤，在同一个单位时间，执行两个或者多个任务，这就是并行。\n\n在单CPU时代，多个任务是共享一个CPU的，当一个任务占用CPU时，其他任务就会被挂起不能执行，当占用CPU的任务时间片用完后，才会把CPU让给其他任务使用，也就是，当我们吃馒头的时候，嘴正在被占用着，喝汤这个任务就没法占用我们的嘴，只有当咬下这一口馒头，才会把嘴的使用权交给喝汤这个任务。\n\n在单CPU时代，多线程编程是没有太大意义的，因为CPU只有一个，每个线程都只能交替使用这一个CPU，这样会导致线程间频繁的上下文切换，这也会带来额外的开销。就好比我们吃饭的时候，咬一口馒头咽下去，再伸手拿汤递到嘴边喝一口，再咬一口馒头咽下去，再把汤递到嘴边喝一口，这样的方式显然没有我们一开始就只吃馒头，吃完馒头，再端起汤来一口一口喝掉来的省时间。\n\n如果为双CPU配置，线程A和线程B各自在自己的cpu上执行任务，那就真正的实现了并行运行。但在多线程编程实践中，线程的个数往往多余CPU的个数，所以一般都称多线程并发编程而不多线程并行编程。\n\n到如今，连个人电脑都不止单个CPU了，一般的服务器的CPU个数几乎都能达到几十个，这打破了单个CPU对多线程编程效能的限制，多个CPU意味着每个线程都可以使用自己的CPU运行，这减少了线程上下文切换的开销，但随着对应用系统性能和吞吐量要求的提高，出现了处理海量数据和请求的要求，这些都对高并发编程有着迫切的需求。\n\n","source":"_posts/Java并发编程（一）之并发编程基础知识.md","raw":"---\ntitle: Java并发编程（一）之并发编程基础知识\ndate: 2019-11-13 21:02:52\ntags: [多线程,并发,Java]\n---\n\n并发编程是每一个软件工程师（不要再叫自己程序员了，我们是软件工程师）都需要学习的知识，对于一个优秀的软件工程师来说，掌握好并发编程是一门必修课。所以，为了成为一名优秀的软件工程师，我在半年多以前就开始学习并发编程的知识，但是因为后来工作的原因，这个学习计划就被搁置了，今天再次回顾以前学习的知识，发现大部分都被我忘记了，因为工作中用到并发编程的知识实在是少。做Java后端开发的同学也应该深有体会，大部分工作只是业务逻辑的curd，一些同行也戏称自己是“curd boy”。今天再次拾起并发编程的知识，也在此做个笔记，分享一下，有理解的不正确的还请大家指正，共同学习，也为自己加深一遍印象，让自己忘得慢一些，也方便以后复习的时候再去慢慢翻书，直接看笔记就好，会省下很多时间。\n\n要学习并发编程，首先我们要了解，什么是并发编程？\n\n提起并发编程很多人会混乱并发与并行两个概念，所以首先要澄清并发与并行的概念与区别。\n\n```\n并发是指同一个时间段内多个任务同时都在执行，而并行是说在单位时间内多个任务同时执行。\n```\n\n看起来很迷惑对不对，什么叫同一个时间段，什么叫单位时间？通俗的来说，一个时间段有多个单位时间累积而成，并发就是多个任务在这个时间段内执行，但不一定在同一个单位时间执行。而并行则是多个任务在同一个单位时间同时执行。\n\n举个例子：\n\n就拿人吃饭来说，一般大家吃饭的时候都会有再配一碗汤，我们可以把吃饭看做两个任务，一个是吃馒头，一个是喝汤，吃一口馒头是一个单位时间，喝一口汤也是一个单位时间，吃饭花费的时间就是一个时间段，而我们的嘴，是用来执行吃饭任务的，也就是一个CPU。一般我们吃饭的时候都是吃两口馒头，喝一口汤，在单个CPU的情况下（也就是我们只有一个嘴的情况下），吃馒头和喝汤是交替执行的，不可能在吃馒头的同时再喝一口汤，这就是并发，两个任务吃馒头喝汤，在同一个时间段内执行，但不一定是同一个单位时间执行。那么什么是并行呢，假设有人长了两张嘴，在吃饭的时候，一张嘴吃馒头的同时，另一张嘴喝汤，在同一个单位时间，执行两个或者多个任务，这就是并行。\n\n在单CPU时代，多个任务是共享一个CPU的，当一个任务占用CPU时，其他任务就会被挂起不能执行，当占用CPU的任务时间片用完后，才会把CPU让给其他任务使用，也就是，当我们吃馒头的时候，嘴正在被占用着，喝汤这个任务就没法占用我们的嘴，只有当咬下这一口馒头，才会把嘴的使用权交给喝汤这个任务。\n\n在单CPU时代，多线程编程是没有太大意义的，因为CPU只有一个，每个线程都只能交替使用这一个CPU，这样会导致线程间频繁的上下文切换，这也会带来额外的开销。就好比我们吃饭的时候，咬一口馒头咽下去，再伸手拿汤递到嘴边喝一口，再咬一口馒头咽下去，再把汤递到嘴边喝一口，这样的方式显然没有我们一开始就只吃馒头，吃完馒头，再端起汤来一口一口喝掉来的省时间。\n\n如果为双CPU配置，线程A和线程B各自在自己的cpu上执行任务，那就真正的实现了并行运行。但在多线程编程实践中，线程的个数往往多余CPU的个数，所以一般都称多线程并发编程而不多线程并行编程。\n\n到如今，连个人电脑都不止单个CPU了，一般的服务器的CPU个数几乎都能达到几十个，这打破了单个CPU对多线程编程效能的限制，多个CPU意味着每个线程都可以使用自己的CPU运行，这减少了线程上下文切换的开销，但随着对应用系统性能和吞吐量要求的提高，出现了处理海量数据和请求的要求，这些都对高并发编程有着迫切的需求。\n\n","slug":"Java并发编程（一）之并发编程基础知识","published":1,"updated":"2019-11-13T14:04:55.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79d6000307k3gakr89wf","content":"<p>并发编程是每一个软件工程师（不要再叫自己程序员了，我们是软件工程师）都需要学习的知识，对于一个优秀的软件工程师来说，掌握好并发编程是一门必修课。所以，为了成为一名优秀的软件工程师，我在半年多以前就开始学习并发编程的知识，但是因为后来工作的原因，这个学习计划就被搁置了，今天再次回顾以前学习的知识，发现大部分都被我忘记了，因为工作中用到并发编程的知识实在是少。做Java后端开发的同学也应该深有体会，大部分工作只是业务逻辑的curd，一些同行也戏称自己是“curd boy”。今天再次拾起并发编程的知识，也在此做个笔记，分享一下，有理解的不正确的还请大家指正，共同学习，也为自己加深一遍印象，让自己忘得慢一些，也方便以后复习的时候再去慢慢翻书，直接看笔记就好，会省下很多时间。</p>\n<p>要学习并发编程，首先我们要了解，什么是并发编程？</p>\n<p>提起并发编程很多人会混乱并发与并行两个概念，所以首先要澄清并发与并行的概念与区别。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">并发是指同一个时间段内多个任务同时都在执行，而并行是说在单位时间内多个任务同时执行。</span><br></pre></td></tr></table></figure>\n\n<p>看起来很迷惑对不对，什么叫同一个时间段，什么叫单位时间？通俗的来说，一个时间段有多个单位时间累积而成，并发就是多个任务在这个时间段内执行，但不一定在同一个单位时间执行。而并行则是多个任务在同一个单位时间同时执行。</p>\n<p>举个例子：</p>\n<p>就拿人吃饭来说，一般大家吃饭的时候都会有再配一碗汤，我们可以把吃饭看做两个任务，一个是吃馒头，一个是喝汤，吃一口馒头是一个单位时间，喝一口汤也是一个单位时间，吃饭花费的时间就是一个时间段，而我们的嘴，是用来执行吃饭任务的，也就是一个CPU。一般我们吃饭的时候都是吃两口馒头，喝一口汤，在单个CPU的情况下（也就是我们只有一个嘴的情况下），吃馒头和喝汤是交替执行的，不可能在吃馒头的同时再喝一口汤，这就是并发，两个任务吃馒头喝汤，在同一个时间段内执行，但不一定是同一个单位时间执行。那么什么是并行呢，假设有人长了两张嘴，在吃饭的时候，一张嘴吃馒头的同时，另一张嘴喝汤，在同一个单位时间，执行两个或者多个任务，这就是并行。</p>\n<p>在单CPU时代，多个任务是共享一个CPU的，当一个任务占用CPU时，其他任务就会被挂起不能执行，当占用CPU的任务时间片用完后，才会把CPU让给其他任务使用，也就是，当我们吃馒头的时候，嘴正在被占用着，喝汤这个任务就没法占用我们的嘴，只有当咬下这一口馒头，才会把嘴的使用权交给喝汤这个任务。</p>\n<p>在单CPU时代，多线程编程是没有太大意义的，因为CPU只有一个，每个线程都只能交替使用这一个CPU，这样会导致线程间频繁的上下文切换，这也会带来额外的开销。就好比我们吃饭的时候，咬一口馒头咽下去，再伸手拿汤递到嘴边喝一口，再咬一口馒头咽下去，再把汤递到嘴边喝一口，这样的方式显然没有我们一开始就只吃馒头，吃完馒头，再端起汤来一口一口喝掉来的省时间。</p>\n<p>如果为双CPU配置，线程A和线程B各自在自己的cpu上执行任务，那就真正的实现了并行运行。但在多线程编程实践中，线程的个数往往多余CPU的个数，所以一般都称多线程并发编程而不多线程并行编程。</p>\n<p>到如今，连个人电脑都不止单个CPU了，一般的服务器的CPU个数几乎都能达到几十个，这打破了单个CPU对多线程编程效能的限制，多个CPU意味着每个线程都可以使用自己的CPU运行，这减少了线程上下文切换的开销，但随着对应用系统性能和吞吐量要求的提高，出现了处理海量数据和请求的要求，这些都对高并发编程有着迫切的需求。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>并发编程是每一个软件工程师（不要再叫自己程序员了，我们是软件工程师）都需要学习的知识，对于一个优秀的软件工程师来说，掌握好并发编程是一门必修课。所以，为了成为一名优秀的软件工程师，我在半年多以前就开始学习并发编程的知识，但是因为后来工作的原因，这个学习计划就被搁置了，今天再次回顾以前学习的知识，发现大部分都被我忘记了，因为工作中用到并发编程的知识实在是少。做Java后端开发的同学也应该深有体会，大部分工作只是业务逻辑的curd，一些同行也戏称自己是“curd boy”。今天再次拾起并发编程的知识，也在此做个笔记，分享一下，有理解的不正确的还请大家指正，共同学习，也为自己加深一遍印象，让自己忘得慢一些，也方便以后复习的时候再去慢慢翻书，直接看笔记就好，会省下很多时间。</p>\n<p>要学习并发编程，首先我们要了解，什么是并发编程？</p>\n<p>提起并发编程很多人会混乱并发与并行两个概念，所以首先要澄清并发与并行的概念与区别。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">并发是指同一个时间段内多个任务同时都在执行，而并行是说在单位时间内多个任务同时执行。</span><br></pre></td></tr></table></figure>\n\n<p>看起来很迷惑对不对，什么叫同一个时间段，什么叫单位时间？通俗的来说，一个时间段有多个单位时间累积而成，并发就是多个任务在这个时间段内执行，但不一定在同一个单位时间执行。而并行则是多个任务在同一个单位时间同时执行。</p>\n<p>举个例子：</p>\n<p>就拿人吃饭来说，一般大家吃饭的时候都会有再配一碗汤，我们可以把吃饭看做两个任务，一个是吃馒头，一个是喝汤，吃一口馒头是一个单位时间，喝一口汤也是一个单位时间，吃饭花费的时间就是一个时间段，而我们的嘴，是用来执行吃饭任务的，也就是一个CPU。一般我们吃饭的时候都是吃两口馒头，喝一口汤，在单个CPU的情况下（也就是我们只有一个嘴的情况下），吃馒头和喝汤是交替执行的，不可能在吃馒头的同时再喝一口汤，这就是并发，两个任务吃馒头喝汤，在同一个时间段内执行，但不一定是同一个单位时间执行。那么什么是并行呢，假设有人长了两张嘴，在吃饭的时候，一张嘴吃馒头的同时，另一张嘴喝汤，在同一个单位时间，执行两个或者多个任务，这就是并行。</p>\n<p>在单CPU时代，多个任务是共享一个CPU的，当一个任务占用CPU时，其他任务就会被挂起不能执行，当占用CPU的任务时间片用完后，才会把CPU让给其他任务使用，也就是，当我们吃馒头的时候，嘴正在被占用着，喝汤这个任务就没法占用我们的嘴，只有当咬下这一口馒头，才会把嘴的使用权交给喝汤这个任务。</p>\n<p>在单CPU时代，多线程编程是没有太大意义的，因为CPU只有一个，每个线程都只能交替使用这一个CPU，这样会导致线程间频繁的上下文切换，这也会带来额外的开销。就好比我们吃饭的时候，咬一口馒头咽下去，再伸手拿汤递到嘴边喝一口，再咬一口馒头咽下去，再把汤递到嘴边喝一口，这样的方式显然没有我们一开始就只吃馒头，吃完馒头，再端起汤来一口一口喝掉来的省时间。</p>\n<p>如果为双CPU配置，线程A和线程B各自在自己的cpu上执行任务，那就真正的实现了并行运行。但在多线程编程实践中，线程的个数往往多余CPU的个数，所以一般都称多线程并发编程而不多线程并行编程。</p>\n<p>到如今，连个人电脑都不止单个CPU了，一般的服务器的CPU个数几乎都能达到几十个，这打破了单个CPU对多线程编程效能的限制，多个CPU意味着每个线程都可以使用自己的CPU运行，这减少了线程上下文切换的开销，但随着对应用系统性能和吞吐量要求的提高，出现了处理海量数据和请求的要求，这些都对高并发编程有着迫切的需求。</p>\n"},{"title":"Java并发编程（七）之各种锁","date":"2020-04-20T07:31:36.000Z","_content":"我们已经知道了在线程同步问题上，我们可以通过使用`synchronized`加锁来保证线程安全。简单介绍一下各种锁的概念以及含义。\n\n### 1. 乐观锁与悲观锁\n\n乐观锁和悲观锁是在数据库中引入的名词，但是在并发包锁里面也引入了类似的思想（计算机科学中很多思想都是类似的），所以也简单了解一下。\n\n- 乐观锁\n\n乐观锁不是数据库自带的，需要我们自己去实现。乐观锁是指操作数据库时(更新操作)，想法很乐观，认为这次的操作不会导致冲突，在操作数据时，并不进行任何其他的特殊处理（也就是不加锁），而在进行更新后，再去判断是否有冲突了。\n\n通常实现是这样的：在表中的数据进行操作时(更新)，先给数据表加一个版本(version)字段，每操作一次，将那条记录的版本号加1。也就是先查询出那条记录，获取出version字段,如果要对那条记录进行操作(更新),则先判断此刻version的值是否与刚刚查询出来时的version的值相等，如果相等，则说明这段期间，没有其他程序对其进行操作，则可以执行更新，将version字段的值加1；如果更新时发现此刻的version值与刚刚获取出来的version的值不相等，则说明这段期间已经有其他程序对其进行操作了，则不进行更新操作。\n\n- 悲观锁\n\n与乐观锁相对应的就是悲观锁了。悲观锁就是在操作数据时，认为此操作会出现数据冲突，所以在进行每次操作时都要通过获取锁才能进行对相同数据的操作，这点跟java中的synchronized很相似，所以悲观锁需要耗费较多的时间。另外与乐观锁相对应的，悲观锁是由数据库自己实现了的，要用的时候，我们直接调用数据库的相关语句就可以了\n\n悲观锁又分为共享锁与排它锁\n    \n    1. 共享锁\n    共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。相当于对于同一把门，它拥有多个钥匙一样，这个就是所谓的共享锁。\n    刚刚说了，对于悲观锁，一般数据库已经实现了，共享锁也属于悲观锁的一种，那么共享锁在mysql中是通过什么命令来调用呢。通过查询资料，了解到通过在执行语句后面加上lock in share mode就代表对某些资源加上共享锁了。\n\n    2. 排它锁\n    排它锁与共享锁相对应，就是指对于多个不同的事务，对同一个资源只能有一把锁。与共享锁类似，在需要执行的语句后面加上for update就可以了\n\n### 2. 公平锁与非公平锁\n公平锁表示线程获取锁的顺序是按照线程请求锁的时间早晚来决定的，也就是最早请求锁的线程将最早获取到锁。而非公平锁不一定先到先得。\n\nJava中`ReentrantLock`提供了公平和非公平锁的实现。\n\n- 公平锁 : `ReentrantLock lock = new ReentrantLock(true)`\n- 非公平锁 : `ReentrantLock lock = new ReentrantLock(false)`\n\n`注：`如果构造函数不传递参数，则默认是非公平锁。\n\n简单举个例子解释一下：\n\n加入线程A已经持有了锁，这时候线程B请求该锁时将会被挂起。当线程A释放锁之后，假设有一个线程C也需要获取该锁，如果采用非公平锁的方式，根据线程调度策略，线程B与线程C两者之一可能获取到锁；而如果使用公平锁，则需要把C挂起，让B先获取当前锁（先到先得）。\n\n需要注意的是，在没有公平性需求的前提下，尽量使用非公平锁，因为公平锁会带来性能开销（很容易理解，公平锁需要一些其他操作来实现先到先得的公平性）。\n\n### 3. 独占锁（排它锁）与共享锁\n与上面数据库中的锁定义类似。\n\n- 独占锁\n任何时候只有一个线程能得到锁，`ReentrantLock`就是以独占的方式实现的。由于每次访问共享资源都会先加上锁，限制了并发性。独占锁只允许在同一时间，由一个线程来进行读写操作，其他线程不能必须等待当前线程释放锁，才能进行读取操作。\n\n- 共享锁\n可以同时由多个线程持有，例如`ReadWriteLock`读写锁。它允许一个共享资源被多个线程同时进行`读`操作。\n\n### 4. 可重入锁\n\n当一个线程要获取被另一个线程持有的独占锁的时候，将会被阻塞，那么该线程获取它自己已经获取的锁会不会被阻塞呢？如果不被阻塞，我们就说该锁是可以虫儿不的。\n\n我们来看一个例子\n\n```java\npublic class Hello{\n    public synchronized void helloA(){\n        System.out.println(\"hello a\");\n    }\n    public synchronized void helloB(){\n        System.out.println(\"hello b\");\n        helloA();\n    }\n}\n```\n可以看到，两个方法`helloA`与`helloB`，都被`synchronized`修饰了，也就是都加了锁。我们知道对于普通同步方法，锁是当前实例对象，两个方法的锁是同一把锁，都是`this`。\n\n在调用`helloB`方法的时候，会先获取到锁，然后打印输出`hello b`，然后再调用`helloA`方法，由于`helloA`方法也是加了锁的，所以需要再次获取一次该锁，若是该锁是不可重入的，那么调用线程将会被阻塞，`helloB`方法将会被阻塞。但是实际上，`synchronized`锁时可重入锁。其原理是，在锁内部维护一个标识，代表当前锁被哪个线程占用，然后会关联一个计数器（也就是上一篇中提到的monitor的进入数），一开始计数器为0，任何线程都可以获取该锁，当一个线程获取到锁之后（monitorenter指令），计数器的值加1，其他线程获取该锁的时候，会先判断锁的所有者是不是自己，若不是自己，该线程就会被阻塞。若是自己，就会把计数器的值加1，释放锁后计数器的值会减1（monitorexit指令），当计数器的值又变回0的时候，锁里面的线程标识会被重置为`null`，这时候被阻塞的线程，就会被唤醒来竞争获取该锁。\n\n### 5. 自旋锁\n\nJava中的线程是与操作系统中的线程一一对应的，当一个线程获取锁失败后，会切换到操作系统内核态挂起，当该线程获取到锁时，又需要将其切换到内核态唤醒。我们知道，操作系统从用户态切换到内核态是很耗性能的。而自旋锁在一定程度上避免了用户态与内核态之间的切换，自旋锁是当线程在获取锁的时候，如果该锁已被其他线程占有，当前线程不会马上切换到内核态阻塞自己，而是在不放弃CPU使用权的情况下，多次尝试获取该锁（默认次数是10，可以使用-XX：PreBlockSpinsh参数设置该值），在后面几次尝试中，其他线程可能已经释放了该锁。如果尝试指定次数后仍没有获取到锁，线程才会切换到内核态阻塞挂起自己。\n\n由此看来，自旋锁换区线程阻塞调度的开销，是使用了CPU的时间，缺点就是，有可能这些CPU的时间被白白浪费了。\n","source":"_posts/Java并发编程（七）之各种锁.md","raw":"---\ntitle: Java并发编程（七）之各种锁\ndate: 2020-04-20 15:31:36\ntags: [多线程,并发,Java]\n---\n我们已经知道了在线程同步问题上，我们可以通过使用`synchronized`加锁来保证线程安全。简单介绍一下各种锁的概念以及含义。\n\n### 1. 乐观锁与悲观锁\n\n乐观锁和悲观锁是在数据库中引入的名词，但是在并发包锁里面也引入了类似的思想（计算机科学中很多思想都是类似的），所以也简单了解一下。\n\n- 乐观锁\n\n乐观锁不是数据库自带的，需要我们自己去实现。乐观锁是指操作数据库时(更新操作)，想法很乐观，认为这次的操作不会导致冲突，在操作数据时，并不进行任何其他的特殊处理（也就是不加锁），而在进行更新后，再去判断是否有冲突了。\n\n通常实现是这样的：在表中的数据进行操作时(更新)，先给数据表加一个版本(version)字段，每操作一次，将那条记录的版本号加1。也就是先查询出那条记录，获取出version字段,如果要对那条记录进行操作(更新),则先判断此刻version的值是否与刚刚查询出来时的version的值相等，如果相等，则说明这段期间，没有其他程序对其进行操作，则可以执行更新，将version字段的值加1；如果更新时发现此刻的version值与刚刚获取出来的version的值不相等，则说明这段期间已经有其他程序对其进行操作了，则不进行更新操作。\n\n- 悲观锁\n\n与乐观锁相对应的就是悲观锁了。悲观锁就是在操作数据时，认为此操作会出现数据冲突，所以在进行每次操作时都要通过获取锁才能进行对相同数据的操作，这点跟java中的synchronized很相似，所以悲观锁需要耗费较多的时间。另外与乐观锁相对应的，悲观锁是由数据库自己实现了的，要用的时候，我们直接调用数据库的相关语句就可以了\n\n悲观锁又分为共享锁与排它锁\n    \n    1. 共享锁\n    共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。相当于对于同一把门，它拥有多个钥匙一样，这个就是所谓的共享锁。\n    刚刚说了，对于悲观锁，一般数据库已经实现了，共享锁也属于悲观锁的一种，那么共享锁在mysql中是通过什么命令来调用呢。通过查询资料，了解到通过在执行语句后面加上lock in share mode就代表对某些资源加上共享锁了。\n\n    2. 排它锁\n    排它锁与共享锁相对应，就是指对于多个不同的事务，对同一个资源只能有一把锁。与共享锁类似，在需要执行的语句后面加上for update就可以了\n\n### 2. 公平锁与非公平锁\n公平锁表示线程获取锁的顺序是按照线程请求锁的时间早晚来决定的，也就是最早请求锁的线程将最早获取到锁。而非公平锁不一定先到先得。\n\nJava中`ReentrantLock`提供了公平和非公平锁的实现。\n\n- 公平锁 : `ReentrantLock lock = new ReentrantLock(true)`\n- 非公平锁 : `ReentrantLock lock = new ReentrantLock(false)`\n\n`注：`如果构造函数不传递参数，则默认是非公平锁。\n\n简单举个例子解释一下：\n\n加入线程A已经持有了锁，这时候线程B请求该锁时将会被挂起。当线程A释放锁之后，假设有一个线程C也需要获取该锁，如果采用非公平锁的方式，根据线程调度策略，线程B与线程C两者之一可能获取到锁；而如果使用公平锁，则需要把C挂起，让B先获取当前锁（先到先得）。\n\n需要注意的是，在没有公平性需求的前提下，尽量使用非公平锁，因为公平锁会带来性能开销（很容易理解，公平锁需要一些其他操作来实现先到先得的公平性）。\n\n### 3. 独占锁（排它锁）与共享锁\n与上面数据库中的锁定义类似。\n\n- 独占锁\n任何时候只有一个线程能得到锁，`ReentrantLock`就是以独占的方式实现的。由于每次访问共享资源都会先加上锁，限制了并发性。独占锁只允许在同一时间，由一个线程来进行读写操作，其他线程不能必须等待当前线程释放锁，才能进行读取操作。\n\n- 共享锁\n可以同时由多个线程持有，例如`ReadWriteLock`读写锁。它允许一个共享资源被多个线程同时进行`读`操作。\n\n### 4. 可重入锁\n\n当一个线程要获取被另一个线程持有的独占锁的时候，将会被阻塞，那么该线程获取它自己已经获取的锁会不会被阻塞呢？如果不被阻塞，我们就说该锁是可以虫儿不的。\n\n我们来看一个例子\n\n```java\npublic class Hello{\n    public synchronized void helloA(){\n        System.out.println(\"hello a\");\n    }\n    public synchronized void helloB(){\n        System.out.println(\"hello b\");\n        helloA();\n    }\n}\n```\n可以看到，两个方法`helloA`与`helloB`，都被`synchronized`修饰了，也就是都加了锁。我们知道对于普通同步方法，锁是当前实例对象，两个方法的锁是同一把锁，都是`this`。\n\n在调用`helloB`方法的时候，会先获取到锁，然后打印输出`hello b`，然后再调用`helloA`方法，由于`helloA`方法也是加了锁的，所以需要再次获取一次该锁，若是该锁是不可重入的，那么调用线程将会被阻塞，`helloB`方法将会被阻塞。但是实际上，`synchronized`锁时可重入锁。其原理是，在锁内部维护一个标识，代表当前锁被哪个线程占用，然后会关联一个计数器（也就是上一篇中提到的monitor的进入数），一开始计数器为0，任何线程都可以获取该锁，当一个线程获取到锁之后（monitorenter指令），计数器的值加1，其他线程获取该锁的时候，会先判断锁的所有者是不是自己，若不是自己，该线程就会被阻塞。若是自己，就会把计数器的值加1，释放锁后计数器的值会减1（monitorexit指令），当计数器的值又变回0的时候，锁里面的线程标识会被重置为`null`，这时候被阻塞的线程，就会被唤醒来竞争获取该锁。\n\n### 5. 自旋锁\n\nJava中的线程是与操作系统中的线程一一对应的，当一个线程获取锁失败后，会切换到操作系统内核态挂起，当该线程获取到锁时，又需要将其切换到内核态唤醒。我们知道，操作系统从用户态切换到内核态是很耗性能的。而自旋锁在一定程度上避免了用户态与内核态之间的切换，自旋锁是当线程在获取锁的时候，如果该锁已被其他线程占有，当前线程不会马上切换到内核态阻塞自己，而是在不放弃CPU使用权的情况下，多次尝试获取该锁（默认次数是10，可以使用-XX：PreBlockSpinsh参数设置该值），在后面几次尝试中，其他线程可能已经释放了该锁。如果尝试指定次数后仍没有获取到锁，线程才会切换到内核态阻塞挂起自己。\n\n由此看来，自旋锁换区线程阻塞调度的开销，是使用了CPU的时间，缺点就是，有可能这些CPU的时间被白白浪费了。\n","slug":"Java并发编程（七）之各种锁","published":1,"updated":"2020-04-22T02:06:35.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79d7000407k39m6ahiz7","content":"<p>我们已经知道了在线程同步问题上，我们可以通过使用<code>synchronized</code>加锁来保证线程安全。简单介绍一下各种锁的概念以及含义。</p>\n<h3 id=\"1-乐观锁与悲观锁\"><a href=\"#1-乐观锁与悲观锁\" class=\"headerlink\" title=\"1. 乐观锁与悲观锁\"></a>1. 乐观锁与悲观锁</h3><p>乐观锁和悲观锁是在数据库中引入的名词，但是在并发包锁里面也引入了类似的思想（计算机科学中很多思想都是类似的），所以也简单了解一下。</p>\n<ul>\n<li>乐观锁</li>\n</ul>\n<p>乐观锁不是数据库自带的，需要我们自己去实现。乐观锁是指操作数据库时(更新操作)，想法很乐观，认为这次的操作不会导致冲突，在操作数据时，并不进行任何其他的特殊处理（也就是不加锁），而在进行更新后，再去判断是否有冲突了。</p>\n<p>通常实现是这样的：在表中的数据进行操作时(更新)，先给数据表加一个版本(version)字段，每操作一次，将那条记录的版本号加1。也就是先查询出那条记录，获取出version字段,如果要对那条记录进行操作(更新),则先判断此刻version的值是否与刚刚查询出来时的version的值相等，如果相等，则说明这段期间，没有其他程序对其进行操作，则可以执行更新，将version字段的值加1；如果更新时发现此刻的version值与刚刚获取出来的version的值不相等，则说明这段期间已经有其他程序对其进行操作了，则不进行更新操作。</p>\n<ul>\n<li>悲观锁</li>\n</ul>\n<p>与乐观锁相对应的就是悲观锁了。悲观锁就是在操作数据时，认为此操作会出现数据冲突，所以在进行每次操作时都要通过获取锁才能进行对相同数据的操作，这点跟java中的synchronized很相似，所以悲观锁需要耗费较多的时间。另外与乐观锁相对应的，悲观锁是由数据库自己实现了的，要用的时候，我们直接调用数据库的相关语句就可以了</p>\n<p>悲观锁又分为共享锁与排它锁</p>\n<pre><code>1. 共享锁\n共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。相当于对于同一把门，它拥有多个钥匙一样，这个就是所谓的共享锁。\n刚刚说了，对于悲观锁，一般数据库已经实现了，共享锁也属于悲观锁的一种，那么共享锁在mysql中是通过什么命令来调用呢。通过查询资料，了解到通过在执行语句后面加上lock in share mode就代表对某些资源加上共享锁了。\n\n2. 排它锁\n排它锁与共享锁相对应，就是指对于多个不同的事务，对同一个资源只能有一把锁。与共享锁类似，在需要执行的语句后面加上for update就可以了</code></pre><h3 id=\"2-公平锁与非公平锁\"><a href=\"#2-公平锁与非公平锁\" class=\"headerlink\" title=\"2. 公平锁与非公平锁\"></a>2. 公平锁与非公平锁</h3><p>公平锁表示线程获取锁的顺序是按照线程请求锁的时间早晚来决定的，也就是最早请求锁的线程将最早获取到锁。而非公平锁不一定先到先得。</p>\n<p>Java中<code>ReentrantLock</code>提供了公平和非公平锁的实现。</p>\n<ul>\n<li>公平锁 : <code>ReentrantLock lock = new ReentrantLock(true)</code></li>\n<li>非公平锁 : <code>ReentrantLock lock = new ReentrantLock(false)</code></li>\n</ul>\n<p><code>注：</code>如果构造函数不传递参数，则默认是非公平锁。</p>\n<p>简单举个例子解释一下：</p>\n<p>加入线程A已经持有了锁，这时候线程B请求该锁时将会被挂起。当线程A释放锁之后，假设有一个线程C也需要获取该锁，如果采用非公平锁的方式，根据线程调度策略，线程B与线程C两者之一可能获取到锁；而如果使用公平锁，则需要把C挂起，让B先获取当前锁（先到先得）。</p>\n<p>需要注意的是，在没有公平性需求的前提下，尽量使用非公平锁，因为公平锁会带来性能开销（很容易理解，公平锁需要一些其他操作来实现先到先得的公平性）。</p>\n<h3 id=\"3-独占锁（排它锁）与共享锁\"><a href=\"#3-独占锁（排它锁）与共享锁\" class=\"headerlink\" title=\"3. 独占锁（排它锁）与共享锁\"></a>3. 独占锁（排它锁）与共享锁</h3><p>与上面数据库中的锁定义类似。</p>\n<ul>\n<li><p>独占锁<br>任何时候只有一个线程能得到锁，<code>ReentrantLock</code>就是以独占的方式实现的。由于每次访问共享资源都会先加上锁，限制了并发性。独占锁只允许在同一时间，由一个线程来进行读写操作，其他线程不能必须等待当前线程释放锁，才能进行读取操作。</p>\n</li>\n<li><p>共享锁<br>可以同时由多个线程持有，例如<code>ReadWriteLock</code>读写锁。它允许一个共享资源被多个线程同时进行<code>读</code>操作。</p>\n</li>\n</ul>\n<h3 id=\"4-可重入锁\"><a href=\"#4-可重入锁\" class=\"headerlink\" title=\"4. 可重入锁\"></a>4. 可重入锁</h3><p>当一个线程要获取被另一个线程持有的独占锁的时候，将会被阻塞，那么该线程获取它自己已经获取的锁会不会被阻塞呢？如果不被阻塞，我们就说该锁是可以虫儿不的。</p>\n<p>我们来看一个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">helloA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"hello a\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">helloB</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"hello b\"</span>);</span><br><span class=\"line\">        helloA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，两个方法<code>helloA</code>与<code>helloB</code>，都被<code>synchronized</code>修饰了，也就是都加了锁。我们知道对于普通同步方法，锁是当前实例对象，两个方法的锁是同一把锁，都是<code>this</code>。</p>\n<p>在调用<code>helloB</code>方法的时候，会先获取到锁，然后打印输出<code>hello b</code>，然后再调用<code>helloA</code>方法，由于<code>helloA</code>方法也是加了锁的，所以需要再次获取一次该锁，若是该锁是不可重入的，那么调用线程将会被阻塞，<code>helloB</code>方法将会被阻塞。但是实际上，<code>synchronized</code>锁时可重入锁。其原理是，在锁内部维护一个标识，代表当前锁被哪个线程占用，然后会关联一个计数器（也就是上一篇中提到的monitor的进入数），一开始计数器为0，任何线程都可以获取该锁，当一个线程获取到锁之后（monitorenter指令），计数器的值加1，其他线程获取该锁的时候，会先判断锁的所有者是不是自己，若不是自己，该线程就会被阻塞。若是自己，就会把计数器的值加1，释放锁后计数器的值会减1（monitorexit指令），当计数器的值又变回0的时候，锁里面的线程标识会被重置为<code>null</code>，这时候被阻塞的线程，就会被唤醒来竞争获取该锁。</p>\n<h3 id=\"5-自旋锁\"><a href=\"#5-自旋锁\" class=\"headerlink\" title=\"5. 自旋锁\"></a>5. 自旋锁</h3><p>Java中的线程是与操作系统中的线程一一对应的，当一个线程获取锁失败后，会切换到操作系统内核态挂起，当该线程获取到锁时，又需要将其切换到内核态唤醒。我们知道，操作系统从用户态切换到内核态是很耗性能的。而自旋锁在一定程度上避免了用户态与内核态之间的切换，自旋锁是当线程在获取锁的时候，如果该锁已被其他线程占有，当前线程不会马上切换到内核态阻塞自己，而是在不放弃CPU使用权的情况下，多次尝试获取该锁（默认次数是10，可以使用-XX：PreBlockSpinsh参数设置该值），在后面几次尝试中，其他线程可能已经释放了该锁。如果尝试指定次数后仍没有获取到锁，线程才会切换到内核态阻塞挂起自己。</p>\n<p>由此看来，自旋锁换区线程阻塞调度的开销，是使用了CPU的时间，缺点就是，有可能这些CPU的时间被白白浪费了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们已经知道了在线程同步问题上，我们可以通过使用<code>synchronized</code>加锁来保证线程安全。简单介绍一下各种锁的概念以及含义。</p>\n<h3 id=\"1-乐观锁与悲观锁\"><a href=\"#1-乐观锁与悲观锁\" class=\"headerlink\" title=\"1. 乐观锁与悲观锁\"></a>1. 乐观锁与悲观锁</h3><p>乐观锁和悲观锁是在数据库中引入的名词，但是在并发包锁里面也引入了类似的思想（计算机科学中很多思想都是类似的），所以也简单了解一下。</p>\n<ul>\n<li>乐观锁</li>\n</ul>\n<p>乐观锁不是数据库自带的，需要我们自己去实现。乐观锁是指操作数据库时(更新操作)，想法很乐观，认为这次的操作不会导致冲突，在操作数据时，并不进行任何其他的特殊处理（也就是不加锁），而在进行更新后，再去判断是否有冲突了。</p>\n<p>通常实现是这样的：在表中的数据进行操作时(更新)，先给数据表加一个版本(version)字段，每操作一次，将那条记录的版本号加1。也就是先查询出那条记录，获取出version字段,如果要对那条记录进行操作(更新),则先判断此刻version的值是否与刚刚查询出来时的version的值相等，如果相等，则说明这段期间，没有其他程序对其进行操作，则可以执行更新，将version字段的值加1；如果更新时发现此刻的version值与刚刚获取出来的version的值不相等，则说明这段期间已经有其他程序对其进行操作了，则不进行更新操作。</p>\n<ul>\n<li>悲观锁</li>\n</ul>\n<p>与乐观锁相对应的就是悲观锁了。悲观锁就是在操作数据时，认为此操作会出现数据冲突，所以在进行每次操作时都要通过获取锁才能进行对相同数据的操作，这点跟java中的synchronized很相似，所以悲观锁需要耗费较多的时间。另外与乐观锁相对应的，悲观锁是由数据库自己实现了的，要用的时候，我们直接调用数据库的相关语句就可以了</p>\n<p>悲观锁又分为共享锁与排它锁</p>\n<pre><code>1. 共享锁\n共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。相当于对于同一把门，它拥有多个钥匙一样，这个就是所谓的共享锁。\n刚刚说了，对于悲观锁，一般数据库已经实现了，共享锁也属于悲观锁的一种，那么共享锁在mysql中是通过什么命令来调用呢。通过查询资料，了解到通过在执行语句后面加上lock in share mode就代表对某些资源加上共享锁了。\n\n2. 排它锁\n排它锁与共享锁相对应，就是指对于多个不同的事务，对同一个资源只能有一把锁。与共享锁类似，在需要执行的语句后面加上for update就可以了</code></pre><h3 id=\"2-公平锁与非公平锁\"><a href=\"#2-公平锁与非公平锁\" class=\"headerlink\" title=\"2. 公平锁与非公平锁\"></a>2. 公平锁与非公平锁</h3><p>公平锁表示线程获取锁的顺序是按照线程请求锁的时间早晚来决定的，也就是最早请求锁的线程将最早获取到锁。而非公平锁不一定先到先得。</p>\n<p>Java中<code>ReentrantLock</code>提供了公平和非公平锁的实现。</p>\n<ul>\n<li>公平锁 : <code>ReentrantLock lock = new ReentrantLock(true)</code></li>\n<li>非公平锁 : <code>ReentrantLock lock = new ReentrantLock(false)</code></li>\n</ul>\n<p><code>注：</code>如果构造函数不传递参数，则默认是非公平锁。</p>\n<p>简单举个例子解释一下：</p>\n<p>加入线程A已经持有了锁，这时候线程B请求该锁时将会被挂起。当线程A释放锁之后，假设有一个线程C也需要获取该锁，如果采用非公平锁的方式，根据线程调度策略，线程B与线程C两者之一可能获取到锁；而如果使用公平锁，则需要把C挂起，让B先获取当前锁（先到先得）。</p>\n<p>需要注意的是，在没有公平性需求的前提下，尽量使用非公平锁，因为公平锁会带来性能开销（很容易理解，公平锁需要一些其他操作来实现先到先得的公平性）。</p>\n<h3 id=\"3-独占锁（排它锁）与共享锁\"><a href=\"#3-独占锁（排它锁）与共享锁\" class=\"headerlink\" title=\"3. 独占锁（排它锁）与共享锁\"></a>3. 独占锁（排它锁）与共享锁</h3><p>与上面数据库中的锁定义类似。</p>\n<ul>\n<li><p>独占锁<br>任何时候只有一个线程能得到锁，<code>ReentrantLock</code>就是以独占的方式实现的。由于每次访问共享资源都会先加上锁，限制了并发性。独占锁只允许在同一时间，由一个线程来进行读写操作，其他线程不能必须等待当前线程释放锁，才能进行读取操作。</p>\n</li>\n<li><p>共享锁<br>可以同时由多个线程持有，例如<code>ReadWriteLock</code>读写锁。它允许一个共享资源被多个线程同时进行<code>读</code>操作。</p>\n</li>\n</ul>\n<h3 id=\"4-可重入锁\"><a href=\"#4-可重入锁\" class=\"headerlink\" title=\"4. 可重入锁\"></a>4. 可重入锁</h3><p>当一个线程要获取被另一个线程持有的独占锁的时候，将会被阻塞，那么该线程获取它自己已经获取的锁会不会被阻塞呢？如果不被阻塞，我们就说该锁是可以虫儿不的。</p>\n<p>我们来看一个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">helloA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"hello a\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">helloB</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"hello b\"</span>);</span><br><span class=\"line\">        helloA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，两个方法<code>helloA</code>与<code>helloB</code>，都被<code>synchronized</code>修饰了，也就是都加了锁。我们知道对于普通同步方法，锁是当前实例对象，两个方法的锁是同一把锁，都是<code>this</code>。</p>\n<p>在调用<code>helloB</code>方法的时候，会先获取到锁，然后打印输出<code>hello b</code>，然后再调用<code>helloA</code>方法，由于<code>helloA</code>方法也是加了锁的，所以需要再次获取一次该锁，若是该锁是不可重入的，那么调用线程将会被阻塞，<code>helloB</code>方法将会被阻塞。但是实际上，<code>synchronized</code>锁时可重入锁。其原理是，在锁内部维护一个标识，代表当前锁被哪个线程占用，然后会关联一个计数器（也就是上一篇中提到的monitor的进入数），一开始计数器为0，任何线程都可以获取该锁，当一个线程获取到锁之后（monitorenter指令），计数器的值加1，其他线程获取该锁的时候，会先判断锁的所有者是不是自己，若不是自己，该线程就会被阻塞。若是自己，就会把计数器的值加1，释放锁后计数器的值会减1（monitorexit指令），当计数器的值又变回0的时候，锁里面的线程标识会被重置为<code>null</code>，这时候被阻塞的线程，就会被唤醒来竞争获取该锁。</p>\n<h3 id=\"5-自旋锁\"><a href=\"#5-自旋锁\" class=\"headerlink\" title=\"5. 自旋锁\"></a>5. 自旋锁</h3><p>Java中的线程是与操作系统中的线程一一对应的，当一个线程获取锁失败后，会切换到操作系统内核态挂起，当该线程获取到锁时，又需要将其切换到内核态唤醒。我们知道，操作系统从用户态切换到内核态是很耗性能的。而自旋锁在一定程度上避免了用户态与内核态之间的切换，自旋锁是当线程在获取锁的时候，如果该锁已被其他线程占有，当前线程不会马上切换到内核态阻塞自己，而是在不放弃CPU使用权的情况下，多次尝试获取该锁（默认次数是10，可以使用-XX：PreBlockSpinsh参数设置该值），在后面几次尝试中，其他线程可能已经释放了该锁。如果尝试指定次数后仍没有获取到锁，线程才会切换到内核态阻塞挂起自己。</p>\n<p>由此看来，自旋锁换区线程阻塞调度的开销，是使用了CPU的时间，缺点就是，有可能这些CPU的时间被白白浪费了。</p>\n"},{"title":"Java并发编程（九）之指令重排序","date":"2020-04-28T01:30:37.000Z","_content":"\nJava内存模型允许编译器和处理器对指令进行重排序以提高程序性能，但是只会对没有数据依赖性的指令进行重排序。单线程的情况下，重排序可以保证运行结果与不进行重排序运行结果一致，但在多线程下就会存在问题。\n\n举个例子：\n\n```java\nint a = 1;      //(1)\nint b = 2;      //(2)\nint c = a + b;  //(3)\n```\n\n在上述代码中，变量 c 的值依赖于 a 和 b ，所以在重排序之后，需要保证(1)和(2)的操作在(3)之前，c的值就不会受到影响，但是(1)和(2)的操作谁先执行在重排序之后并不能确定。这样的情况在单线程下不会出现问题，因为单线程下不会影响最终结果。\n\n下面看个多线程的例子\n\n```java\npublic class InstructionReorder {\n\n    private static int num = 0;\n    private static boolean ready = false;\n\n    public static class ReadThread extends Thread {\n        @Override\n        public void run() {\n            while (!Thread.currentThread().isInterrupted()){\n                if(ready){ //(1)\n                    System.out.println(num+num); //(2)\n                }\n                System.out.println(\"read thread...\");\n            }\n        }\n    }\n\n    public static class WriteThread extends Thread {\n        @Override\n        public void run() {\n            num = 2; //(3)\n            ready = true; //(4)\n            System.out.println(\"write thread set over\");\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException{\n        ReadThread readThread = new ReadThread();\n        readThread.start();\n\n        WriteThread writeThread = new WriteThread();\n        writeThread.start();\n\n        Thread.sleep(10);\n        readThread.interrupt();\n        System.out.println(\"main exit\");\n    }\n\n}\n```\n\n这段代码里变量都没有被`volatile`修饰，也没有任何同步措施，在多线程的情况下存在内存可见性问题。但先不考虑这个问题，在不考虑内存可见性问题的情况下，这段程序一定会输出4吗？答案是不一定，由于代码(1)(2)和(3)(4)之间不存在依赖关系，所以(3)(4)可能被重排序为先执行(4)，再执行(3)，那么执行(4)之后，读线程可能已经执行了(1)操作，并且在(3)操作执行前开始执行(2)操作，这时候输出的结果是0而不是4。\n\n解决方法就是使用`volatile`修饰共享变量，可以避免重排序与内存可见性问题。\n\n写`volatile`变量时，可以确保`volatile`写之前的操作不会被重排序到`volatile`写之后，读`volatile`变量时，可以确保`volatile`读之后的操作不会被编译器重排序到`volatile`读之前。","source":"_posts/Java并发编程（九）之指令重排序.md","raw":"---\ntitle: Java并发编程（九）之指令重排序\ndate: 2020-04-28 09:30:37\ntags: [多线程,并发,Java]\n---\n\nJava内存模型允许编译器和处理器对指令进行重排序以提高程序性能，但是只会对没有数据依赖性的指令进行重排序。单线程的情况下，重排序可以保证运行结果与不进行重排序运行结果一致，但在多线程下就会存在问题。\n\n举个例子：\n\n```java\nint a = 1;      //(1)\nint b = 2;      //(2)\nint c = a + b;  //(3)\n```\n\n在上述代码中，变量 c 的值依赖于 a 和 b ，所以在重排序之后，需要保证(1)和(2)的操作在(3)之前，c的值就不会受到影响，但是(1)和(2)的操作谁先执行在重排序之后并不能确定。这样的情况在单线程下不会出现问题，因为单线程下不会影响最终结果。\n\n下面看个多线程的例子\n\n```java\npublic class InstructionReorder {\n\n    private static int num = 0;\n    private static boolean ready = false;\n\n    public static class ReadThread extends Thread {\n        @Override\n        public void run() {\n            while (!Thread.currentThread().isInterrupted()){\n                if(ready){ //(1)\n                    System.out.println(num+num); //(2)\n                }\n                System.out.println(\"read thread...\");\n            }\n        }\n    }\n\n    public static class WriteThread extends Thread {\n        @Override\n        public void run() {\n            num = 2; //(3)\n            ready = true; //(4)\n            System.out.println(\"write thread set over\");\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException{\n        ReadThread readThread = new ReadThread();\n        readThread.start();\n\n        WriteThread writeThread = new WriteThread();\n        writeThread.start();\n\n        Thread.sleep(10);\n        readThread.interrupt();\n        System.out.println(\"main exit\");\n    }\n\n}\n```\n\n这段代码里变量都没有被`volatile`修饰，也没有任何同步措施，在多线程的情况下存在内存可见性问题。但先不考虑这个问题，在不考虑内存可见性问题的情况下，这段程序一定会输出4吗？答案是不一定，由于代码(1)(2)和(3)(4)之间不存在依赖关系，所以(3)(4)可能被重排序为先执行(4)，再执行(3)，那么执行(4)之后，读线程可能已经执行了(1)操作，并且在(3)操作执行前开始执行(2)操作，这时候输出的结果是0而不是4。\n\n解决方法就是使用`volatile`修饰共享变量，可以避免重排序与内存可见性问题。\n\n写`volatile`变量时，可以确保`volatile`写之前的操作不会被重排序到`volatile`写之后，读`volatile`变量时，可以确保`volatile`读之后的操作不会被编译器重排序到`volatile`读之前。","slug":"Java并发编程（九）之指令重排序","published":1,"updated":"2020-04-29T08:36:10.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79d8000507k3d7cs64e1","content":"<p>Java内存模型允许编译器和处理器对指令进行重排序以提高程序性能，但是只会对没有数据依赖性的指令进行重排序。单线程的情况下，重排序可以保证运行结果与不进行重排序运行结果一致，但在多线程下就会存在问题。</p>\n<p>举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;      <span class=\"comment\">//(1)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;      <span class=\"comment\">//(2)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c = a + b;  <span class=\"comment\">//(3)</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，变量 c 的值依赖于 a 和 b ，所以在重排序之后，需要保证(1)和(2)的操作在(3)之前，c的值就不会受到影响，但是(1)和(2)的操作谁先执行在重排序之后并不能确定。这样的情况在单线程下不会出现问题，因为单线程下不会影响最终结果。</p>\n<p>下面看个多线程的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstructionReorder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> ready = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!Thread.currentThread().isInterrupted())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ready)&#123; <span class=\"comment\">//(1)</span></span><br><span class=\"line\">                    System.out.println(num+num); <span class=\"comment\">//(2)</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"read thread...\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WriteThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            num = <span class=\"number\">2</span>; <span class=\"comment\">//(3)</span></span><br><span class=\"line\">            ready = <span class=\"keyword\">true</span>; <span class=\"comment\">//(4)</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"write thread set over\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</span><br><span class=\"line\">        ReadThread readThread = <span class=\"keyword\">new</span> ReadThread();</span><br><span class=\"line\">        readThread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        WriteThread writeThread = <span class=\"keyword\">new</span> WriteThread();</span><br><span class=\"line\">        writeThread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">        readThread.interrupt();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main exit\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码里变量都没有被<code>volatile</code>修饰，也没有任何同步措施，在多线程的情况下存在内存可见性问题。但先不考虑这个问题，在不考虑内存可见性问题的情况下，这段程序一定会输出4吗？答案是不一定，由于代码(1)(2)和(3)(4)之间不存在依赖关系，所以(3)(4)可能被重排序为先执行(4)，再执行(3)，那么执行(4)之后，读线程可能已经执行了(1)操作，并且在(3)操作执行前开始执行(2)操作，这时候输出的结果是0而不是4。</p>\n<p>解决方法就是使用<code>volatile</code>修饰共享变量，可以避免重排序与内存可见性问题。</p>\n<p>写<code>volatile</code>变量时，可以确保<code>volatile</code>写之前的操作不会被重排序到<code>volatile</code>写之后，读<code>volatile</code>变量时，可以确保<code>volatile</code>读之后的操作不会被编译器重排序到<code>volatile</code>读之前。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Java内存模型允许编译器和处理器对指令进行重排序以提高程序性能，但是只会对没有数据依赖性的指令进行重排序。单线程的情况下，重排序可以保证运行结果与不进行重排序运行结果一致，但在多线程下就会存在问题。</p>\n<p>举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;      <span class=\"comment\">//(1)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;      <span class=\"comment\">//(2)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c = a + b;  <span class=\"comment\">//(3)</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，变量 c 的值依赖于 a 和 b ，所以在重排序之后，需要保证(1)和(2)的操作在(3)之前，c的值就不会受到影响，但是(1)和(2)的操作谁先执行在重排序之后并不能确定。这样的情况在单线程下不会出现问题，因为单线程下不会影响最终结果。</p>\n<p>下面看个多线程的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstructionReorder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> ready = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!Thread.currentThread().isInterrupted())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ready)&#123; <span class=\"comment\">//(1)</span></span><br><span class=\"line\">                    System.out.println(num+num); <span class=\"comment\">//(2)</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"read thread...\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WriteThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            num = <span class=\"number\">2</span>; <span class=\"comment\">//(3)</span></span><br><span class=\"line\">            ready = <span class=\"keyword\">true</span>; <span class=\"comment\">//(4)</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"write thread set over\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</span><br><span class=\"line\">        ReadThread readThread = <span class=\"keyword\">new</span> ReadThread();</span><br><span class=\"line\">        readThread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        WriteThread writeThread = <span class=\"keyword\">new</span> WriteThread();</span><br><span class=\"line\">        writeThread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">        readThread.interrupt();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main exit\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码里变量都没有被<code>volatile</code>修饰，也没有任何同步措施，在多线程的情况下存在内存可见性问题。但先不考虑这个问题，在不考虑内存可见性问题的情况下，这段程序一定会输出4吗？答案是不一定，由于代码(1)(2)和(3)(4)之间不存在依赖关系，所以(3)(4)可能被重排序为先执行(4)，再执行(3)，那么执行(4)之后，读线程可能已经执行了(1)操作，并且在(3)操作执行前开始执行(2)操作，这时候输出的结果是0而不是4。</p>\n<p>解决方法就是使用<code>volatile</code>修饰共享变量，可以避免重排序与内存可见性问题。</p>\n<p>写<code>volatile</code>变量时，可以确保<code>volatile</code>写之前的操作不会被重排序到<code>volatile</code>写之后，读<code>volatile</code>变量时，可以确保<code>volatile</code>读之后的操作不会被编译器重排序到<code>volatile</code>读之前。</p>\n"},{"title":"Java并发编程（二）之线程的创建","date":"2019-11-17T08:01:37.000Z","_content":"\n上一篇讲了什么是并发，什么是多线程，这次我们讲一讲如何创建一个线程.\n\n1. 继承Thread类，并重写其run方法\n```java\npublic class ThreadTest {\n\n    public static void main(String[] args) {\n        //创建线程\n        MyThread myThread = new MyThread();\n        //启动线程\n        myThread.start();\n    }   \n}\n/**\n * 继承Thread类并重写其run方法\n */\nclass MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(\"I am a Thread\");\n    }\n} \n```\n\n上述方式直接继承了Thread类，并重写了run方法， 在main方法中创建了一个线程实例，并调用其start方法启动了线程。需要注意的是，当创建完线程实例之后，线程并没有启动，直到调用了run方法后才真正的启动了线程。\n\n其实调用了start方法后，线程也没有马上执行，而是处于了就绪状态（线程有多种状态，例如就绪，挂起，运行等，以后再详细说），就绪状态就是指线程已经获取了除了CPU资源外其他所有的所需资源，，一旦获取到CPU使用权限，就会真正处于运行状态，也就是运行run方法中的代码，直到run方法执行完毕，进程就变为终止状态。\n\n使用继承Thread类这种方式的好处是，在run方法中获取当前线程，直接使用this关键字就可以了，不用使用`Thread.currentThread()`方法；缺点是Java是不支持多继承的，继承了Thread就不能继承别的类，另外就是线程任务没有与代码分离，多个线程执行同样的任务时，需要重复多分任务代码。\n\n2. 实现Runable接口并重写run方法\n```java\npublic class RunableTest {\n\n    public static void main(String[] args) {\n        //实例化任务类\n        MyRunable myRunable = new MyRunable();\n        //将任务实例作为参数创建线程并启动\n        new Thread(myRunable).start();\n        new Thread(myRunable).start();\n    }\n}\n/**\n * 实现Runable接口\n */\nclass MyRunable implements Runnable {\n    @Override\n    public void run() {\n        System.out.println(\"I am a Thread\");\n    }\n}\n```\n\n上述方式，实现Runable接口，避免了占用继承的位置，同时，任务与代码分离，两个线程共用同一个task代码逻辑。但是无论是继承Thread类还是实现Runable接口来创建线程（这两种方式也是我们大学时候Java程序设计课上，老师提到的两种方法），都有一个缺点，那就是任务没有返回值，大家也可以看到run方法函数签名中的返回类型是`void`。下面看最后一种有返回值的方式-使用`FutureTask`\n\n3. 使用FutureTask\n```java\npublic class CallableTest {\n\n    public static void main(String[] args) {\n        //创建异步任务\n        FutureTask<String> futureTask = new FutureTask<>(new MyCallable());\n        //将任务作为参数新建线程并启动\n        new Thread(futureTask).start();\n        try {\n            //获取执行结果\n            String result = futureTask.get();\n            System.out.println(result);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        \n    }\n}\n/**\n * 创建任务类，类似于Runable\n */\nclass MyCallable implements Callable<String>{\n    @Override\n    public String call() throws Exception {\n        System.out.println(\"I am a Thread\");\n        return \"hello world\";\n    }\n}\n```\n\n如上，代码中MyCallable类实现了Callable接口的call方法，在main中创建一个FutureTask对象，构造函数为Callable的实例，然后使用创建的FutureTask实例作为任务创建了一个线程并且启动，最后通过`futureTask.get()`等待任务执行完毕获取任务的返回结果。\n\n除了这三种方法，其实还有一种高级用法，那就是使用线程池，这里就暂时先不详细的说了，简单说一说线程池主要解决的问题吧：\n    \n    1. 当执行大量异步任务时，每当需要执行异步任务就要new一个线程来运行，而线程的创建和销毁都是需要开销的。线程池中的线程可以复用，不需要每次执行任务都创建销毁。\n    2. 线程池提供了一些对资源限制和管理的手段，比如限制线程个数，动态新增线程等，线程池也保留了一些基本的数据统计，比如当前线程完成的任务数目等。\n\n线程池的使用，以及其原理，篇幅比较长，这篇文章就暂时不讲了，我们后续再讲，这篇就先到这吧。 ","source":"_posts/Java并发编程（二）之线程的创建.md","raw":"---\ntitle: Java并发编程（二）之线程的创建\ndate: 2019-11-17 16:01:37\ntags: [多线程,并发,Java]\n---\n\n上一篇讲了什么是并发，什么是多线程，这次我们讲一讲如何创建一个线程.\n\n1. 继承Thread类，并重写其run方法\n```java\npublic class ThreadTest {\n\n    public static void main(String[] args) {\n        //创建线程\n        MyThread myThread = new MyThread();\n        //启动线程\n        myThread.start();\n    }   \n}\n/**\n * 继承Thread类并重写其run方法\n */\nclass MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(\"I am a Thread\");\n    }\n} \n```\n\n上述方式直接继承了Thread类，并重写了run方法， 在main方法中创建了一个线程实例，并调用其start方法启动了线程。需要注意的是，当创建完线程实例之后，线程并没有启动，直到调用了run方法后才真正的启动了线程。\n\n其实调用了start方法后，线程也没有马上执行，而是处于了就绪状态（线程有多种状态，例如就绪，挂起，运行等，以后再详细说），就绪状态就是指线程已经获取了除了CPU资源外其他所有的所需资源，，一旦获取到CPU使用权限，就会真正处于运行状态，也就是运行run方法中的代码，直到run方法执行完毕，进程就变为终止状态。\n\n使用继承Thread类这种方式的好处是，在run方法中获取当前线程，直接使用this关键字就可以了，不用使用`Thread.currentThread()`方法；缺点是Java是不支持多继承的，继承了Thread就不能继承别的类，另外就是线程任务没有与代码分离，多个线程执行同样的任务时，需要重复多分任务代码。\n\n2. 实现Runable接口并重写run方法\n```java\npublic class RunableTest {\n\n    public static void main(String[] args) {\n        //实例化任务类\n        MyRunable myRunable = new MyRunable();\n        //将任务实例作为参数创建线程并启动\n        new Thread(myRunable).start();\n        new Thread(myRunable).start();\n    }\n}\n/**\n * 实现Runable接口\n */\nclass MyRunable implements Runnable {\n    @Override\n    public void run() {\n        System.out.println(\"I am a Thread\");\n    }\n}\n```\n\n上述方式，实现Runable接口，避免了占用继承的位置，同时，任务与代码分离，两个线程共用同一个task代码逻辑。但是无论是继承Thread类还是实现Runable接口来创建线程（这两种方式也是我们大学时候Java程序设计课上，老师提到的两种方法），都有一个缺点，那就是任务没有返回值，大家也可以看到run方法函数签名中的返回类型是`void`。下面看最后一种有返回值的方式-使用`FutureTask`\n\n3. 使用FutureTask\n```java\npublic class CallableTest {\n\n    public static void main(String[] args) {\n        //创建异步任务\n        FutureTask<String> futureTask = new FutureTask<>(new MyCallable());\n        //将任务作为参数新建线程并启动\n        new Thread(futureTask).start();\n        try {\n            //获取执行结果\n            String result = futureTask.get();\n            System.out.println(result);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        \n    }\n}\n/**\n * 创建任务类，类似于Runable\n */\nclass MyCallable implements Callable<String>{\n    @Override\n    public String call() throws Exception {\n        System.out.println(\"I am a Thread\");\n        return \"hello world\";\n    }\n}\n```\n\n如上，代码中MyCallable类实现了Callable接口的call方法，在main中创建一个FutureTask对象，构造函数为Callable的实例，然后使用创建的FutureTask实例作为任务创建了一个线程并且启动，最后通过`futureTask.get()`等待任务执行完毕获取任务的返回结果。\n\n除了这三种方法，其实还有一种高级用法，那就是使用线程池，这里就暂时先不详细的说了，简单说一说线程池主要解决的问题吧：\n    \n    1. 当执行大量异步任务时，每当需要执行异步任务就要new一个线程来运行，而线程的创建和销毁都是需要开销的。线程池中的线程可以复用，不需要每次执行任务都创建销毁。\n    2. 线程池提供了一些对资源限制和管理的手段，比如限制线程个数，动态新增线程等，线程池也保留了一些基本的数据统计，比如当前线程完成的任务数目等。\n\n线程池的使用，以及其原理，篇幅比较长，这篇文章就暂时不讲了，我们后续再讲，这篇就先到这吧。 ","slug":"Java并发编程（二）之线程的创建","published":1,"updated":"2019-11-17T09:24:26.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79da000807k32wdufs7z","content":"<p>上一篇讲了什么是并发，什么是多线程，这次我们讲一讲如何创建一个线程.</p>\n<ol>\n<li>继承Thread类，并重写其run方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建线程</span></span><br><span class=\"line\">        MyThread myThread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        myThread.start();</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 继承Thread类并重写其run方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am a Thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>上述方式直接继承了Thread类，并重写了run方法， 在main方法中创建了一个线程实例，并调用其start方法启动了线程。需要注意的是，当创建完线程实例之后，线程并没有启动，直到调用了run方法后才真正的启动了线程。</p>\n<p>其实调用了start方法后，线程也没有马上执行，而是处于了就绪状态（线程有多种状态，例如就绪，挂起，运行等，以后再详细说），就绪状态就是指线程已经获取了除了CPU资源外其他所有的所需资源，，一旦获取到CPU使用权限，就会真正处于运行状态，也就是运行run方法中的代码，直到run方法执行完毕，进程就变为终止状态。</p>\n<p>使用继承Thread类这种方式的好处是，在run方法中获取当前线程，直接使用this关键字就可以了，不用使用<code>Thread.currentThread()</code>方法；缺点是Java是不支持多继承的，继承了Thread就不能继承别的类，另外就是线程任务没有与代码分离，多个线程执行同样的任务时，需要重复多分任务代码。</p>\n<ol start=\"2\">\n<li>实现Runable接口并重写run方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunableTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//实例化任务类</span></span><br><span class=\"line\">        MyRunable myRunable = <span class=\"keyword\">new</span> MyRunable();</span><br><span class=\"line\">        <span class=\"comment\">//将任务实例作为参数创建线程并启动</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myRunable).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myRunable).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Runable接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRunable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am a Thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>上述方式，实现Runable接口，避免了占用继承的位置，同时，任务与代码分离，两个线程共用同一个task代码逻辑。但是无论是继承Thread类还是实现Runable接口来创建线程（这两种方式也是我们大学时候Java程序设计课上，老师提到的两种方法），都有一个缺点，那就是任务没有返回值，大家也可以看到run方法函数签名中的返回类型是<code>void</code>。下面看最后一种有返回值的方式-使用<code>FutureTask</code></p>\n<ol start=\"3\">\n<li>使用FutureTask<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallableTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建异步任务</span></span><br><span class=\"line\">        FutureTask&lt;String&gt; futureTask = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(<span class=\"keyword\">new</span> MyCallable());</span><br><span class=\"line\">        <span class=\"comment\">//将任务作为参数新建线程并启动</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(futureTask).start();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取执行结果</span></span><br><span class=\"line\">            String result = futureTask.get();</span><br><span class=\"line\">            System.out.println(result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建任务类，类似于Runable</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCallable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am a Thread\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>如上，代码中MyCallable类实现了Callable接口的call方法，在main中创建一个FutureTask对象，构造函数为Callable的实例，然后使用创建的FutureTask实例作为任务创建了一个线程并且启动，最后通过<code>futureTask.get()</code>等待任务执行完毕获取任务的返回结果。</p>\n<p>除了这三种方法，其实还有一种高级用法，那就是使用线程池，这里就暂时先不详细的说了，简单说一说线程池主要解决的问题吧：</p>\n<pre><code>1. 当执行大量异步任务时，每当需要执行异步任务就要new一个线程来运行，而线程的创建和销毁都是需要开销的。线程池中的线程可以复用，不需要每次执行任务都创建销毁。\n2. 线程池提供了一些对资源限制和管理的手段，比如限制线程个数，动态新增线程等，线程池也保留了一些基本的数据统计，比如当前线程完成的任务数目等。</code></pre><p>线程池的使用，以及其原理，篇幅比较长，这篇文章就暂时不讲了，我们后续再讲，这篇就先到这吧。 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇讲了什么是并发，什么是多线程，这次我们讲一讲如何创建一个线程.</p>\n<ol>\n<li>继承Thread类，并重写其run方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建线程</span></span><br><span class=\"line\">        MyThread myThread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        myThread.start();</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 继承Thread类并重写其run方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am a Thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>上述方式直接继承了Thread类，并重写了run方法， 在main方法中创建了一个线程实例，并调用其start方法启动了线程。需要注意的是，当创建完线程实例之后，线程并没有启动，直到调用了run方法后才真正的启动了线程。</p>\n<p>其实调用了start方法后，线程也没有马上执行，而是处于了就绪状态（线程有多种状态，例如就绪，挂起，运行等，以后再详细说），就绪状态就是指线程已经获取了除了CPU资源外其他所有的所需资源，，一旦获取到CPU使用权限，就会真正处于运行状态，也就是运行run方法中的代码，直到run方法执行完毕，进程就变为终止状态。</p>\n<p>使用继承Thread类这种方式的好处是，在run方法中获取当前线程，直接使用this关键字就可以了，不用使用<code>Thread.currentThread()</code>方法；缺点是Java是不支持多继承的，继承了Thread就不能继承别的类，另外就是线程任务没有与代码分离，多个线程执行同样的任务时，需要重复多分任务代码。</p>\n<ol start=\"2\">\n<li>实现Runable接口并重写run方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunableTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//实例化任务类</span></span><br><span class=\"line\">        MyRunable myRunable = <span class=\"keyword\">new</span> MyRunable();</span><br><span class=\"line\">        <span class=\"comment\">//将任务实例作为参数创建线程并启动</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myRunable).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myRunable).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现Runable接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRunable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am a Thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>上述方式，实现Runable接口，避免了占用继承的位置，同时，任务与代码分离，两个线程共用同一个task代码逻辑。但是无论是继承Thread类还是实现Runable接口来创建线程（这两种方式也是我们大学时候Java程序设计课上，老师提到的两种方法），都有一个缺点，那就是任务没有返回值，大家也可以看到run方法函数签名中的返回类型是<code>void</code>。下面看最后一种有返回值的方式-使用<code>FutureTask</code></p>\n<ol start=\"3\">\n<li>使用FutureTask<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallableTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建异步任务</span></span><br><span class=\"line\">        FutureTask&lt;String&gt; futureTask = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(<span class=\"keyword\">new</span> MyCallable());</span><br><span class=\"line\">        <span class=\"comment\">//将任务作为参数新建线程并启动</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(futureTask).start();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取执行结果</span></span><br><span class=\"line\">            String result = futureTask.get();</span><br><span class=\"line\">            System.out.println(result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建任务类，类似于Runable</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCallable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am a Thread\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>如上，代码中MyCallable类实现了Callable接口的call方法，在main中创建一个FutureTask对象，构造函数为Callable的实例，然后使用创建的FutureTask实例作为任务创建了一个线程并且启动，最后通过<code>futureTask.get()</code>等待任务执行完毕获取任务的返回结果。</p>\n<p>除了这三种方法，其实还有一种高级用法，那就是使用线程池，这里就暂时先不详细的说了，简单说一说线程池主要解决的问题吧：</p>\n<pre><code>1. 当执行大量异步任务时，每当需要执行异步任务就要new一个线程来运行，而线程的创建和销毁都是需要开销的。线程池中的线程可以复用，不需要每次执行任务都创建销毁。\n2. 线程池提供了一些对资源限制和管理的手段，比如限制线程个数，动态新增线程等，线程池也保留了一些基本的数据统计，比如当前线程完成的任务数目等。</code></pre><p>线程池的使用，以及其原理，篇幅比较长，这篇文章就暂时不讲了，我们后续再讲，这篇就先到这吧。 </p>\n"},{"title":"Java并发编程（五）之线程安全问题-volatitle关键字","date":"2019-12-14T11:36:40.000Z","_content":"\n上一篇提到了共享变量的线程安全问题，我们使用`synchronized`关键字来保证了共享变量的线程安全，这次我们来看看`volatitle`关键字。\n\n当一个变量被声明为`volatitle`时，线程在写入变量的时候就不会把值缓存在寄存器或者一级二级缓存（Java内存模型中的工作内存），而是直接刷新回主内存，当其他线程读取该共享变量时，会从主内存直接获取最新的值，而不是从自己的工作内存中获取变量值。\n\n我们看看如下代码\n\n```java\npublic class VoiatileTest {\n\n    public static void main(String[] args) {\n        VoiatileTestRunable myRunable = new VoiatileTestRunable();\n\n        new Thread(myRunable,\"t1\").start();\n        new Thread(myRunable,\"t2\").start();\n        \n    }\n}\nclass VoiatileTestRunable implements Runnable{\n        \n    public volatile int count = 5;\n    \n    @Override\n    public void run() {\n        while(count>0){\n            try {\n                Thread.sleep(500);\n                sale();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            \n        } \n    }\n    public void sale() {\n        \n        if (count > 0) {\n            --count;\n            System.out.println(Thread.currentThread().getName() + \",出售第\" + (5 - count) + \"张票\");\n        }\n        \n    }\n}\n```\n执行结果\n\n```java\nt1,出售第1张票\nt2,出售第1张票\nt1,出售第3张票\nt2,出售第3张票\nt1,出售第5张票\nt2,出售第5张票\n```\n\n可以看到，执行结果并不是我们预期的结果，一共卖出去`6`张票，但是count变量没有累加到6，这是由于`volatitle`只保证了内存可见性，但却没有保证操作的原子性，`++`，`--`操作都不是原子性的。\n\n那么如何保证操作原子性呢，我们可以使用Java中提供的原子类`AtomicInteger`，代码如下：\n\n```java\npackage com.constantine.daily.concurrency.atomicobj;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class VoiatileTest {\n\n    public static void main(String[] args) {\n        VoiatileTestRunable myRunable = new VoiatileTestRunable();\n\n        new Thread(myRunable,\"t1\").start();\n        new Thread(myRunable,\"t2\").start();\n\n    }\n}\nclass VoiatileTestRunable implements Runnable{\n\n    public static volatile AtomicInteger count = new AtomicInteger(5);\n\n    @Override\n    public void run() {\n\n        int cnt;\n\n        while((cnt =count.getAndDecrement())>0){\n            try {\n                Thread.sleep(500);\n                System.out.println(Thread.currentThread().getName() + \",出售第\" + ((5 - cnt)+1) + \"张票\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n\n        }\n    }\n}\n```\n\n执行结果：\n\n```java\nt2,出售第2张票\nt1,出售第1张票\nt1,出售第4张票\nt2,出售第3张票\nt1,出售第5张票\n```\n可以看到，一共卖出去5张票，因为AtomicInteger 保证了操作原子性。还可以注意到，count变量并没有从1逐一累加到5，这是因为虽然`count.getAndDecrement()`是原子操作，但是`sale`方法中if语句里的代码块并不是原子操作。两个线程同时执行打印语句，就会出现这种情况，但是对卖票这件事情没有什么影响，不会出现卖超的情况。\n\n通过上面代码我们了解到，`volatile`虽然提供了可见性保证，但是并没有保证操作的原子性。\n\n那么在什么情况下可以使用volatile关键字呢？\n\n1. 写入变量不依赖变量当前值时。如果依赖当前值，将是 `获取-计算-写入` 三步操作（上述代码中的--count，此操作依赖于count的当前值），这三步操作不是原子性的，而volatile不保证原子性\n2. 读写变量值时没有加锁。因为加锁本身已经保证了内存可见性，这时候不需要再将变量声明为volatile了\n","source":"_posts/Java并发编程（五）之线程安全问题-volatitle关键字.md","raw":"---\ntitle: Java并发编程（五）之线程安全问题-volatitle关键字\ndate: 2019-12-14 19:36:40\ntags: [多线程,并发,Java]\n---\n\n上一篇提到了共享变量的线程安全问题，我们使用`synchronized`关键字来保证了共享变量的线程安全，这次我们来看看`volatitle`关键字。\n\n当一个变量被声明为`volatitle`时，线程在写入变量的时候就不会把值缓存在寄存器或者一级二级缓存（Java内存模型中的工作内存），而是直接刷新回主内存，当其他线程读取该共享变量时，会从主内存直接获取最新的值，而不是从自己的工作内存中获取变量值。\n\n我们看看如下代码\n\n```java\npublic class VoiatileTest {\n\n    public static void main(String[] args) {\n        VoiatileTestRunable myRunable = new VoiatileTestRunable();\n\n        new Thread(myRunable,\"t1\").start();\n        new Thread(myRunable,\"t2\").start();\n        \n    }\n}\nclass VoiatileTestRunable implements Runnable{\n        \n    public volatile int count = 5;\n    \n    @Override\n    public void run() {\n        while(count>0){\n            try {\n                Thread.sleep(500);\n                sale();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            \n        } \n    }\n    public void sale() {\n        \n        if (count > 0) {\n            --count;\n            System.out.println(Thread.currentThread().getName() + \",出售第\" + (5 - count) + \"张票\");\n        }\n        \n    }\n}\n```\n执行结果\n\n```java\nt1,出售第1张票\nt2,出售第1张票\nt1,出售第3张票\nt2,出售第3张票\nt1,出售第5张票\nt2,出售第5张票\n```\n\n可以看到，执行结果并不是我们预期的结果，一共卖出去`6`张票，但是count变量没有累加到6，这是由于`volatitle`只保证了内存可见性，但却没有保证操作的原子性，`++`，`--`操作都不是原子性的。\n\n那么如何保证操作原子性呢，我们可以使用Java中提供的原子类`AtomicInteger`，代码如下：\n\n```java\npackage com.constantine.daily.concurrency.atomicobj;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class VoiatileTest {\n\n    public static void main(String[] args) {\n        VoiatileTestRunable myRunable = new VoiatileTestRunable();\n\n        new Thread(myRunable,\"t1\").start();\n        new Thread(myRunable,\"t2\").start();\n\n    }\n}\nclass VoiatileTestRunable implements Runnable{\n\n    public static volatile AtomicInteger count = new AtomicInteger(5);\n\n    @Override\n    public void run() {\n\n        int cnt;\n\n        while((cnt =count.getAndDecrement())>0){\n            try {\n                Thread.sleep(500);\n                System.out.println(Thread.currentThread().getName() + \",出售第\" + ((5 - cnt)+1) + \"张票\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n\n        }\n    }\n}\n```\n\n执行结果：\n\n```java\nt2,出售第2张票\nt1,出售第1张票\nt1,出售第4张票\nt2,出售第3张票\nt1,出售第5张票\n```\n可以看到，一共卖出去5张票，因为AtomicInteger 保证了操作原子性。还可以注意到，count变量并没有从1逐一累加到5，这是因为虽然`count.getAndDecrement()`是原子操作，但是`sale`方法中if语句里的代码块并不是原子操作。两个线程同时执行打印语句，就会出现这种情况，但是对卖票这件事情没有什么影响，不会出现卖超的情况。\n\n通过上面代码我们了解到，`volatile`虽然提供了可见性保证，但是并没有保证操作的原子性。\n\n那么在什么情况下可以使用volatile关键字呢？\n\n1. 写入变量不依赖变量当前值时。如果依赖当前值，将是 `获取-计算-写入` 三步操作（上述代码中的--count，此操作依赖于count的当前值），这三步操作不是原子性的，而volatile不保证原子性\n2. 读写变量值时没有加锁。因为加锁本身已经保证了内存可见性，这时候不需要再将变量声明为volatile了\n","slug":"Java并发编程（五）之线程安全问题-volatitle关键字","published":1,"updated":"2020-05-15T06:34:18.174Z","_id":"cka7j79db000907k3f1tub1f9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上一篇提到了共享变量的线程安全问题，我们使用<code>synchronized</code>关键字来保证了共享变量的线程安全，这次我们来看看<code>volatitle</code>关键字。</p>\n<p>当一个变量被声明为<code>volatitle</code>时，线程在写入变量的时候就不会把值缓存在寄存器或者一级二级缓存（Java内存模型中的工作内存），而是直接刷新回主内存，当其他线程读取该共享变量时，会从主内存直接获取最新的值，而不是从自己的工作内存中获取变量值。</p>\n<p>我们看看如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VoiatileTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        VoiatileTestRunable myRunable = <span class=\"keyword\">new</span> VoiatileTestRunable();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myRunable,<span class=\"string\">\"t1\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myRunable,<span class=\"string\">\"t2\"</span>).start();</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VoiatileTestRunable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(count&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">                sale();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sale</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            --count;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\",出售第\"</span> + (<span class=\"number\">5</span> - count) + <span class=\"string\">\"张票\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1,出售第<span class=\"number\">1</span>张票</span><br><span class=\"line\">t2,出售第<span class=\"number\">1</span>张票</span><br><span class=\"line\">t1,出售第<span class=\"number\">3</span>张票</span><br><span class=\"line\">t2,出售第<span class=\"number\">3</span>张票</span><br><span class=\"line\">t1,出售第<span class=\"number\">5</span>张票</span><br><span class=\"line\">t2,出售第<span class=\"number\">5</span>张票</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，执行结果并不是我们预期的结果，一共卖出去<code>6</code>张票，但是count变量没有累加到6，这是由于<code>volatitle</code>只保证了内存可见性，但却没有保证操作的原子性，<code>++</code>，<code>--</code>操作都不是原子性的。</p>\n<p>那么如何保证操作原子性呢，我们可以使用Java中提供的原子类<code>AtomicInteger</code>，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.constantine.daily.concurrency.atomicobj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VoiatileTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        VoiatileTestRunable myRunable = <span class=\"keyword\">new</span> VoiatileTestRunable();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myRunable,<span class=\"string\">\"t1\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myRunable,<span class=\"string\">\"t2\"</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VoiatileTestRunable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> AtomicInteger count = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>((cnt =count.getAndDecrement())&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\",出售第\"</span> + ((<span class=\"number\">5</span> - cnt)+<span class=\"number\">1</span>) + <span class=\"string\">\"张票\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t2,出售第<span class=\"number\">2</span>张票</span><br><span class=\"line\">t1,出售第<span class=\"number\">1</span>张票</span><br><span class=\"line\">t1,出售第<span class=\"number\">4</span>张票</span><br><span class=\"line\">t2,出售第<span class=\"number\">3</span>张票</span><br><span class=\"line\">t1,出售第<span class=\"number\">5</span>张票</span><br></pre></td></tr></table></figure>\n<p>可以看到，一共卖出去5张票，因为AtomicInteger 保证了操作原子性。还可以注意到，count变量并没有从1逐一累加到5，这是因为虽然<code>count.getAndDecrement()</code>是原子操作，但是<code>sale</code>方法中if语句里的代码块并不是原子操作。两个线程同时执行打印语句，就会出现这种情况，但是对卖票这件事情没有什么影响，不会出现卖超的情况。</p>\n<p>通过上面代码我们了解到，<code>volatile</code>虽然提供了可见性保证，但是并没有保证操作的原子性。</p>\n<p>那么在什么情况下可以使用volatile关键字呢？</p>\n<ol>\n<li>写入变量不依赖变量当前值时。如果依赖当前值，将是 <code>获取-计算-写入</code> 三步操作（上述代码中的–count，此操作依赖于count的当前值），这三步操作不是原子性的，而volatile不保证原子性</li>\n<li>读写变量值时没有加锁。因为加锁本身已经保证了内存可见性，这时候不需要再将变量声明为volatile了</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇提到了共享变量的线程安全问题，我们使用<code>synchronized</code>关键字来保证了共享变量的线程安全，这次我们来看看<code>volatitle</code>关键字。</p>\n<p>当一个变量被声明为<code>volatitle</code>时，线程在写入变量的时候就不会把值缓存在寄存器或者一级二级缓存（Java内存模型中的工作内存），而是直接刷新回主内存，当其他线程读取该共享变量时，会从主内存直接获取最新的值，而不是从自己的工作内存中获取变量值。</p>\n<p>我们看看如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VoiatileTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        VoiatileTestRunable myRunable = <span class=\"keyword\">new</span> VoiatileTestRunable();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myRunable,<span class=\"string\">\"t1\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myRunable,<span class=\"string\">\"t2\"</span>).start();</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VoiatileTestRunable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(count&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">                sale();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sale</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            --count;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\",出售第\"</span> + (<span class=\"number\">5</span> - count) + <span class=\"string\">\"张票\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1,出售第<span class=\"number\">1</span>张票</span><br><span class=\"line\">t2,出售第<span class=\"number\">1</span>张票</span><br><span class=\"line\">t1,出售第<span class=\"number\">3</span>张票</span><br><span class=\"line\">t2,出售第<span class=\"number\">3</span>张票</span><br><span class=\"line\">t1,出售第<span class=\"number\">5</span>张票</span><br><span class=\"line\">t2,出售第<span class=\"number\">5</span>张票</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，执行结果并不是我们预期的结果，一共卖出去<code>6</code>张票，但是count变量没有累加到6，这是由于<code>volatitle</code>只保证了内存可见性，但却没有保证操作的原子性，<code>++</code>，<code>--</code>操作都不是原子性的。</p>\n<p>那么如何保证操作原子性呢，我们可以使用Java中提供的原子类<code>AtomicInteger</code>，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.constantine.daily.concurrency.atomicobj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VoiatileTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        VoiatileTestRunable myRunable = <span class=\"keyword\">new</span> VoiatileTestRunable();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myRunable,<span class=\"string\">\"t1\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myRunable,<span class=\"string\">\"t2\"</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VoiatileTestRunable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> AtomicInteger count = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>((cnt =count.getAndDecrement())&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\",出售第\"</span> + ((<span class=\"number\">5</span> - cnt)+<span class=\"number\">1</span>) + <span class=\"string\">\"张票\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t2,出售第<span class=\"number\">2</span>张票</span><br><span class=\"line\">t1,出售第<span class=\"number\">1</span>张票</span><br><span class=\"line\">t1,出售第<span class=\"number\">4</span>张票</span><br><span class=\"line\">t2,出售第<span class=\"number\">3</span>张票</span><br><span class=\"line\">t1,出售第<span class=\"number\">5</span>张票</span><br></pre></td></tr></table></figure>\n<p>可以看到，一共卖出去5张票，因为AtomicInteger 保证了操作原子性。还可以注意到，count变量并没有从1逐一累加到5，这是因为虽然<code>count.getAndDecrement()</code>是原子操作，但是<code>sale</code>方法中if语句里的代码块并不是原子操作。两个线程同时执行打印语句，就会出现这种情况，但是对卖票这件事情没有什么影响，不会出现卖超的情况。</p>\n<p>通过上面代码我们了解到，<code>volatile</code>虽然提供了可见性保证，但是并没有保证操作的原子性。</p>\n<p>那么在什么情况下可以使用volatile关键字呢？</p>\n<ol>\n<li>写入变量不依赖变量当前值时。如果依赖当前值，将是 <code>获取-计算-写入</code> 三步操作（上述代码中的–count，此操作依赖于count的当前值），这三步操作不是原子性的，而volatile不保证原子性</li>\n<li>读写变量值时没有加锁。因为加锁本身已经保证了内存可见性，这时候不需要再将变量声明为volatile了</li>\n</ol>\n"},{"title":"Java并发编程（八）之CAS操作","date":"2020-04-22T02:17:18.000Z","_content":"\n学习`CAS`之前，先了解一下什么是原子性操作，所谓的原子性操作，是指进行一系列操作的时候，这一系列操作要么全部执行，要么全部不执行，不会出现只执行一部分的情况。\n\n例如，我们对一个变量进行+1（例如`x++`）操作的时候，首先要读取当前变量值，然后+1，然后再将新值赋值给该变量。这就是一个`读-改-写`的过程。如果这个过程不是原子性的，那么久就会出现线程安全问题。虽然`x++`只有一行代码，但是其中的操作并不是一步而成的，其操作不是原子性的。\n\n通过之前所学，我们知道`synchronized`关键字可以解决线程安全问题，也就是`内存可见性`与`原子性`。但是`synchronized`是独占锁，没有获取到锁的线程将会被阻塞，会降低程序性能。例如下面代码：\n\n```java\npublic class ThreadSafeCount{\n    private int value;\n\n    public synchronized int getCount(){\n        return value;\n    }\n\n    public synchronized void incCount(){\n        value++;\n    }\n}\n```\n\n可以看到两个方法都加了锁，但是同一时间只能有一个线程来调用，其中`getCount`方法是只读方法，多个线程同时调用不会有线程安全问题，但是加了synchronized关键字之后，同一时间只能有一个线程来调用，降低了并发性能。那能不能去掉这个关键字呢，也不能去掉，因为我们还需要synchronized来保证内存可见性。\n\n### CAS操作\n\n我们学过两个关键字`synchronized`与`volatile`，两者都可以解决共享变量内存可见性的问题，但是，`volatile`不能解决`读-改-写`等原子性的问题，`synchronized`能够解决原子性问题，但是其性能开销大。\n\nCAS操作是`Compare And Swap`，是JDK提供的非阻塞原子性操作，通过硬件保证了`比较-更新`操作的原子性。JDK里面的`Unsafe`类提供了一系列`compareAndSwap*`方法，比如`compareAndSwapInt`和`compareAndSwapLong`。下面我们以`compareAndSwapLong`为例子进行简单介绍。\n\n`boolean compareAndSwapLong(Object obj,long valueOffset,long expect,long update)`方法：四个参数，含义分别是：对象内存位置，对象中变量的偏移量，变量的预期值，新的值。其操作的含义是，若对象`obj`中内存偏移量为`valueOffset`的变量值为`expect`，则用新的值`update`替换旧的值，也就是替换`expect`。这是处理器提供的一个原子性命令。\n\nCAS操作虽然很高效地解决了原子操作，但是仍然存在三大问题：`ABA问题`、`循环开销时间大`、`只能保证一个共享变量的原子操作`\n\n1. ABA问题\nCAS在操作值得时候，会检查值有没有发生变化，如果没有发生变化就更新。若是一个值原来是A，变成了B，后来又变回了A（举例：线程1获取变量值为A后，在执行CAS之前，线程2使用CAS修改变量的值为B，然后又修改变量值为A），那么使用CAS操作时检查其值得结果是没有变化，但其实是变化了，虽然线程1执行CAS操作时变量的值为A，但是这个A已经不是线程1获取变量值时的A了，这就是ABA问题。\n\n看起来好像最后还是正确的修改了变量值，但其实是丢失了变量值得修改记录。此问题的解决方案就是使用版本号，在变量前面追加上版本号，每次变量更新的时候把版本号+1，这样`A-B-A`就会变为`1A-2B-3A`。从Java1.5开始，JDK的Atomic包里就提供了一个类`AtomicStampedReference`来解决ABA问题，其中`compareAndSet`方法的作用就是，先检查当前引用是否等于预期引用，并检查当前标志是否等于预期标志，如果全部相等，就进行更新。\n```java\npublic boolean compareAndSet(V expectedReference,//预期引用\n                                V newReference,//更新后引用\n                                int expectedStamp,//当前标志\n                                int newStamp)//更新后标志\n```\n2. 循环时间长，开销大\n自旋CAS如果长时间不成功，会给CPU带来非常大的开销。\n\n3. 只能保证一个共享变量的原子操作\n当对一个共享变量执行操作的时候，我们可以使用CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。从Java1.5开始，JDK的Atomic包里就提供了一个类`AtomicReference`类来保证引用对象直接的原子性，就可以多个变量放在一个对象里来进行CAS操作。","source":"_posts/Java并发编程（八）之CAS操作.md","raw":"---\ntitle: Java并发编程（八）之CAS操作\ndate: 2020-04-22 10:17:18\ntags: [多线程,并发,Java]\n---\n\n学习`CAS`之前，先了解一下什么是原子性操作，所谓的原子性操作，是指进行一系列操作的时候，这一系列操作要么全部执行，要么全部不执行，不会出现只执行一部分的情况。\n\n例如，我们对一个变量进行+1（例如`x++`）操作的时候，首先要读取当前变量值，然后+1，然后再将新值赋值给该变量。这就是一个`读-改-写`的过程。如果这个过程不是原子性的，那么久就会出现线程安全问题。虽然`x++`只有一行代码，但是其中的操作并不是一步而成的，其操作不是原子性的。\n\n通过之前所学，我们知道`synchronized`关键字可以解决线程安全问题，也就是`内存可见性`与`原子性`。但是`synchronized`是独占锁，没有获取到锁的线程将会被阻塞，会降低程序性能。例如下面代码：\n\n```java\npublic class ThreadSafeCount{\n    private int value;\n\n    public synchronized int getCount(){\n        return value;\n    }\n\n    public synchronized void incCount(){\n        value++;\n    }\n}\n```\n\n可以看到两个方法都加了锁，但是同一时间只能有一个线程来调用，其中`getCount`方法是只读方法，多个线程同时调用不会有线程安全问题，但是加了synchronized关键字之后，同一时间只能有一个线程来调用，降低了并发性能。那能不能去掉这个关键字呢，也不能去掉，因为我们还需要synchronized来保证内存可见性。\n\n### CAS操作\n\n我们学过两个关键字`synchronized`与`volatile`，两者都可以解决共享变量内存可见性的问题，但是，`volatile`不能解决`读-改-写`等原子性的问题，`synchronized`能够解决原子性问题，但是其性能开销大。\n\nCAS操作是`Compare And Swap`，是JDK提供的非阻塞原子性操作，通过硬件保证了`比较-更新`操作的原子性。JDK里面的`Unsafe`类提供了一系列`compareAndSwap*`方法，比如`compareAndSwapInt`和`compareAndSwapLong`。下面我们以`compareAndSwapLong`为例子进行简单介绍。\n\n`boolean compareAndSwapLong(Object obj,long valueOffset,long expect,long update)`方法：四个参数，含义分别是：对象内存位置，对象中变量的偏移量，变量的预期值，新的值。其操作的含义是，若对象`obj`中内存偏移量为`valueOffset`的变量值为`expect`，则用新的值`update`替换旧的值，也就是替换`expect`。这是处理器提供的一个原子性命令。\n\nCAS操作虽然很高效地解决了原子操作，但是仍然存在三大问题：`ABA问题`、`循环开销时间大`、`只能保证一个共享变量的原子操作`\n\n1. ABA问题\nCAS在操作值得时候，会检查值有没有发生变化，如果没有发生变化就更新。若是一个值原来是A，变成了B，后来又变回了A（举例：线程1获取变量值为A后，在执行CAS之前，线程2使用CAS修改变量的值为B，然后又修改变量值为A），那么使用CAS操作时检查其值得结果是没有变化，但其实是变化了，虽然线程1执行CAS操作时变量的值为A，但是这个A已经不是线程1获取变量值时的A了，这就是ABA问题。\n\n看起来好像最后还是正确的修改了变量值，但其实是丢失了变量值得修改记录。此问题的解决方案就是使用版本号，在变量前面追加上版本号，每次变量更新的时候把版本号+1，这样`A-B-A`就会变为`1A-2B-3A`。从Java1.5开始，JDK的Atomic包里就提供了一个类`AtomicStampedReference`来解决ABA问题，其中`compareAndSet`方法的作用就是，先检查当前引用是否等于预期引用，并检查当前标志是否等于预期标志，如果全部相等，就进行更新。\n```java\npublic boolean compareAndSet(V expectedReference,//预期引用\n                                V newReference,//更新后引用\n                                int expectedStamp,//当前标志\n                                int newStamp)//更新后标志\n```\n2. 循环时间长，开销大\n自旋CAS如果长时间不成功，会给CPU带来非常大的开销。\n\n3. 只能保证一个共享变量的原子操作\n当对一个共享变量执行操作的时候，我们可以使用CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。从Java1.5开始，JDK的Atomic包里就提供了一个类`AtomicReference`类来保证引用对象直接的原子性，就可以多个变量放在一个对象里来进行CAS操作。","slug":"Java并发编程（八）之CAS操作","published":1,"updated":"2020-04-24T07:58:28.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79dc000b07k363nt1gbh","content":"<p>学习<code>CAS</code>之前，先了解一下什么是原子性操作，所谓的原子性操作，是指进行一系列操作的时候，这一系列操作要么全部执行，要么全部不执行，不会出现只执行一部分的情况。</p>\n<p>例如，我们对一个变量进行+1（例如<code>x++</code>）操作的时候，首先要读取当前变量值，然后+1，然后再将新值赋值给该变量。这就是一个<code>读-改-写</code>的过程。如果这个过程不是原子性的，那么久就会出现线程安全问题。虽然<code>x++</code>只有一行代码，但是其中的操作并不是一步而成的，其操作不是原子性的。</p>\n<p>通过之前所学，我们知道<code>synchronized</code>关键字可以解决线程安全问题，也就是<code>内存可见性</code>与<code>原子性</code>。但是<code>synchronized</code>是独占锁，没有获取到锁的线程将会被阻塞，会降低程序性能。例如下面代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadSafeCount</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">incCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        value++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到两个方法都加了锁，但是同一时间只能有一个线程来调用，其中<code>getCount</code>方法是只读方法，多个线程同时调用不会有线程安全问题，但是加了synchronized关键字之后，同一时间只能有一个线程来调用，降低了并发性能。那能不能去掉这个关键字呢，也不能去掉，因为我们还需要synchronized来保证内存可见性。</p>\n<h3 id=\"CAS操作\"><a href=\"#CAS操作\" class=\"headerlink\" title=\"CAS操作\"></a>CAS操作</h3><p>我们学过两个关键字<code>synchronized</code>与<code>volatile</code>，两者都可以解决共享变量内存可见性的问题，但是，<code>volatile</code>不能解决<code>读-改-写</code>等原子性的问题，<code>synchronized</code>能够解决原子性问题，但是其性能开销大。</p>\n<p>CAS操作是<code>Compare And Swap</code>，是JDK提供的非阻塞原子性操作，通过硬件保证了<code>比较-更新</code>操作的原子性。JDK里面的<code>Unsafe</code>类提供了一系列<code>compareAndSwap*</code>方法，比如<code>compareAndSwapInt</code>和<code>compareAndSwapLong</code>。下面我们以<code>compareAndSwapLong</code>为例子进行简单介绍。</p>\n<p><code>boolean compareAndSwapLong(Object obj,long valueOffset,long expect,long update)</code>方法：四个参数，含义分别是：对象内存位置，对象中变量的偏移量，变量的预期值，新的值。其操作的含义是，若对象<code>obj</code>中内存偏移量为<code>valueOffset</code>的变量值为<code>expect</code>，则用新的值<code>update</code>替换旧的值，也就是替换<code>expect</code>。这是处理器提供的一个原子性命令。</p>\n<p>CAS操作虽然很高效地解决了原子操作，但是仍然存在三大问题：<code>ABA问题</code>、<code>循环开销时间大</code>、<code>只能保证一个共享变量的原子操作</code></p>\n<ol>\n<li>ABA问题<br>CAS在操作值得时候，会检查值有没有发生变化，如果没有发生变化就更新。若是一个值原来是A，变成了B，后来又变回了A（举例：线程1获取变量值为A后，在执行CAS之前，线程2使用CAS修改变量的值为B，然后又修改变量值为A），那么使用CAS操作时检查其值得结果是没有变化，但其实是变化了，虽然线程1执行CAS操作时变量的值为A，但是这个A已经不是线程1获取变量值时的A了，这就是ABA问题。</li>\n</ol>\n<p>看起来好像最后还是正确的修改了变量值，但其实是丢失了变量值得修改记录。此问题的解决方案就是使用版本号，在变量前面追加上版本号，每次变量更新的时候把版本号+1，这样<code>A-B-A</code>就会变为<code>1A-2B-3A</code>。从Java1.5开始，JDK的Atomic包里就提供了一个类<code>AtomicStampedReference</code>来解决ABA问题，其中<code>compareAndSet</code>方法的作用就是，先检查当前引用是否等于预期引用，并检查当前标志是否等于预期标志，如果全部相等，就进行更新。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(V expectedReference,//预期引用</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                V newReference,//更新后引用</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">int</span> expectedStamp,//当前标志</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">int</span> newStamp)</span><span class=\"comment\">//更新后标志</span></span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>循环时间长，开销大<br>自旋CAS如果长时间不成功，会给CPU带来非常大的开销。</p>\n</li>\n<li><p>只能保证一个共享变量的原子操作<br>当对一个共享变量执行操作的时候，我们可以使用CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。从Java1.5开始，JDK的Atomic包里就提供了一个类<code>AtomicReference</code>类来保证引用对象直接的原子性，就可以多个变量放在一个对象里来进行CAS操作。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>学习<code>CAS</code>之前，先了解一下什么是原子性操作，所谓的原子性操作，是指进行一系列操作的时候，这一系列操作要么全部执行，要么全部不执行，不会出现只执行一部分的情况。</p>\n<p>例如，我们对一个变量进行+1（例如<code>x++</code>）操作的时候，首先要读取当前变量值，然后+1，然后再将新值赋值给该变量。这就是一个<code>读-改-写</code>的过程。如果这个过程不是原子性的，那么久就会出现线程安全问题。虽然<code>x++</code>只有一行代码，但是其中的操作并不是一步而成的，其操作不是原子性的。</p>\n<p>通过之前所学，我们知道<code>synchronized</code>关键字可以解决线程安全问题，也就是<code>内存可见性</code>与<code>原子性</code>。但是<code>synchronized</code>是独占锁，没有获取到锁的线程将会被阻塞，会降低程序性能。例如下面代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadSafeCount</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">incCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        value++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到两个方法都加了锁，但是同一时间只能有一个线程来调用，其中<code>getCount</code>方法是只读方法，多个线程同时调用不会有线程安全问题，但是加了synchronized关键字之后，同一时间只能有一个线程来调用，降低了并发性能。那能不能去掉这个关键字呢，也不能去掉，因为我们还需要synchronized来保证内存可见性。</p>\n<h3 id=\"CAS操作\"><a href=\"#CAS操作\" class=\"headerlink\" title=\"CAS操作\"></a>CAS操作</h3><p>我们学过两个关键字<code>synchronized</code>与<code>volatile</code>，两者都可以解决共享变量内存可见性的问题，但是，<code>volatile</code>不能解决<code>读-改-写</code>等原子性的问题，<code>synchronized</code>能够解决原子性问题，但是其性能开销大。</p>\n<p>CAS操作是<code>Compare And Swap</code>，是JDK提供的非阻塞原子性操作，通过硬件保证了<code>比较-更新</code>操作的原子性。JDK里面的<code>Unsafe</code>类提供了一系列<code>compareAndSwap*</code>方法，比如<code>compareAndSwapInt</code>和<code>compareAndSwapLong</code>。下面我们以<code>compareAndSwapLong</code>为例子进行简单介绍。</p>\n<p><code>boolean compareAndSwapLong(Object obj,long valueOffset,long expect,long update)</code>方法：四个参数，含义分别是：对象内存位置，对象中变量的偏移量，变量的预期值，新的值。其操作的含义是，若对象<code>obj</code>中内存偏移量为<code>valueOffset</code>的变量值为<code>expect</code>，则用新的值<code>update</code>替换旧的值，也就是替换<code>expect</code>。这是处理器提供的一个原子性命令。</p>\n<p>CAS操作虽然很高效地解决了原子操作，但是仍然存在三大问题：<code>ABA问题</code>、<code>循环开销时间大</code>、<code>只能保证一个共享变量的原子操作</code></p>\n<ol>\n<li>ABA问题<br>CAS在操作值得时候，会检查值有没有发生变化，如果没有发生变化就更新。若是一个值原来是A，变成了B，后来又变回了A（举例：线程1获取变量值为A后，在执行CAS之前，线程2使用CAS修改变量的值为B，然后又修改变量值为A），那么使用CAS操作时检查其值得结果是没有变化，但其实是变化了，虽然线程1执行CAS操作时变量的值为A，但是这个A已经不是线程1获取变量值时的A了，这就是ABA问题。</li>\n</ol>\n<p>看起来好像最后还是正确的修改了变量值，但其实是丢失了变量值得修改记录。此问题的解决方案就是使用版本号，在变量前面追加上版本号，每次变量更新的时候把版本号+1，这样<code>A-B-A</code>就会变为<code>1A-2B-3A</code>。从Java1.5开始，JDK的Atomic包里就提供了一个类<code>AtomicStampedReference</code>来解决ABA问题，其中<code>compareAndSet</code>方法的作用就是，先检查当前引用是否等于预期引用，并检查当前标志是否等于预期标志，如果全部相等，就进行更新。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(V expectedReference,//预期引用</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                V newReference,//更新后引用</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">int</span> expectedStamp,//当前标志</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">int</span> newStamp)</span><span class=\"comment\">//更新后标志</span></span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>循环时间长，开销大<br>自旋CAS如果长时间不成功，会给CPU带来非常大的开销。</p>\n</li>\n<li><p>只能保证一个共享变量的原子操作<br>当对一个共享变量执行操作的时候，我们可以使用CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。从Java1.5开始，JDK的Atomic包里就提供了一个类<code>AtomicReference</code>类来保证引用对象直接的原子性，就可以多个变量放在一个对象里来进行CAS操作。</p>\n</li>\n</ol>\n"},{"title":"Java并发编程（六）之synchronized关键字原理","date":"2020-04-20T01:34:04.000Z","_content":"\n之前我们说过在线程安全问题中如何使用`synchronized`关键字，现在我们看看，此关键字的原理是什么。\n\n在多线程并发编程中`synchronized`一直是元老级的应用，虽说之前Java的版本中，这是一个重量级的锁，但是`Java SE 1.6`版本对此关键字进行了各种优化，有些情况下，它就表现的没那么笨重了。\n\n先来看下利用synchronized实现同步的基础：Java中的每一个对象都可以作为锁。具体表现为以下3种形式。\n\n1. 对于普通同步方法，锁是当前实例对象。\n2. 对于静态同步方法，锁是当前类的Class对象。\n3. 对于同步方法块，锁是Synchonized括号里配置的对象。\n\n当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。若是线程在退出或者抛出异常的时候没有释放锁，那么共享资源将不会被释放，其他线程不能访问，程序就会陷入死锁。\n\n在JVM中，同步的实现是通过监视器锁，也就是`Monitor`对象的进入和退出实现的。要么显示得通过 `monitorenter` 和 `monitorexit` 指令实现，要么隐示地通过方法调用和返回指令实现。\n\n对于Java代码来说，或许最常用的同步实现就是同步方法。其中同步代码块是通过使用 `monitorenter` 和 `monitorexit` 实现的，而同步方法却是使用 `ACC_SYNCHRONIZED` 标记符隐示的实现，原理是通过方法调用指令检查该方法在常量池中是否包含 `ACC_SYNCHRONIZED` 标记符(这个我还没有去了解，所以就先略过，之后了解了再一起学习吧！)\n\n`monitorenter`指令是在编译后插入到同步代码块的开始位置，而`monitorexit`是插入到方法结束处和异常处，JVM要保证每个`monitorenter`必须有对应的`monitorexit`与之配对。任何对象都有一个`monitor`与之关联，当且一个`monitor`被持有后，它将处于锁定状态。线程执行到`monitorenter`指令时，将会尝试获取对象所对应的`monitor`的所有权，即尝试获得对象的锁。线程执行到`monitorexit`指令时，将会释放对象所对应的`monitor`的所有权。\n\n举个具体的例子看下\n\n```java\npublic class SynchronizedDemo {\n    public static synchronized void staticMethod() throws InterruptedException {\n        System.out.println(\"静态同步方法开始\");\n        Thread.sleep(1000);\n        System.out.println(\"静态同步方法结束\");\n    }\n    public synchronized void method() throws InterruptedException {\n        System.out.println(\"实例同步方法开始\");\n        Thread.sleep(1000);\n        System.out.println(\"实例同步方法结束\");\n    }\n    public synchronized void method2() throws InterruptedException {\n        System.out.println(\"实例同步方法2开始\");\n        Thread.sleep(3000);\n        System.out.println(\"实例同步方法2结束\");\n    }\n\n    public void method3() throws InterruptedException {\n        synchronized(this){\n            System.out.println(\"同步代码块方法3开始\");\n            Thread.sleep(3000);\n            System.out.println(\"同步代码块方法3结束\");\n        }\n        \n    }\n\n    public static void main(String[] args) {\n        final SynchronizedDemo synDemo = new SynchronizedDemo();\n        Thread thread1 = new Thread(() -> {\n            try {\n               synDemo.method();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        Thread thread2 = new Thread(() -> {\n            try {\n                synDemo.method2();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        thread1.start();\n        thread2.start();\n    }\n}\n```\n使用`javac SynchronizedDemo.java`编译一下，然后使用`javap -v SynchronizedDemo`反编译class文件，可以看到行号、本地变量表信息、反编译汇编代码，还会输出当前类用到的常量池等信息。\n\n我们看一下反编译之后的同步方法与同步代码块\n\n1. 同步方法\n```java\npublic synchronized void method2() throws java.lang.InterruptedException;\n    descriptor: ()V\n    flags: ACC_PUBLIC, ACC_SYNCHRONIZED\n    Code:\n      stack=2, locals=1, args_size=1\n         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         3: ldc           #11                 // String 实例同步方法2开始\n         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n         8: ldc2_w        #12                 // long 3000l\n        11: invokestatic  #7                  // Method java/lang/Thread.sleep:(J)V\n        14: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n        17: ldc           #14                 // String 实例同步方法2结束\n        19: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n        22: return\n      LineNumberTable:\n        line 13: 0\n        line 14: 8\n        line 15: 14\n        line 16: 22\n    Exceptions:\n      throws java.lang.InterruptedException\n```\n可以看到，同步方法`flags`包含一个`ACC_SYNCHCRONIZED`标记符\n区别于同步代码块的监视器实现，同步方法通过使用 `ACC_SYNCHRONIZED` 标记符隐示的实现\n原理是通过方法调用指令检查该方法在常量池中是否包含 `ACC_SYNCHRONIZED` 标记符，如果有，JVM 要求线程在调用之前请求锁\n\n2. 同步代码块\n```java\npublic void method3() throws java.lang.InterruptedException;\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=3, args_size=1\n         0: aload_0\n         1: dup\n         2: astore_1\n         3: monitorenter\n         4: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         7: ldc           #15                 // String 同步代码块方法3开始\n         9: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n        12: ldc2_w        #12                 // long 3000l\n        15: invokestatic  #7                  // Method java/lang/Thread.sleep:(J)V\n        18: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n        21: ldc           #16                 // String 同步代码块方法3结束\n        23: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n        26: aload_1\n        27: monitorexit\n        28: goto          36\n        31: astore_2\n        32: aload_1\n        33: monitorexit\n        34: aload_2\n        35: athrow\n        36: return\n      Exception table:\n         from    to  target type\n             4    28    31   any\n            31    34    31   any\n      LineNumberTable:\n        line 19: 0\n        line 20: 4\n        line 21: 12\n        line 22: 18\n        line 23: 26\n        line 25: 36\n      StackMapTable: number_of_entries = 2\n        frame_type = 255 /* full_frame */\n          offset_delta = 31\n          locals = [ class SynchronizedDemo, class java/lang/Object ]\n          stack = [ class java/lang/Throwable ]\n        frame_type = 250 /* chop */\n          offset_delta = 4\n    Exceptions:\n      throws java.lang.InterruptedException\n```\n可以看到，在`flags`中没有了`ACC_SYNCHCRONIZED`标记符，并且在`Code`中包含了`monitorenter`和`monitorexit`，并且`monitorenter`在同步代码开始之前，`monitorexit`在同步代码结束之后。（可以看到，里面有两次`monitorexit`，这是因为第1次为同步正常退出释放锁；第2次为发生异步退出释放锁；这上面锁住的就是this。）\n\n简单说明一下`monitorenter`和`monitorexit`\n1. monitorenter：每个对象都是一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：\n    - 如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者；\n    - 如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1；（只有首先获得锁的线程才能允许继续获取多个锁）\n    - 如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权；\n\n2. monitorexit：执行monitorexit指令的线程必须是对象实例所对应的监视器的所有者，指令执行时，线程会先将进入次数-1，若-1之后进入次数变成0，则线程退出监视器(即释放锁)，其他阻塞在该监视器的线程可以重新竞争该监视器的所有权\n\n","source":"_posts/Java并发编程（六）之synchronized与volatile关键字.md","raw":"---\ntitle: Java并发编程（六）之synchronized关键字原理\ndate: 2020-04-20 09:34:04\ntags: [多线程,并发,Java]\n---\n\n之前我们说过在线程安全问题中如何使用`synchronized`关键字，现在我们看看，此关键字的原理是什么。\n\n在多线程并发编程中`synchronized`一直是元老级的应用，虽说之前Java的版本中，这是一个重量级的锁，但是`Java SE 1.6`版本对此关键字进行了各种优化，有些情况下，它就表现的没那么笨重了。\n\n先来看下利用synchronized实现同步的基础：Java中的每一个对象都可以作为锁。具体表现为以下3种形式。\n\n1. 对于普通同步方法，锁是当前实例对象。\n2. 对于静态同步方法，锁是当前类的Class对象。\n3. 对于同步方法块，锁是Synchonized括号里配置的对象。\n\n当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。若是线程在退出或者抛出异常的时候没有释放锁，那么共享资源将不会被释放，其他线程不能访问，程序就会陷入死锁。\n\n在JVM中，同步的实现是通过监视器锁，也就是`Monitor`对象的进入和退出实现的。要么显示得通过 `monitorenter` 和 `monitorexit` 指令实现，要么隐示地通过方法调用和返回指令实现。\n\n对于Java代码来说，或许最常用的同步实现就是同步方法。其中同步代码块是通过使用 `monitorenter` 和 `monitorexit` 实现的，而同步方法却是使用 `ACC_SYNCHRONIZED` 标记符隐示的实现，原理是通过方法调用指令检查该方法在常量池中是否包含 `ACC_SYNCHRONIZED` 标记符(这个我还没有去了解，所以就先略过，之后了解了再一起学习吧！)\n\n`monitorenter`指令是在编译后插入到同步代码块的开始位置，而`monitorexit`是插入到方法结束处和异常处，JVM要保证每个`monitorenter`必须有对应的`monitorexit`与之配对。任何对象都有一个`monitor`与之关联，当且一个`monitor`被持有后，它将处于锁定状态。线程执行到`monitorenter`指令时，将会尝试获取对象所对应的`monitor`的所有权，即尝试获得对象的锁。线程执行到`monitorexit`指令时，将会释放对象所对应的`monitor`的所有权。\n\n举个具体的例子看下\n\n```java\npublic class SynchronizedDemo {\n    public static synchronized void staticMethod() throws InterruptedException {\n        System.out.println(\"静态同步方法开始\");\n        Thread.sleep(1000);\n        System.out.println(\"静态同步方法结束\");\n    }\n    public synchronized void method() throws InterruptedException {\n        System.out.println(\"实例同步方法开始\");\n        Thread.sleep(1000);\n        System.out.println(\"实例同步方法结束\");\n    }\n    public synchronized void method2() throws InterruptedException {\n        System.out.println(\"实例同步方法2开始\");\n        Thread.sleep(3000);\n        System.out.println(\"实例同步方法2结束\");\n    }\n\n    public void method3() throws InterruptedException {\n        synchronized(this){\n            System.out.println(\"同步代码块方法3开始\");\n            Thread.sleep(3000);\n            System.out.println(\"同步代码块方法3结束\");\n        }\n        \n    }\n\n    public static void main(String[] args) {\n        final SynchronizedDemo synDemo = new SynchronizedDemo();\n        Thread thread1 = new Thread(() -> {\n            try {\n               synDemo.method();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        Thread thread2 = new Thread(() -> {\n            try {\n                synDemo.method2();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        thread1.start();\n        thread2.start();\n    }\n}\n```\n使用`javac SynchronizedDemo.java`编译一下，然后使用`javap -v SynchronizedDemo`反编译class文件，可以看到行号、本地变量表信息、反编译汇编代码，还会输出当前类用到的常量池等信息。\n\n我们看一下反编译之后的同步方法与同步代码块\n\n1. 同步方法\n```java\npublic synchronized void method2() throws java.lang.InterruptedException;\n    descriptor: ()V\n    flags: ACC_PUBLIC, ACC_SYNCHRONIZED\n    Code:\n      stack=2, locals=1, args_size=1\n         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         3: ldc           #11                 // String 实例同步方法2开始\n         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n         8: ldc2_w        #12                 // long 3000l\n        11: invokestatic  #7                  // Method java/lang/Thread.sleep:(J)V\n        14: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n        17: ldc           #14                 // String 实例同步方法2结束\n        19: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n        22: return\n      LineNumberTable:\n        line 13: 0\n        line 14: 8\n        line 15: 14\n        line 16: 22\n    Exceptions:\n      throws java.lang.InterruptedException\n```\n可以看到，同步方法`flags`包含一个`ACC_SYNCHCRONIZED`标记符\n区别于同步代码块的监视器实现，同步方法通过使用 `ACC_SYNCHRONIZED` 标记符隐示的实现\n原理是通过方法调用指令检查该方法在常量池中是否包含 `ACC_SYNCHRONIZED` 标记符，如果有，JVM 要求线程在调用之前请求锁\n\n2. 同步代码块\n```java\npublic void method3() throws java.lang.InterruptedException;\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=3, args_size=1\n         0: aload_0\n         1: dup\n         2: astore_1\n         3: monitorenter\n         4: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         7: ldc           #15                 // String 同步代码块方法3开始\n         9: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n        12: ldc2_w        #12                 // long 3000l\n        15: invokestatic  #7                  // Method java/lang/Thread.sleep:(J)V\n        18: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n        21: ldc           #16                 // String 同步代码块方法3结束\n        23: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n        26: aload_1\n        27: monitorexit\n        28: goto          36\n        31: astore_2\n        32: aload_1\n        33: monitorexit\n        34: aload_2\n        35: athrow\n        36: return\n      Exception table:\n         from    to  target type\n             4    28    31   any\n            31    34    31   any\n      LineNumberTable:\n        line 19: 0\n        line 20: 4\n        line 21: 12\n        line 22: 18\n        line 23: 26\n        line 25: 36\n      StackMapTable: number_of_entries = 2\n        frame_type = 255 /* full_frame */\n          offset_delta = 31\n          locals = [ class SynchronizedDemo, class java/lang/Object ]\n          stack = [ class java/lang/Throwable ]\n        frame_type = 250 /* chop */\n          offset_delta = 4\n    Exceptions:\n      throws java.lang.InterruptedException\n```\n可以看到，在`flags`中没有了`ACC_SYNCHCRONIZED`标记符，并且在`Code`中包含了`monitorenter`和`monitorexit`，并且`monitorenter`在同步代码开始之前，`monitorexit`在同步代码结束之后。（可以看到，里面有两次`monitorexit`，这是因为第1次为同步正常退出释放锁；第2次为发生异步退出释放锁；这上面锁住的就是this。）\n\n简单说明一下`monitorenter`和`monitorexit`\n1. monitorenter：每个对象都是一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：\n    - 如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者；\n    - 如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1；（只有首先获得锁的线程才能允许继续获取多个锁）\n    - 如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权；\n\n2. monitorexit：执行monitorexit指令的线程必须是对象实例所对应的监视器的所有者，指令执行时，线程会先将进入次数-1，若-1之后进入次数变成0，则线程退出监视器(即释放锁)，其他阻塞在该监视器的线程可以重新竞争该监视器的所有权\n\n","slug":"Java并发编程（六）之synchronized与volatile关键字","published":1,"updated":"2020-04-20T07:27:49.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79dd000c07k3gtbqdwbp","content":"<p>之前我们说过在线程安全问题中如何使用<code>synchronized</code>关键字，现在我们看看，此关键字的原理是什么。</p>\n<p>在多线程并发编程中<code>synchronized</code>一直是元老级的应用，虽说之前Java的版本中，这是一个重量级的锁，但是<code>Java SE 1.6</code>版本对此关键字进行了各种优化，有些情况下，它就表现的没那么笨重了。</p>\n<p>先来看下利用synchronized实现同步的基础：Java中的每一个对象都可以作为锁。具体表现为以下3种形式。</p>\n<ol>\n<li>对于普通同步方法，锁是当前实例对象。</li>\n<li>对于静态同步方法，锁是当前类的Class对象。</li>\n<li>对于同步方法块，锁是Synchonized括号里配置的对象。</li>\n</ol>\n<p>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。若是线程在退出或者抛出异常的时候没有释放锁，那么共享资源将不会被释放，其他线程不能访问，程序就会陷入死锁。</p>\n<p>在JVM中，同步的实现是通过监视器锁，也就是<code>Monitor</code>对象的进入和退出实现的。要么显示得通过 <code>monitorenter</code> 和 <code>monitorexit</code> 指令实现，要么隐示地通过方法调用和返回指令实现。</p>\n<p>对于Java代码来说，或许最常用的同步实现就是同步方法。其中同步代码块是通过使用 <code>monitorenter</code> 和 <code>monitorexit</code> 实现的，而同步方法却是使用 <code>ACC_SYNCHRONIZED</code> 标记符隐示的实现，原理是通过方法调用指令检查该方法在常量池中是否包含 <code>ACC_SYNCHRONIZED</code> 标记符(这个我还没有去了解，所以就先略过，之后了解了再一起学习吧！)</p>\n<p><code>monitorenter</code>指令是在编译后插入到同步代码块的开始位置，而<code>monitorexit</code>是插入到方法结束处和异常处，JVM要保证每个<code>monitorenter</code>必须有对应的<code>monitorexit</code>与之配对。任何对象都有一个<code>monitor</code>与之关联，当且一个<code>monitor</code>被持有后，它将处于锁定状态。线程执行到<code>monitorenter</code>指令时，将会尝试获取对象所对应的<code>monitor</code>的所有权，即尝试获得对象的锁。线程执行到<code>monitorexit</code>指令时，将会释放对象所对应的<code>monitor</code>的所有权。</p>\n<p>举个具体的例子看下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">staticMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"静态同步方法开始\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"静态同步方法结束\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"实例同步方法开始\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"实例同步方法结束\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"实例同步方法2开始\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"实例同步方法2结束\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"同步代码块方法3开始\"</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"同步代码块方法3结束\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> SynchronizedDemo synDemo = <span class=\"keyword\">new</span> SynchronizedDemo();</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               synDemo.method();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        Thread thread2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                synDemo.method2();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>javac SynchronizedDemo.java</code>编译一下，然后使用<code>javap -v SynchronizedDemo</code>反编译class文件，可以看到行号、本地变量表信息、反编译汇编代码，还会输出当前类用到的常量池等信息。</p>\n<p>我们看一下反编译之后的同步方法与同步代码块</p>\n<ol>\n<li><p>同步方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> java.lang.InterruptedException</span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">         3: ldc           #11                 // String 实例同步方法2开始</span><br><span class=\"line\">         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">         8: ldc2_w        #12                 // long 3000l</span><br><span class=\"line\">        11: invokestatic  #7                  // Method java/lang/Thread.sleep:(J)V</span><br><span class=\"line\">        14: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">        17: ldc           #14                 // String 实例同步方法2结束</span><br><span class=\"line\">        19: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">        <span class=\"number\">22</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">13</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">14</span>: <span class=\"number\">8</span></span><br><span class=\"line\">        line <span class=\"number\">15</span>: <span class=\"number\">14</span></span><br><span class=\"line\">        line <span class=\"number\">16</span>: <span class=\"number\">22</span></span><br><span class=\"line\">    Exceptions:</span><br><span class=\"line\">      <span class=\"keyword\">throws</span> java.lang.InterruptedException</span><br></pre></td></tr></table></figure>\n<p>可以看到，同步方法<code>flags</code>包含一个<code>ACC_SYNCHCRONIZED</code>标记符<br>区别于同步代码块的监视器实现，同步方法通过使用 <code>ACC_SYNCHRONIZED</code> 标记符隐示的实现<br>原理是通过方法调用指令检查该方法在常量池中是否包含 <code>ACC_SYNCHRONIZED</code> 标记符，如果有，JVM 要求线程在调用之前请求锁</p>\n</li>\n<li><p>同步代码块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> java.lang.InterruptedException</span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">3</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: dup</span><br><span class=\"line\">         <span class=\"number\">2</span>: astore_1</span><br><span class=\"line\">         <span class=\"number\">3</span>: monitorenter</span><br><span class=\"line\">         4: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">         7: ldc           #15                 // String 同步代码块方法3开始</span><br><span class=\"line\">         9: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">        12: ldc2_w        #12                 // long 3000l</span><br><span class=\"line\">        15: invokestatic  #7                  // Method java/lang/Thread.sleep:(J)V</span><br><span class=\"line\">        18: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">        21: ldc           #16                 // String 同步代码块方法3结束</span><br><span class=\"line\">        23: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">        <span class=\"number\">26</span>: aload_1</span><br><span class=\"line\">        <span class=\"number\">27</span>: monitorexit</span><br><span class=\"line\">        <span class=\"number\">28</span>: goto          <span class=\"number\">36</span></span><br><span class=\"line\">        <span class=\"number\">31</span>: astore_2</span><br><span class=\"line\">        <span class=\"number\">32</span>: aload_1</span><br><span class=\"line\">        <span class=\"number\">33</span>: monitorexit</span><br><span class=\"line\">        <span class=\"number\">34</span>: aload_2</span><br><span class=\"line\">        <span class=\"number\">35</span>: athrow</span><br><span class=\"line\">        <span class=\"number\">36</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      Exception table:</span><br><span class=\"line\">         from    to  target type</span><br><span class=\"line\">             <span class=\"number\">4</span>    <span class=\"number\">28</span>    <span class=\"number\">31</span>   any</span><br><span class=\"line\">            <span class=\"number\">31</span>    <span class=\"number\">34</span>    <span class=\"number\">31</span>   any</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">19</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">20</span>: <span class=\"number\">4</span></span><br><span class=\"line\">        line <span class=\"number\">21</span>: <span class=\"number\">12</span></span><br><span class=\"line\">        line <span class=\"number\">22</span>: <span class=\"number\">18</span></span><br><span class=\"line\">        line <span class=\"number\">23</span>: <span class=\"number\">26</span></span><br><span class=\"line\">        line <span class=\"number\">25</span>: <span class=\"number\">36</span></span><br><span class=\"line\">      StackMapTable: number_of_entries = <span class=\"number\">2</span></span><br><span class=\"line\">        frame_type = <span class=\"number\">255</span> <span class=\"comment\">/* full_frame */</span></span><br><span class=\"line\">          offset_delta = <span class=\"number\">31</span></span><br><span class=\"line\">          locals = [ class SynchronizedDemo, class java/lang/Object ]</span><br><span class=\"line\">          stack = [ class java/lang/Throwable ]</span><br><span class=\"line\">        frame_type = <span class=\"number\">250</span> <span class=\"comment\">/* chop */</span></span><br><span class=\"line\">          offset_delta = <span class=\"number\">4</span></span><br><span class=\"line\">    Exceptions:</span><br><span class=\"line\">      <span class=\"keyword\">throws</span> java.lang.InterruptedException</span><br></pre></td></tr></table></figure>\n<p>可以看到，在<code>flags</code>中没有了<code>ACC_SYNCHCRONIZED</code>标记符，并且在<code>Code</code>中包含了<code>monitorenter</code>和<code>monitorexit</code>，并且<code>monitorenter</code>在同步代码开始之前，<code>monitorexit</code>在同步代码结束之后。（可以看到，里面有两次<code>monitorexit</code>，这是因为第1次为同步正常退出释放锁；第2次为发生异步退出释放锁；这上面锁住的就是this。）</p>\n</li>\n</ol>\n<p>简单说明一下<code>monitorenter</code>和<code>monitorexit</code></p>\n<ol>\n<li><p>monitorenter：每个对象都是一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：</p>\n<ul>\n<li>如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者；</li>\n<li>如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1；（只有首先获得锁的线程才能允许继续获取多个锁）</li>\n<li>如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权；</li>\n</ul>\n</li>\n<li><p>monitorexit：执行monitorexit指令的线程必须是对象实例所对应的监视器的所有者，指令执行时，线程会先将进入次数-1，若-1之后进入次数变成0，则线程退出监视器(即释放锁)，其他阻塞在该监视器的线程可以重新竞争该监视器的所有权</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>之前我们说过在线程安全问题中如何使用<code>synchronized</code>关键字，现在我们看看，此关键字的原理是什么。</p>\n<p>在多线程并发编程中<code>synchronized</code>一直是元老级的应用，虽说之前Java的版本中，这是一个重量级的锁，但是<code>Java SE 1.6</code>版本对此关键字进行了各种优化，有些情况下，它就表现的没那么笨重了。</p>\n<p>先来看下利用synchronized实现同步的基础：Java中的每一个对象都可以作为锁。具体表现为以下3种形式。</p>\n<ol>\n<li>对于普通同步方法，锁是当前实例对象。</li>\n<li>对于静态同步方法，锁是当前类的Class对象。</li>\n<li>对于同步方法块，锁是Synchonized括号里配置的对象。</li>\n</ol>\n<p>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。若是线程在退出或者抛出异常的时候没有释放锁，那么共享资源将不会被释放，其他线程不能访问，程序就会陷入死锁。</p>\n<p>在JVM中，同步的实现是通过监视器锁，也就是<code>Monitor</code>对象的进入和退出实现的。要么显示得通过 <code>monitorenter</code> 和 <code>monitorexit</code> 指令实现，要么隐示地通过方法调用和返回指令实现。</p>\n<p>对于Java代码来说，或许最常用的同步实现就是同步方法。其中同步代码块是通过使用 <code>monitorenter</code> 和 <code>monitorexit</code> 实现的，而同步方法却是使用 <code>ACC_SYNCHRONIZED</code> 标记符隐示的实现，原理是通过方法调用指令检查该方法在常量池中是否包含 <code>ACC_SYNCHRONIZED</code> 标记符(这个我还没有去了解，所以就先略过，之后了解了再一起学习吧！)</p>\n<p><code>monitorenter</code>指令是在编译后插入到同步代码块的开始位置，而<code>monitorexit</code>是插入到方法结束处和异常处，JVM要保证每个<code>monitorenter</code>必须有对应的<code>monitorexit</code>与之配对。任何对象都有一个<code>monitor</code>与之关联，当且一个<code>monitor</code>被持有后，它将处于锁定状态。线程执行到<code>monitorenter</code>指令时，将会尝试获取对象所对应的<code>monitor</code>的所有权，即尝试获得对象的锁。线程执行到<code>monitorexit</code>指令时，将会释放对象所对应的<code>monitor</code>的所有权。</p>\n<p>举个具体的例子看下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">staticMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"静态同步方法开始\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"静态同步方法结束\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"实例同步方法开始\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"实例同步方法结束\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"实例同步方法2开始\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"实例同步方法2结束\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"同步代码块方法3开始\"</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"同步代码块方法3结束\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> SynchronizedDemo synDemo = <span class=\"keyword\">new</span> SynchronizedDemo();</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               synDemo.method();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        Thread thread2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                synDemo.method2();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>javac SynchronizedDemo.java</code>编译一下，然后使用<code>javap -v SynchronizedDemo</code>反编译class文件，可以看到行号、本地变量表信息、反编译汇编代码，还会输出当前类用到的常量池等信息。</p>\n<p>我们看一下反编译之后的同步方法与同步代码块</p>\n<ol>\n<li><p>同步方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> java.lang.InterruptedException</span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">         3: ldc           #11                 // String 实例同步方法2开始</span><br><span class=\"line\">         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">         8: ldc2_w        #12                 // long 3000l</span><br><span class=\"line\">        11: invokestatic  #7                  // Method java/lang/Thread.sleep:(J)V</span><br><span class=\"line\">        14: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">        17: ldc           #14                 // String 实例同步方法2结束</span><br><span class=\"line\">        19: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">        <span class=\"number\">22</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">13</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">14</span>: <span class=\"number\">8</span></span><br><span class=\"line\">        line <span class=\"number\">15</span>: <span class=\"number\">14</span></span><br><span class=\"line\">        line <span class=\"number\">16</span>: <span class=\"number\">22</span></span><br><span class=\"line\">    Exceptions:</span><br><span class=\"line\">      <span class=\"keyword\">throws</span> java.lang.InterruptedException</span><br></pre></td></tr></table></figure>\n<p>可以看到，同步方法<code>flags</code>包含一个<code>ACC_SYNCHCRONIZED</code>标记符<br>区别于同步代码块的监视器实现，同步方法通过使用 <code>ACC_SYNCHRONIZED</code> 标记符隐示的实现<br>原理是通过方法调用指令检查该方法在常量池中是否包含 <code>ACC_SYNCHRONIZED</code> 标记符，如果有，JVM 要求线程在调用之前请求锁</p>\n</li>\n<li><p>同步代码块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> java.lang.InterruptedException</span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">3</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: dup</span><br><span class=\"line\">         <span class=\"number\">2</span>: astore_1</span><br><span class=\"line\">         <span class=\"number\">3</span>: monitorenter</span><br><span class=\"line\">         4: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">         7: ldc           #15                 // String 同步代码块方法3开始</span><br><span class=\"line\">         9: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">        12: ldc2_w        #12                 // long 3000l</span><br><span class=\"line\">        15: invokestatic  #7                  // Method java/lang/Thread.sleep:(J)V</span><br><span class=\"line\">        18: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">        21: ldc           #16                 // String 同步代码块方法3结束</span><br><span class=\"line\">        23: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">        <span class=\"number\">26</span>: aload_1</span><br><span class=\"line\">        <span class=\"number\">27</span>: monitorexit</span><br><span class=\"line\">        <span class=\"number\">28</span>: goto          <span class=\"number\">36</span></span><br><span class=\"line\">        <span class=\"number\">31</span>: astore_2</span><br><span class=\"line\">        <span class=\"number\">32</span>: aload_1</span><br><span class=\"line\">        <span class=\"number\">33</span>: monitorexit</span><br><span class=\"line\">        <span class=\"number\">34</span>: aload_2</span><br><span class=\"line\">        <span class=\"number\">35</span>: athrow</span><br><span class=\"line\">        <span class=\"number\">36</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      Exception table:</span><br><span class=\"line\">         from    to  target type</span><br><span class=\"line\">             <span class=\"number\">4</span>    <span class=\"number\">28</span>    <span class=\"number\">31</span>   any</span><br><span class=\"line\">            <span class=\"number\">31</span>    <span class=\"number\">34</span>    <span class=\"number\">31</span>   any</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">19</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">20</span>: <span class=\"number\">4</span></span><br><span class=\"line\">        line <span class=\"number\">21</span>: <span class=\"number\">12</span></span><br><span class=\"line\">        line <span class=\"number\">22</span>: <span class=\"number\">18</span></span><br><span class=\"line\">        line <span class=\"number\">23</span>: <span class=\"number\">26</span></span><br><span class=\"line\">        line <span class=\"number\">25</span>: <span class=\"number\">36</span></span><br><span class=\"line\">      StackMapTable: number_of_entries = <span class=\"number\">2</span></span><br><span class=\"line\">        frame_type = <span class=\"number\">255</span> <span class=\"comment\">/* full_frame */</span></span><br><span class=\"line\">          offset_delta = <span class=\"number\">31</span></span><br><span class=\"line\">          locals = [ class SynchronizedDemo, class java/lang/Object ]</span><br><span class=\"line\">          stack = [ class java/lang/Throwable ]</span><br><span class=\"line\">        frame_type = <span class=\"number\">250</span> <span class=\"comment\">/* chop */</span></span><br><span class=\"line\">          offset_delta = <span class=\"number\">4</span></span><br><span class=\"line\">    Exceptions:</span><br><span class=\"line\">      <span class=\"keyword\">throws</span> java.lang.InterruptedException</span><br></pre></td></tr></table></figure>\n<p>可以看到，在<code>flags</code>中没有了<code>ACC_SYNCHCRONIZED</code>标记符，并且在<code>Code</code>中包含了<code>monitorenter</code>和<code>monitorexit</code>，并且<code>monitorenter</code>在同步代码开始之前，<code>monitorexit</code>在同步代码结束之后。（可以看到，里面有两次<code>monitorexit</code>，这是因为第1次为同步正常退出释放锁；第2次为发生异步退出释放锁；这上面锁住的就是this。）</p>\n</li>\n</ol>\n<p>简单说明一下<code>monitorenter</code>和<code>monitorexit</code></p>\n<ol>\n<li><p>monitorenter：每个对象都是一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：</p>\n<ul>\n<li>如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者；</li>\n<li>如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1；（只有首先获得锁的线程才能允许继续获取多个锁）</li>\n<li>如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权；</li>\n</ul>\n</li>\n<li><p>monitorexit：执行monitorexit指令的线程必须是对象实例所对应的监视器的所有者，指令执行时，线程会先将进入次数-1，若-1之后进入次数变成0，则线程退出监视器(即释放锁)，其他阻塞在该监视器的线程可以重新竞争该监视器的所有权</p>\n</li>\n</ol>\n"},{"title":"LeetCode-有序数组中的单一元素","date":"2019-10-20T11:46:34.000Z","_content":"\n今天来讲一道三月份面试时候遇到的算法题，三月份遇到的，最近刷题又遇到，刚好也开始慢慢地写博客了，就记录下来吧。\n\n> 题目描述\n给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。\n\n- 示例一：\n```\n输入: [1,1,2,3,3,4,4,8,8]\n输出: 2\n```\n\n- 示例二：\n```\n输入: [3,3,7,7,10,11,11]\n输出: 10\n```\n- 注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。\n\n下面来看看如何解决\n\n首先，我们看到，题目中说的是`有序数组`，其次，时间复杂度要求`O(log n)`，最后，查找出这个数，是一个查找问题。根据这些条件，我们想一想，适用于有序数组，时间复杂度为O(log n)的查找算法是哪一个？就是我们之前讲过的`二分查找`。\n\n那么如何利用二分查找解决这个问题呢？难点是，二分搜索后怎么判断是左半边还是右半边。解决方式是通过mid的奇偶性。\n\n1. 令 key 为 Single Element 在数组中的位置。如果 m 为偶数，并且 m + 1 < key，那么 nums[m] == nums[m + 1]；m + 1 >= key，那么 nums[m] != nums[m + 1]；\n\n2. 从上面的规律可以知道，如果 nums[m] == nums[m + 1]，那么 key 所在的数组位置为 [m + 2, h]，此时令 l = m + 2；如果 nums[m] != nums[m + 1]，那么 key 所在的数组位置为 [l, m]，此时令 h = m；\n\n3. 因为 h 的赋值表达式为 h = m，那么循环条件也就只能使用 l < h 这种形式；\n\n代码如下：\n\n```java\npublic int singleNonDuplicate(int[] nums) {\n    int l = 0, h = nums.length - 1;\n    while (l < h) {\n        int m = l + (h - l) / 2;\n        if (m % 2 == 1)\n            m--;   // 保证 l/h/m 都在偶数位，使得查找区间大小一直都是奇数\n        if (nums[m] == nums[m + 1])\n            l = m + 2;\n        else\n            h = m;\n    }\n    return nums[l];\n}\n```\n\n这个题还有一个变种，当我们不考虑时间复杂度以及有序数组的条件时，如何快速找出数组中的单一元素呢？\n- 示例：\n```\n输入: [1,1,2,3,4,4,3,8,8]\n输出: 2\n```\n先看代码：\n\n```java\npublic static int singleNonDuplicate(int[] nums) {\n    int res = 0;\n    for(int num : nums){\n        res = res^num;\n    }\n    return res;\n}\n```\n\n如代码所示，我们又用到了以前讲过的神奇的位运算，这次用到的位运算是`异或`，运算符是`^`。\n\n异或运算有什么特点呢？\n0^0=0，1^0=1，0^1=1，1^1=0,也就是同为0，异为1。0异或任何数字，都会的到这个数字本身。\n\n于是上面代码运行的过程大家可以自己用异或算一下，原理就是，数组中成对的数字经过异或运算之后的结果，也就是变量`res`变为了0，然后0再与数组中的单一元素进行异或运算，变量`res`就变为了这个单一元素，于是我们就得到了数组中的单一元素。\n\n\n","source":"_posts/LeetCode-有序数组中的单一元素.md","raw":"---\ntitle: LeetCode-有序数组中的单一元素\ndate: 2019-10-20 19:46:34\ntags: [算法,LeetCode,面试题]\n---\n\n今天来讲一道三月份面试时候遇到的算法题，三月份遇到的，最近刷题又遇到，刚好也开始慢慢地写博客了，就记录下来吧。\n\n> 题目描述\n给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。\n\n- 示例一：\n```\n输入: [1,1,2,3,3,4,4,8,8]\n输出: 2\n```\n\n- 示例二：\n```\n输入: [3,3,7,7,10,11,11]\n输出: 10\n```\n- 注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。\n\n下面来看看如何解决\n\n首先，我们看到，题目中说的是`有序数组`，其次，时间复杂度要求`O(log n)`，最后，查找出这个数，是一个查找问题。根据这些条件，我们想一想，适用于有序数组，时间复杂度为O(log n)的查找算法是哪一个？就是我们之前讲过的`二分查找`。\n\n那么如何利用二分查找解决这个问题呢？难点是，二分搜索后怎么判断是左半边还是右半边。解决方式是通过mid的奇偶性。\n\n1. 令 key 为 Single Element 在数组中的位置。如果 m 为偶数，并且 m + 1 < key，那么 nums[m] == nums[m + 1]；m + 1 >= key，那么 nums[m] != nums[m + 1]；\n\n2. 从上面的规律可以知道，如果 nums[m] == nums[m + 1]，那么 key 所在的数组位置为 [m + 2, h]，此时令 l = m + 2；如果 nums[m] != nums[m + 1]，那么 key 所在的数组位置为 [l, m]，此时令 h = m；\n\n3. 因为 h 的赋值表达式为 h = m，那么循环条件也就只能使用 l < h 这种形式；\n\n代码如下：\n\n```java\npublic int singleNonDuplicate(int[] nums) {\n    int l = 0, h = nums.length - 1;\n    while (l < h) {\n        int m = l + (h - l) / 2;\n        if (m % 2 == 1)\n            m--;   // 保证 l/h/m 都在偶数位，使得查找区间大小一直都是奇数\n        if (nums[m] == nums[m + 1])\n            l = m + 2;\n        else\n            h = m;\n    }\n    return nums[l];\n}\n```\n\n这个题还有一个变种，当我们不考虑时间复杂度以及有序数组的条件时，如何快速找出数组中的单一元素呢？\n- 示例：\n```\n输入: [1,1,2,3,4,4,3,8,8]\n输出: 2\n```\n先看代码：\n\n```java\npublic static int singleNonDuplicate(int[] nums) {\n    int res = 0;\n    for(int num : nums){\n        res = res^num;\n    }\n    return res;\n}\n```\n\n如代码所示，我们又用到了以前讲过的神奇的位运算，这次用到的位运算是`异或`，运算符是`^`。\n\n异或运算有什么特点呢？\n0^0=0，1^0=1，0^1=1，1^1=0,也就是同为0，异为1。0异或任何数字，都会的到这个数字本身。\n\n于是上面代码运行的过程大家可以自己用异或算一下，原理就是，数组中成对的数字经过异或运算之后的结果，也就是变量`res`变为了0，然后0再与数组中的单一元素进行异或运算，变量`res`就变为了这个单一元素，于是我们就得到了数组中的单一元素。\n\n\n","slug":"LeetCode-有序数组中的单一元素","published":1,"updated":"2019-10-20T13:19:24.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79de000e07k36jub5qzj","content":"<p>今天来讲一道三月份面试时候遇到的算法题，三月份遇到的，最近刷题又遇到，刚好也开始慢慢地写博客了，就记录下来吧。</p>\n<blockquote>\n<p>题目描述<br>给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</p>\n</blockquote>\n<ul>\n<li><p>示例一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,1,2,3,3,4,4,8,8]</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例二：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [3,3,7,7,10,11,11]</span><br><span class=\"line\">输出: 10</span><br></pre></td></tr></table></figure></li>\n<li><p>注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。</p>\n</li>\n</ul>\n<p>下面来看看如何解决</p>\n<p>首先，我们看到，题目中说的是<code>有序数组</code>，其次，时间复杂度要求<code>O(log n)</code>，最后，查找出这个数，是一个查找问题。根据这些条件，我们想一想，适用于有序数组，时间复杂度为O(log n)的查找算法是哪一个？就是我们之前讲过的<code>二分查找</code>。</p>\n<p>那么如何利用二分查找解决这个问题呢？难点是，二分搜索后怎么判断是左半边还是右半边。解决方式是通过mid的奇偶性。</p>\n<ol>\n<li><p>令 key 为 Single Element 在数组中的位置。如果 m 为偶数，并且 m + 1 &lt; key，那么 nums[m] == nums[m + 1]；m + 1 &gt;= key，那么 nums[m] != nums[m + 1]；</p>\n</li>\n<li><p>从上面的规律可以知道，如果 nums[m] == nums[m + 1]，那么 key 所在的数组位置为 [m + 2, h]，此时令 l = m + 2；如果 nums[m] != nums[m + 1]，那么 key 所在的数组位置为 [l, m]，此时令 h = m；</p>\n</li>\n<li><p>因为 h 的赋值表达式为 h = m，那么循环条件也就只能使用 l &lt; h 这种形式；</p>\n</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNonDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, h = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; h) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = l + (h - l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m % <span class=\"number\">2</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">            m--;   <span class=\"comment\">// 保证 l/h/m 都在偶数位，使得查找区间大小一直都是奇数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[m] == nums[m + <span class=\"number\">1</span>])</span><br><span class=\"line\">            l = m + <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            h = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[l];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个题还有一个变种，当我们不考虑时间复杂度以及有序数组的条件时，如何快速找出数组中的单一元素呢？</p>\n<ul>\n<li>示例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,1,2,3,4,4,3,8,8]</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n先看代码：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNonDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num : nums)&#123;</span><br><span class=\"line\">        res = res^num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如代码所示，我们又用到了以前讲过的神奇的位运算，这次用到的位运算是<code>异或</code>，运算符是<code>^</code>。</p>\n<p>异或运算有什么特点呢？<br>0^0=0，1^0=1，0^1=1，1^1=0,也就是同为0，异为1。0异或任何数字，都会的到这个数字本身。</p>\n<p>于是上面代码运行的过程大家可以自己用异或算一下，原理就是，数组中成对的数字经过异或运算之后的结果，也就是变量<code>res</code>变为了0，然后0再与数组中的单一元素进行异或运算，变量<code>res</code>就变为了这个单一元素，于是我们就得到了数组中的单一元素。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天来讲一道三月份面试时候遇到的算法题，三月份遇到的，最近刷题又遇到，刚好也开始慢慢地写博客了，就记录下来吧。</p>\n<blockquote>\n<p>题目描述<br>给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</p>\n</blockquote>\n<ul>\n<li><p>示例一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,1,2,3,3,4,4,8,8]</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例二：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [3,3,7,7,10,11,11]</span><br><span class=\"line\">输出: 10</span><br></pre></td></tr></table></figure></li>\n<li><p>注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。</p>\n</li>\n</ul>\n<p>下面来看看如何解决</p>\n<p>首先，我们看到，题目中说的是<code>有序数组</code>，其次，时间复杂度要求<code>O(log n)</code>，最后，查找出这个数，是一个查找问题。根据这些条件，我们想一想，适用于有序数组，时间复杂度为O(log n)的查找算法是哪一个？就是我们之前讲过的<code>二分查找</code>。</p>\n<p>那么如何利用二分查找解决这个问题呢？难点是，二分搜索后怎么判断是左半边还是右半边。解决方式是通过mid的奇偶性。</p>\n<ol>\n<li><p>令 key 为 Single Element 在数组中的位置。如果 m 为偶数，并且 m + 1 &lt; key，那么 nums[m] == nums[m + 1]；m + 1 &gt;= key，那么 nums[m] != nums[m + 1]；</p>\n</li>\n<li><p>从上面的规律可以知道，如果 nums[m] == nums[m + 1]，那么 key 所在的数组位置为 [m + 2, h]，此时令 l = m + 2；如果 nums[m] != nums[m + 1]，那么 key 所在的数组位置为 [l, m]，此时令 h = m；</p>\n</li>\n<li><p>因为 h 的赋值表达式为 h = m，那么循环条件也就只能使用 l &lt; h 这种形式；</p>\n</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNonDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, h = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; h) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = l + (h - l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m % <span class=\"number\">2</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">            m--;   <span class=\"comment\">// 保证 l/h/m 都在偶数位，使得查找区间大小一直都是奇数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[m] == nums[m + <span class=\"number\">1</span>])</span><br><span class=\"line\">            l = m + <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            h = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[l];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个题还有一个变种，当我们不考虑时间复杂度以及有序数组的条件时，如何快速找出数组中的单一元素呢？</p>\n<ul>\n<li>示例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,1,2,3,4,4,3,8,8]</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n先看代码：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNonDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num : nums)&#123;</span><br><span class=\"line\">        res = res^num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如代码所示，我们又用到了以前讲过的神奇的位运算，这次用到的位运算是<code>异或</code>，运算符是<code>^</code>。</p>\n<p>异或运算有什么特点呢？<br>0^0=0，1^0=1，0^1=1，1^1=0,也就是同为0，异为1。0异或任何数字，都会的到这个数字本身。</p>\n<p>于是上面代码运行的过程大家可以自己用异或算一下，原理就是，数组中成对的数字经过异或运算之后的结果，也就是变量<code>res</code>变为了0，然后0再与数组中的单一元素进行异或运算，变量<code>res</code>就变为了这个单一元素，于是我们就得到了数组中的单一元素。</p>\n"},{"title":"Java并发编程（四）之线程安全问题","date":"2019-11-24T11:24:41.000Z","_content":"\n讲完创建线程的方法，接下来我们学习一下多线程编程中会遇到的线程安全问题。\n\n谈到线程安全，就会涉及到共享资源，所谓共享资源，就是指该资源被多个线程使用。线程安全问题就是，当多个线程同时读写同一个共享资源的时候，没有加任何同步措施，导致出现脏数据，以及预料之外的结果。\n\n例如下面代码：\n\n```java\npublic class ThreadSafeTest {\n    public static int count = 5;\n    public static void main(String[] args) {\n        MyThreadSafeTest thread1 = new MyThreadSafeTest();\n        MyThreadSafeTest thread2 = new MyThreadSafeTest();\n        thread1.start();\n        thread2.start();\n    }\n}\n\nclass MyThreadSafeTest extends Thread{\n\n    @Override\n    public void run() {   \n        while(ThreadSafeTest.count>0){\n            try {\n                Thread.sleep(500);\n                sale();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            \n        }   \n    }\n\n    public void sale() {\n        if (ThreadSafeTest.count > 0) {\n            --ThreadSafeTest.count;\n            System.out.println(Thread.currentThread().getName() + \",出售第\" + (5 - ThreadSafeTest.count) + \"张票\");\n        }\n        \n    }\n}\n```\n\n```java\nThread-1,出售第2张票\nThread-0,出售第2张票\nThread-1,出售第3张票\nThread-0,出售第4张票\nThread-1,出售第5张票\n```\n\n我们模拟了多窗口售票的问题，每个线程就是一个窗口。可以看到，会出现一张票卖出多次的情况，这显然是不合理的。\n\n这是由于什么原因导致的呢？要查找其原因，首先我们需要了解Java的内存模型。如下图：\n\n![Java内存模型](/pic_doc/java_mem_model.jpg) \n\nJava内存模型规定，将所有的变量都放在主内存中，当线程使用变量的时候从主内存中将变量复制一份到自己的工作空间或者说工作内存，线程读写变量时操作的是自己工作内存中的变量。\n\nJava内存模型是一个抽象的概念，实际实现中的工作内存是什么样子呢？\n\n![](/pic_doc/cpu_mem_model.jpg) \n\n图中所示是一个双核CPU的架构，Java内存模型里面的工作内存就对应这里的L1或者L2或者CPU的寄存器。\n\n当一个线程操作共享变量时，它首先从主内存复制共享变量到自己的工作内存，对工作内存里的变量进行处理，处理完后将变最值更新到主内存。\n\n那么假如线程A和线程B同时处理一个共享变量，会出现什么情况？我们使用图中所示CPU架构，假设线程A和线程B使用不同CPU执行，并且当前两级Cache都为空。那么这时候由于Cache的存在，将会导致内存不可见问题，具体看下面的分析。\n\n1. 线程A首先获取共享变量X的值，由于两级Cache都没有命中，所以加教木中X的值，假如为0。然后把X=0的值缓存到两级缓存，线程A修改X的值为1，然后将其写入两级Cache，并且刷新到主内存。线程A操作完毕后，线程A所在CPU的两级Cache内和主内存里面的X的值都是1。\n2. 线程B获取X的值，首先一级缓存没有命中，然后看二级缓存，二级缓存命的所以返回X=1，到这里一切都是正常的，因为这时候主内存中也是X=1。然后线程B修改X的值为2,并将其存放线程B所在的一级Cache和共享二级Cache中，最后更新主内存中X的值为2，到这里一切都是好的。\n3. 线程A这次又需要修改X的值，获取时一级缓存命中，并且X=1，到这里问题与出现了，明明线程B已经把X的值修改为了2，为何线程A获取的还是1呢？这就是共享变量的内存不可见问题，也就是线程B写入的值对线程A不可见。\n\n了解了这些，我们就会明白，上述代码中，一张票卖多次的问题是如何导致的了，就是因为`thread1`与`thread2`由于内存模型导致的共享变量`count`内存不可见。\n\n那么如何解决呢？\n\n大学时候我们学过使用`synchronized`加锁来解决线程安全问题，例如上述卖票代码改为如下：\n\n```java\npublic class ThreadSafeTest {\n    public static int count = 5;\n    public static String lock = \"lock\";\n    public static void main(String[] args) {\n        MyThreadSafeTest thread1 = new MyThreadSafeTest();\n        MyThreadSafeTest thread2 = new MyThreadSafeTest();\n        thread1.start();\n        thread2.start();\n    }\n}\n\nclass MyThreadSafeTest extends Thread{\n\n    @Override\n    public void run() {   \n        while(ThreadSafeTest.count>0){\n            try {\n                Thread.sleep(500);\n                sale();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            \n        }   \n    }\n\n    public void sale() {\n        synchronized(ThreadSafeTest.lock){\n            if (ThreadSafeTest.count > 0) {\n                --ThreadSafeTest.count;\n                System.out.println(Thread.currentThread().getName() + \",出售第\" + (5 - ThreadSafeTest.count) + \"张票\");\n            }\n        }\n        \n    }\n}\n```\n```java\nThread-0,出售第1张票\nThread-1,出售第2张票\nThread-0,出售第3张票\nThread-1,出售第4张票\nThread-0,出售第5张票\n```\n\n我们对卖票的操作进行了加锁，加锁之后，就没有出现共享变量混乱的问题，那么`synchronized`到底是什么呢？怎么实现的共享变量内存可见呢？\n\n`synchronized`块是Java提供的一种原子性内置锁，Java中的每个对象都可以把它当做一个同步锁来使用，这些Java内置的使用者看不到的锁被称为内部锁，也叫作监视器锁，线程的执行代码在进入`synchronized`代码块前会自动获取内部锁，这时候其他线程访问该同步代码块时会被阻塞挂起。拿到内部锁的线程会在正常退出同步代码块或者抛出异常后或者在同步块内调用了该内置锁资源的`wait`系列方法时释放该内置锁。内置锁是排它锁，也就是当一个线程获取这个锁后，其他线程必须等待该线程释放锁后才能获取该锁。\n\n由于共享变量内存可见性问题主要是由于线程的工作内存导致的，使用`synchronized`的时候，它的内存语义是什么样的呢？（也就是加锁和释放锁的语义）。\n\n进入`synchronized`块的内存语义（加锁）是把在`synchronized`共内使用到的共享变量从线程的工作内存中清除，这样在`synchronized`块内使用到该变量时就不会从线程的工作内存中获取，而是直接从主内存中获取。退出`synchronized`块的内存语义（释放锁）是把在`synchronized`块内对共享变量的修改刷新到主内存。\n\n除可以解决共享变量内存可见性问题外，synchronized 经常被用来实现原子性操作。另外请注意，synchronized 关键字会引起线程上下文切换并带来线程调度开销，所以使用锁太笨重，尤其是在Java1.6之前，没有对synchronized进行优化。对于内存可见性的问题，Java还提供了一种弱同步，也就是使用 `volatile` 关键字，这个由于篇幅问题，下一篇文章再讲吧。\n\n\n","source":"_posts/Java并发编程（四）之线程安全问题.md","raw":"---\ntitle: Java并发编程（四）之线程安全问题\ndate: 2019-11-24 19:24:41\ntags: [多线程,并发,Java]\n---\n\n讲完创建线程的方法，接下来我们学习一下多线程编程中会遇到的线程安全问题。\n\n谈到线程安全，就会涉及到共享资源，所谓共享资源，就是指该资源被多个线程使用。线程安全问题就是，当多个线程同时读写同一个共享资源的时候，没有加任何同步措施，导致出现脏数据，以及预料之外的结果。\n\n例如下面代码：\n\n```java\npublic class ThreadSafeTest {\n    public static int count = 5;\n    public static void main(String[] args) {\n        MyThreadSafeTest thread1 = new MyThreadSafeTest();\n        MyThreadSafeTest thread2 = new MyThreadSafeTest();\n        thread1.start();\n        thread2.start();\n    }\n}\n\nclass MyThreadSafeTest extends Thread{\n\n    @Override\n    public void run() {   \n        while(ThreadSafeTest.count>0){\n            try {\n                Thread.sleep(500);\n                sale();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            \n        }   \n    }\n\n    public void sale() {\n        if (ThreadSafeTest.count > 0) {\n            --ThreadSafeTest.count;\n            System.out.println(Thread.currentThread().getName() + \",出售第\" + (5 - ThreadSafeTest.count) + \"张票\");\n        }\n        \n    }\n}\n```\n\n```java\nThread-1,出售第2张票\nThread-0,出售第2张票\nThread-1,出售第3张票\nThread-0,出售第4张票\nThread-1,出售第5张票\n```\n\n我们模拟了多窗口售票的问题，每个线程就是一个窗口。可以看到，会出现一张票卖出多次的情况，这显然是不合理的。\n\n这是由于什么原因导致的呢？要查找其原因，首先我们需要了解Java的内存模型。如下图：\n\n![Java内存模型](/pic_doc/java_mem_model.jpg) \n\nJava内存模型规定，将所有的变量都放在主内存中，当线程使用变量的时候从主内存中将变量复制一份到自己的工作空间或者说工作内存，线程读写变量时操作的是自己工作内存中的变量。\n\nJava内存模型是一个抽象的概念，实际实现中的工作内存是什么样子呢？\n\n![](/pic_doc/cpu_mem_model.jpg) \n\n图中所示是一个双核CPU的架构，Java内存模型里面的工作内存就对应这里的L1或者L2或者CPU的寄存器。\n\n当一个线程操作共享变量时，它首先从主内存复制共享变量到自己的工作内存，对工作内存里的变量进行处理，处理完后将变最值更新到主内存。\n\n那么假如线程A和线程B同时处理一个共享变量，会出现什么情况？我们使用图中所示CPU架构，假设线程A和线程B使用不同CPU执行，并且当前两级Cache都为空。那么这时候由于Cache的存在，将会导致内存不可见问题，具体看下面的分析。\n\n1. 线程A首先获取共享变量X的值，由于两级Cache都没有命中，所以加教木中X的值，假如为0。然后把X=0的值缓存到两级缓存，线程A修改X的值为1，然后将其写入两级Cache，并且刷新到主内存。线程A操作完毕后，线程A所在CPU的两级Cache内和主内存里面的X的值都是1。\n2. 线程B获取X的值，首先一级缓存没有命中，然后看二级缓存，二级缓存命的所以返回X=1，到这里一切都是正常的，因为这时候主内存中也是X=1。然后线程B修改X的值为2,并将其存放线程B所在的一级Cache和共享二级Cache中，最后更新主内存中X的值为2，到这里一切都是好的。\n3. 线程A这次又需要修改X的值，获取时一级缓存命中，并且X=1，到这里问题与出现了，明明线程B已经把X的值修改为了2，为何线程A获取的还是1呢？这就是共享变量的内存不可见问题，也就是线程B写入的值对线程A不可见。\n\n了解了这些，我们就会明白，上述代码中，一张票卖多次的问题是如何导致的了，就是因为`thread1`与`thread2`由于内存模型导致的共享变量`count`内存不可见。\n\n那么如何解决呢？\n\n大学时候我们学过使用`synchronized`加锁来解决线程安全问题，例如上述卖票代码改为如下：\n\n```java\npublic class ThreadSafeTest {\n    public static int count = 5;\n    public static String lock = \"lock\";\n    public static void main(String[] args) {\n        MyThreadSafeTest thread1 = new MyThreadSafeTest();\n        MyThreadSafeTest thread2 = new MyThreadSafeTest();\n        thread1.start();\n        thread2.start();\n    }\n}\n\nclass MyThreadSafeTest extends Thread{\n\n    @Override\n    public void run() {   \n        while(ThreadSafeTest.count>0){\n            try {\n                Thread.sleep(500);\n                sale();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            \n        }   \n    }\n\n    public void sale() {\n        synchronized(ThreadSafeTest.lock){\n            if (ThreadSafeTest.count > 0) {\n                --ThreadSafeTest.count;\n                System.out.println(Thread.currentThread().getName() + \",出售第\" + (5 - ThreadSafeTest.count) + \"张票\");\n            }\n        }\n        \n    }\n}\n```\n```java\nThread-0,出售第1张票\nThread-1,出售第2张票\nThread-0,出售第3张票\nThread-1,出售第4张票\nThread-0,出售第5张票\n```\n\n我们对卖票的操作进行了加锁，加锁之后，就没有出现共享变量混乱的问题，那么`synchronized`到底是什么呢？怎么实现的共享变量内存可见呢？\n\n`synchronized`块是Java提供的一种原子性内置锁，Java中的每个对象都可以把它当做一个同步锁来使用，这些Java内置的使用者看不到的锁被称为内部锁，也叫作监视器锁，线程的执行代码在进入`synchronized`代码块前会自动获取内部锁，这时候其他线程访问该同步代码块时会被阻塞挂起。拿到内部锁的线程会在正常退出同步代码块或者抛出异常后或者在同步块内调用了该内置锁资源的`wait`系列方法时释放该内置锁。内置锁是排它锁，也就是当一个线程获取这个锁后，其他线程必须等待该线程释放锁后才能获取该锁。\n\n由于共享变量内存可见性问题主要是由于线程的工作内存导致的，使用`synchronized`的时候，它的内存语义是什么样的呢？（也就是加锁和释放锁的语义）。\n\n进入`synchronized`块的内存语义（加锁）是把在`synchronized`共内使用到的共享变量从线程的工作内存中清除，这样在`synchronized`块内使用到该变量时就不会从线程的工作内存中获取，而是直接从主内存中获取。退出`synchronized`块的内存语义（释放锁）是把在`synchronized`块内对共享变量的修改刷新到主内存。\n\n除可以解决共享变量内存可见性问题外，synchronized 经常被用来实现原子性操作。另外请注意，synchronized 关键字会引起线程上下文切换并带来线程调度开销，所以使用锁太笨重，尤其是在Java1.6之前，没有对synchronized进行优化。对于内存可见性的问题，Java还提供了一种弱同步，也就是使用 `volatile` 关键字，这个由于篇幅问题，下一篇文章再讲吧。\n\n\n","slug":"Java并发编程（四）之线程安全问题","published":1,"updated":"2019-11-25T14:28:58.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79df000g07k3dd5gecax","content":"<p>讲完创建线程的方法，接下来我们学习一下多线程编程中会遇到的线程安全问题。</p>\n<p>谈到线程安全，就会涉及到共享资源，所谓共享资源，就是指该资源被多个线程使用。线程安全问题就是，当多个线程同时读写同一个共享资源的时候，没有加任何同步措施，导致出现脏数据，以及预料之外的结果。</p>\n<p>例如下面代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadSafeTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyThreadSafeTest thread1 = <span class=\"keyword\">new</span> MyThreadSafeTest();</span><br><span class=\"line\">        MyThreadSafeTest thread2 = <span class=\"keyword\">new</span> MyThreadSafeTest();</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadSafeTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;   </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ThreadSafeTest.count&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">                sale();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sale</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ThreadSafeTest.count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            --ThreadSafeTest.count;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\",出售第\"</span> + (<span class=\"number\">5</span> - ThreadSafeTest.count) + <span class=\"string\">\"张票\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-<span class=\"number\">1</span>,出售第<span class=\"number\">2</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">0</span>,出售第<span class=\"number\">2</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">1</span>,出售第<span class=\"number\">3</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">0</span>,出售第<span class=\"number\">4</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">1</span>,出售第<span class=\"number\">5</span>张票</span><br></pre></td></tr></table></figure>\n\n<p>我们模拟了多窗口售票的问题，每个线程就是一个窗口。可以看到，会出现一张票卖出多次的情况，这显然是不合理的。</p>\n<p>这是由于什么原因导致的呢？要查找其原因，首先我们需要了解Java的内存模型。如下图：</p>\n<p><img src=\"/pic_doc/java_mem_model.jpg\" alt=\"Java内存模型\"> </p>\n<p>Java内存模型规定，将所有的变量都放在主内存中，当线程使用变量的时候从主内存中将变量复制一份到自己的工作空间或者说工作内存，线程读写变量时操作的是自己工作内存中的变量。</p>\n<p>Java内存模型是一个抽象的概念，实际实现中的工作内存是什么样子呢？</p>\n<p><img src=\"/pic_doc/cpu_mem_model.jpg\" alt=\"\"> </p>\n<p>图中所示是一个双核CPU的架构，Java内存模型里面的工作内存就对应这里的L1或者L2或者CPU的寄存器。</p>\n<p>当一个线程操作共享变量时，它首先从主内存复制共享变量到自己的工作内存，对工作内存里的变量进行处理，处理完后将变最值更新到主内存。</p>\n<p>那么假如线程A和线程B同时处理一个共享变量，会出现什么情况？我们使用图中所示CPU架构，假设线程A和线程B使用不同CPU执行，并且当前两级Cache都为空。那么这时候由于Cache的存在，将会导致内存不可见问题，具体看下面的分析。</p>\n<ol>\n<li>线程A首先获取共享变量X的值，由于两级Cache都没有命中，所以加教木中X的值，假如为0。然后把X=0的值缓存到两级缓存，线程A修改X的值为1，然后将其写入两级Cache，并且刷新到主内存。线程A操作完毕后，线程A所在CPU的两级Cache内和主内存里面的X的值都是1。</li>\n<li>线程B获取X的值，首先一级缓存没有命中，然后看二级缓存，二级缓存命的所以返回X=1，到这里一切都是正常的，因为这时候主内存中也是X=1。然后线程B修改X的值为2,并将其存放线程B所在的一级Cache和共享二级Cache中，最后更新主内存中X的值为2，到这里一切都是好的。</li>\n<li>线程A这次又需要修改X的值，获取时一级缓存命中，并且X=1，到这里问题与出现了，明明线程B已经把X的值修改为了2，为何线程A获取的还是1呢？这就是共享变量的内存不可见问题，也就是线程B写入的值对线程A不可见。</li>\n</ol>\n<p>了解了这些，我们就会明白，上述代码中，一张票卖多次的问题是如何导致的了，就是因为<code>thread1</code>与<code>thread2</code>由于内存模型导致的共享变量<code>count</code>内存不可见。</p>\n<p>那么如何解决呢？</p>\n<p>大学时候我们学过使用<code>synchronized</code>加锁来解决线程安全问题，例如上述卖票代码改为如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadSafeTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String lock = <span class=\"string\">\"lock\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyThreadSafeTest thread1 = <span class=\"keyword\">new</span> MyThreadSafeTest();</span><br><span class=\"line\">        MyThreadSafeTest thread2 = <span class=\"keyword\">new</span> MyThreadSafeTest();</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadSafeTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;   </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ThreadSafeTest.count&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">                sale();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sale</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(ThreadSafeTest.lock)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ThreadSafeTest.count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                --ThreadSafeTest.count;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\",出售第\"</span> + (<span class=\"number\">5</span> - ThreadSafeTest.count) + <span class=\"string\">\"张票\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-<span class=\"number\">0</span>,出售第<span class=\"number\">1</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">1</span>,出售第<span class=\"number\">2</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">0</span>,出售第<span class=\"number\">3</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">1</span>,出售第<span class=\"number\">4</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">0</span>,出售第<span class=\"number\">5</span>张票</span><br></pre></td></tr></table></figure>\n\n<p>我们对卖票的操作进行了加锁，加锁之后，就没有出现共享变量混乱的问题，那么<code>synchronized</code>到底是什么呢？怎么实现的共享变量内存可见呢？</p>\n<p><code>synchronized</code>块是Java提供的一种原子性内置锁，Java中的每个对象都可以把它当做一个同步锁来使用，这些Java内置的使用者看不到的锁被称为内部锁，也叫作监视器锁，线程的执行代码在进入<code>synchronized</code>代码块前会自动获取内部锁，这时候其他线程访问该同步代码块时会被阻塞挂起。拿到内部锁的线程会在正常退出同步代码块或者抛出异常后或者在同步块内调用了该内置锁资源的<code>wait</code>系列方法时释放该内置锁。内置锁是排它锁，也就是当一个线程获取这个锁后，其他线程必须等待该线程释放锁后才能获取该锁。</p>\n<p>由于共享变量内存可见性问题主要是由于线程的工作内存导致的，使用<code>synchronized</code>的时候，它的内存语义是什么样的呢？（也就是加锁和释放锁的语义）。</p>\n<p>进入<code>synchronized</code>块的内存语义（加锁）是把在<code>synchronized</code>共内使用到的共享变量从线程的工作内存中清除，这样在<code>synchronized</code>块内使用到该变量时就不会从线程的工作内存中获取，而是直接从主内存中获取。退出<code>synchronized</code>块的内存语义（释放锁）是把在<code>synchronized</code>块内对共享变量的修改刷新到主内存。</p>\n<p>除可以解决共享变量内存可见性问题外，synchronized 经常被用来实现原子性操作。另外请注意，synchronized 关键字会引起线程上下文切换并带来线程调度开销，所以使用锁太笨重，尤其是在Java1.6之前，没有对synchronized进行优化。对于内存可见性的问题，Java还提供了一种弱同步，也就是使用 <code>volatile</code> 关键字，这个由于篇幅问题，下一篇文章再讲吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>讲完创建线程的方法，接下来我们学习一下多线程编程中会遇到的线程安全问题。</p>\n<p>谈到线程安全，就会涉及到共享资源，所谓共享资源，就是指该资源被多个线程使用。线程安全问题就是，当多个线程同时读写同一个共享资源的时候，没有加任何同步措施，导致出现脏数据，以及预料之外的结果。</p>\n<p>例如下面代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadSafeTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyThreadSafeTest thread1 = <span class=\"keyword\">new</span> MyThreadSafeTest();</span><br><span class=\"line\">        MyThreadSafeTest thread2 = <span class=\"keyword\">new</span> MyThreadSafeTest();</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadSafeTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;   </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ThreadSafeTest.count&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">                sale();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sale</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ThreadSafeTest.count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            --ThreadSafeTest.count;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\",出售第\"</span> + (<span class=\"number\">5</span> - ThreadSafeTest.count) + <span class=\"string\">\"张票\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-<span class=\"number\">1</span>,出售第<span class=\"number\">2</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">0</span>,出售第<span class=\"number\">2</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">1</span>,出售第<span class=\"number\">3</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">0</span>,出售第<span class=\"number\">4</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">1</span>,出售第<span class=\"number\">5</span>张票</span><br></pre></td></tr></table></figure>\n\n<p>我们模拟了多窗口售票的问题，每个线程就是一个窗口。可以看到，会出现一张票卖出多次的情况，这显然是不合理的。</p>\n<p>这是由于什么原因导致的呢？要查找其原因，首先我们需要了解Java的内存模型。如下图：</p>\n<p><img src=\"/pic_doc/java_mem_model.jpg\" alt=\"Java内存模型\"> </p>\n<p>Java内存模型规定，将所有的变量都放在主内存中，当线程使用变量的时候从主内存中将变量复制一份到自己的工作空间或者说工作内存，线程读写变量时操作的是自己工作内存中的变量。</p>\n<p>Java内存模型是一个抽象的概念，实际实现中的工作内存是什么样子呢？</p>\n<p><img src=\"/pic_doc/cpu_mem_model.jpg\" alt=\"\"> </p>\n<p>图中所示是一个双核CPU的架构，Java内存模型里面的工作内存就对应这里的L1或者L2或者CPU的寄存器。</p>\n<p>当一个线程操作共享变量时，它首先从主内存复制共享变量到自己的工作内存，对工作内存里的变量进行处理，处理完后将变最值更新到主内存。</p>\n<p>那么假如线程A和线程B同时处理一个共享变量，会出现什么情况？我们使用图中所示CPU架构，假设线程A和线程B使用不同CPU执行，并且当前两级Cache都为空。那么这时候由于Cache的存在，将会导致内存不可见问题，具体看下面的分析。</p>\n<ol>\n<li>线程A首先获取共享变量X的值，由于两级Cache都没有命中，所以加教木中X的值，假如为0。然后把X=0的值缓存到两级缓存，线程A修改X的值为1，然后将其写入两级Cache，并且刷新到主内存。线程A操作完毕后，线程A所在CPU的两级Cache内和主内存里面的X的值都是1。</li>\n<li>线程B获取X的值，首先一级缓存没有命中，然后看二级缓存，二级缓存命的所以返回X=1，到这里一切都是正常的，因为这时候主内存中也是X=1。然后线程B修改X的值为2,并将其存放线程B所在的一级Cache和共享二级Cache中，最后更新主内存中X的值为2，到这里一切都是好的。</li>\n<li>线程A这次又需要修改X的值，获取时一级缓存命中，并且X=1，到这里问题与出现了，明明线程B已经把X的值修改为了2，为何线程A获取的还是1呢？这就是共享变量的内存不可见问题，也就是线程B写入的值对线程A不可见。</li>\n</ol>\n<p>了解了这些，我们就会明白，上述代码中，一张票卖多次的问题是如何导致的了，就是因为<code>thread1</code>与<code>thread2</code>由于内存模型导致的共享变量<code>count</code>内存不可见。</p>\n<p>那么如何解决呢？</p>\n<p>大学时候我们学过使用<code>synchronized</code>加锁来解决线程安全问题，例如上述卖票代码改为如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadSafeTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String lock = <span class=\"string\">\"lock\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyThreadSafeTest thread1 = <span class=\"keyword\">new</span> MyThreadSafeTest();</span><br><span class=\"line\">        MyThreadSafeTest thread2 = <span class=\"keyword\">new</span> MyThreadSafeTest();</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadSafeTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;   </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ThreadSafeTest.count&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">                sale();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sale</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(ThreadSafeTest.lock)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ThreadSafeTest.count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                --ThreadSafeTest.count;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\",出售第\"</span> + (<span class=\"number\">5</span> - ThreadSafeTest.count) + <span class=\"string\">\"张票\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-<span class=\"number\">0</span>,出售第<span class=\"number\">1</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">1</span>,出售第<span class=\"number\">2</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">0</span>,出售第<span class=\"number\">3</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">1</span>,出售第<span class=\"number\">4</span>张票</span><br><span class=\"line\">Thread-<span class=\"number\">0</span>,出售第<span class=\"number\">5</span>张票</span><br></pre></td></tr></table></figure>\n\n<p>我们对卖票的操作进行了加锁，加锁之后，就没有出现共享变量混乱的问题，那么<code>synchronized</code>到底是什么呢？怎么实现的共享变量内存可见呢？</p>\n<p><code>synchronized</code>块是Java提供的一种原子性内置锁，Java中的每个对象都可以把它当做一个同步锁来使用，这些Java内置的使用者看不到的锁被称为内部锁，也叫作监视器锁，线程的执行代码在进入<code>synchronized</code>代码块前会自动获取内部锁，这时候其他线程访问该同步代码块时会被阻塞挂起。拿到内部锁的线程会在正常退出同步代码块或者抛出异常后或者在同步块内调用了该内置锁资源的<code>wait</code>系列方法时释放该内置锁。内置锁是排它锁，也就是当一个线程获取这个锁后，其他线程必须等待该线程释放锁后才能获取该锁。</p>\n<p>由于共享变量内存可见性问题主要是由于线程的工作内存导致的，使用<code>synchronized</code>的时候，它的内存语义是什么样的呢？（也就是加锁和释放锁的语义）。</p>\n<p>进入<code>synchronized</code>块的内存语义（加锁）是把在<code>synchronized</code>共内使用到的共享变量从线程的工作内存中清除，这样在<code>synchronized</code>块内使用到该变量时就不会从线程的工作内存中获取，而是直接从主内存中获取。退出<code>synchronized</code>块的内存语义（释放锁）是把在<code>synchronized</code>块内对共享变量的修改刷新到主内存。</p>\n<p>除可以解决共享变量内存可见性问题外，synchronized 经常被用来实现原子性操作。另外请注意，synchronized 关键字会引起线程上下文切换并带来线程调度开销，所以使用锁太笨重，尤其是在Java1.6之前，没有对synchronized进行优化。对于内存可见性的问题，Java还提供了一种弱同步，也就是使用 <code>volatile</code> 关键字，这个由于篇幅问题，下一篇文章再讲吧。</p>\n"},{"title":"LeetCode第一题-TwoSum","date":"2019-10-01T12:14:26.000Z","_content":"\n刷了无数遍的LeetCode第一题，为啥刷了无数遍呢，因为每次想提高自己算法与数据结构能力的时候我都会下定决心来LeetCode刷题，而每次刷题，都是从第一题开始...\n\n不多扯淡，直接开题。\n\n题目要求是这样的：\n```\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n```\n\n\n啥意思呢，帮英文不好的同学翻译一下：\n\n给定一个整数数组 `nums` 和一个目标值 `target`，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n例如：\n```\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n```\n\n首先，一般人第一个想到的方法就是暴力破解，也就是直接循环两次数组，遍历数组中每个元素 `x`，再次遍历数组，并查找是否存在一个值与 `target - x` 相等的目标元素。\n\n先亮出代码，我们再来讨论程序性能。\n\n```Java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n然后我们来讨论一下此种解决方式的代码性能，分析一段代码的性能，主要从时间复杂度，以及空间复杂度两个方面来考虑。\n简单解释一下什么是时间复杂度，什么是空间复杂度。\n\n时间复杂度指的是解决一个问题，程序所需要进行多少次操作。\n空间复杂度指的是解决一个问题，所需要的额外空间。\n\n上述算法的复杂度为：\n\n时间复杂度：O(n<sup>2</sup>)，对于每个元素（一共`n`个），我们试图通过遍历数组的其余部分（其余的`n-1`个元素）来寻找它所对应的目标元素，这将耗费`O(n)`的时间。遍历数组中每个元素时间复杂度为O(n)，遍历数组其余部分的时间复杂度为`O(n)`（准确的来说为`O(n-1)`，但是因为`1`是常数，与n比起来可以忽略不计，所以简写为`O(n)`），因此时间复杂度为O(n<sup>2</sup>)。\n\n空间复杂度：`O(1)`。\n\n可以看到，此种方法的时间复杂度很高，因为这道题的本质还是在数组中查找元素，这相当于两层嵌套循环。说到查找元素，可能同学们会想到，可以用二分查找啊，二分查找不比简单的for循环速度快多了。确实，二分查找比暴力查找速度快得多，但是，二分查找只适用于有序数组，此题目中数组并不是有序的，所以不能使用二分查找。\n\n那么，这道题有没有更加快速的解法呢？当然是有的。\n\n上面说了，这道题的本质还是在数组中查找元素，重点在于查找，我们的目的是缩短查找的时间。那么有什么方法可以缩短查找时间呢？学过数据结构的同学应该都知道或者听说过一种数据结构--`散列表`（又叫做`哈希表`）。这种数据结构，在无冲突的情况下，查找元素的时间复杂度为`O(1)`，比暴力循环数组的`O(n)`快了很多。那么我们如何利用它来解决这个问题呢？\n\n一个简单的实现，使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素`(target - nums[i])`是否存在于表中。注意，该目标元素不能是 `nums[i]` 本身！\n\n```Java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            map.put(nums[i], i);\n        }\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement) && map.get(complement) != i) {\n                return new int[] { i, map.get(complement) };\n            }\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n\n`注：这里使用了Java中的集合类HashMap，其实HashMap本质上就是哈希表`\n\n复杂度分析：\n\n时间复杂度：`O(n)`，\n我们把包含有 `n` 个元素的列表遍历两次。由于哈希表将查找时间缩短到 `O(1)` ，所以时间复杂度为 `O(n)`。\n\n空间复杂度：`O(n)`，\n所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 `n` 个元素。\n\n可以看到，我们将程序的时间复杂度从O(n<sup>2</sup>)降到了`O(n)`，这说明我们的程序变得更快了，但是空间复杂度从`O(1)`变成了`O(n)`，占用的空间更多了。我们使用空间换取了时间，在现在程序效率要求较高，而内存空间或者硬盘空间成本日益廉价的情况下，如果没有特殊要求，我们可以不关注程序的空间复杂度，只关心程序的时间复杂度。\n\n\n上面哈希表的解法，我们使用了两遍哈希表，第一遍是把数组中的元素放到哈希表中，也就是建表；第二遍从哈希表中进行查找。\n那么我们能不能使用一次哈希表就解决问题呢？\n\n我们看一下下面的代码\n```Java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            }\n            map.put(nums[i], i);\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。\n\n复杂度分析：\n\n时间复杂度：`O(n)`，\n我们只遍历了包含有 `n` 个元素的列表一次。在表中进行的每次查找只花费 `O(1)` 的时间。\n\n空间复杂度：`O(n)`，\n所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 `n` 个元素。\n\n可以看到，这种方法的时间复杂度与空间复杂度，和两遍哈希表的方法是一样的，程序性能没有什么差别。但这种方法只用了一次for循环，看起来就很高端，看起来就要比两遍哈希表的方法效率要高（只是看起来要高，其实效率提高很有限。。），为啥还要讲最后一种解法呢？因为很多面试官就喜欢这种看起来高端的解法。（当然，只要你不用第一中方法暴力求解，面试官还是会欣赏你的。。。）\n\n\n\n\n\n","source":"_posts/LeetCode第一题.md","raw":"---\ntitle: LeetCode第一题-TwoSum\ndate: 2019-10-01 20:14:26\ntags: [算法,LeetCode,面试题]\n---\n\n刷了无数遍的LeetCode第一题，为啥刷了无数遍呢，因为每次想提高自己算法与数据结构能力的时候我都会下定决心来LeetCode刷题，而每次刷题，都是从第一题开始...\n\n不多扯淡，直接开题。\n\n题目要求是这样的：\n```\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n```\n\n\n啥意思呢，帮英文不好的同学翻译一下：\n\n给定一个整数数组 `nums` 和一个目标值 `target`，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n例如：\n```\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n```\n\n首先，一般人第一个想到的方法就是暴力破解，也就是直接循环两次数组，遍历数组中每个元素 `x`，再次遍历数组，并查找是否存在一个值与 `target - x` 相等的目标元素。\n\n先亮出代码，我们再来讨论程序性能。\n\n```Java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n然后我们来讨论一下此种解决方式的代码性能，分析一段代码的性能，主要从时间复杂度，以及空间复杂度两个方面来考虑。\n简单解释一下什么是时间复杂度，什么是空间复杂度。\n\n时间复杂度指的是解决一个问题，程序所需要进行多少次操作。\n空间复杂度指的是解决一个问题，所需要的额外空间。\n\n上述算法的复杂度为：\n\n时间复杂度：O(n<sup>2</sup>)，对于每个元素（一共`n`个），我们试图通过遍历数组的其余部分（其余的`n-1`个元素）来寻找它所对应的目标元素，这将耗费`O(n)`的时间。遍历数组中每个元素时间复杂度为O(n)，遍历数组其余部分的时间复杂度为`O(n)`（准确的来说为`O(n-1)`，但是因为`1`是常数，与n比起来可以忽略不计，所以简写为`O(n)`），因此时间复杂度为O(n<sup>2</sup>)。\n\n空间复杂度：`O(1)`。\n\n可以看到，此种方法的时间复杂度很高，因为这道题的本质还是在数组中查找元素，这相当于两层嵌套循环。说到查找元素，可能同学们会想到，可以用二分查找啊，二分查找不比简单的for循环速度快多了。确实，二分查找比暴力查找速度快得多，但是，二分查找只适用于有序数组，此题目中数组并不是有序的，所以不能使用二分查找。\n\n那么，这道题有没有更加快速的解法呢？当然是有的。\n\n上面说了，这道题的本质还是在数组中查找元素，重点在于查找，我们的目的是缩短查找的时间。那么有什么方法可以缩短查找时间呢？学过数据结构的同学应该都知道或者听说过一种数据结构--`散列表`（又叫做`哈希表`）。这种数据结构，在无冲突的情况下，查找元素的时间复杂度为`O(1)`，比暴力循环数组的`O(n)`快了很多。那么我们如何利用它来解决这个问题呢？\n\n一个简单的实现，使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素`(target - nums[i])`是否存在于表中。注意，该目标元素不能是 `nums[i]` 本身！\n\n```Java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            map.put(nums[i], i);\n        }\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement) && map.get(complement) != i) {\n                return new int[] { i, map.get(complement) };\n            }\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n\n`注：这里使用了Java中的集合类HashMap，其实HashMap本质上就是哈希表`\n\n复杂度分析：\n\n时间复杂度：`O(n)`，\n我们把包含有 `n` 个元素的列表遍历两次。由于哈希表将查找时间缩短到 `O(1)` ，所以时间复杂度为 `O(n)`。\n\n空间复杂度：`O(n)`，\n所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 `n` 个元素。\n\n可以看到，我们将程序的时间复杂度从O(n<sup>2</sup>)降到了`O(n)`，这说明我们的程序变得更快了，但是空间复杂度从`O(1)`变成了`O(n)`，占用的空间更多了。我们使用空间换取了时间，在现在程序效率要求较高，而内存空间或者硬盘空间成本日益廉价的情况下，如果没有特殊要求，我们可以不关注程序的空间复杂度，只关心程序的时间复杂度。\n\n\n上面哈希表的解法，我们使用了两遍哈希表，第一遍是把数组中的元素放到哈希表中，也就是建表；第二遍从哈希表中进行查找。\n那么我们能不能使用一次哈希表就解决问题呢？\n\n我们看一下下面的代码\n```Java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            }\n            map.put(nums[i], i);\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}\n```\n事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。\n\n复杂度分析：\n\n时间复杂度：`O(n)`，\n我们只遍历了包含有 `n` 个元素的列表一次。在表中进行的每次查找只花费 `O(1)` 的时间。\n\n空间复杂度：`O(n)`，\n所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 `n` 个元素。\n\n可以看到，这种方法的时间复杂度与空间复杂度，和两遍哈希表的方法是一样的，程序性能没有什么差别。但这种方法只用了一次for循环，看起来就很高端，看起来就要比两遍哈希表的方法效率要高（只是看起来要高，其实效率提高很有限。。），为啥还要讲最后一种解法呢？因为很多面试官就喜欢这种看起来高端的解法。（当然，只要你不用第一中方法暴力求解，面试官还是会欣赏你的。。。）\n\n\n\n\n\n","slug":"LeetCode第一题","published":1,"updated":"2019-10-20T11:50:46.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79dg000j07k326zx0439","content":"<p>刷了无数遍的LeetCode第一题，为啥刷了无数遍呢，因为每次想提高自己算法与数据结构能力的时候我都会下定决心来LeetCode刷题，而每次刷题，都是从第一题开始…</p>\n<p>不多扯淡，直接开题。</p>\n<p>题目要求是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given an array of integers, return indices of the two numbers such that they add up to a specific target.</span><br><span class=\"line\"></span><br><span class=\"line\">You may assume that each input would have exactly one solution, and you may not use the same element twice.</span><br></pre></td></tr></table></figure>\n\n\n<p>啥意思呢，帮英文不好的同学翻译一下：</p>\n<p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given nums &#x3D; [2, 7, 11, 15], target &#x3D; 9,</span><br><span class=\"line\"></span><br><span class=\"line\">Because nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9,</span><br><span class=\"line\">return [0, 1].</span><br></pre></td></tr></table></figure>\n\n<p>首先，一般人第一个想到的方法就是暴力破解，也就是直接循环两次数组，遍历数组中每个元素 <code>x</code>，再次遍历数组，并查找是否存在一个值与 <code>target - x</code> 相等的目标元素。</p>\n<p>先亮出代码，我们再来讨论程序性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[j] == target - nums[i]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, j &#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们来讨论一下此种解决方式的代码性能，分析一段代码的性能，主要从时间复杂度，以及空间复杂度两个方面来考虑。<br>简单解释一下什么是时间复杂度，什么是空间复杂度。</p>\n<p>时间复杂度指的是解决一个问题，程序所需要进行多少次操作。<br>空间复杂度指的是解决一个问题，所需要的额外空间。</p>\n<p>上述算法的复杂度为：</p>\n<p>时间复杂度：O(n<sup>2</sup>)，对于每个元素（一共<code>n</code>个），我们试图通过遍历数组的其余部分（其余的<code>n-1</code>个元素）来寻找它所对应的目标元素，这将耗费<code>O(n)</code>的时间。遍历数组中每个元素时间复杂度为O(n)，遍历数组其余部分的时间复杂度为<code>O(n)</code>（准确的来说为<code>O(n-1)</code>，但是因为<code>1</code>是常数，与n比起来可以忽略不计，所以简写为<code>O(n)</code>），因此时间复杂度为O(n<sup>2</sup>)。</p>\n<p>空间复杂度：<code>O(1)</code>。</p>\n<p>可以看到，此种方法的时间复杂度很高，因为这道题的本质还是在数组中查找元素，这相当于两层嵌套循环。说到查找元素，可能同学们会想到，可以用二分查找啊，二分查找不比简单的for循环速度快多了。确实，二分查找比暴力查找速度快得多，但是，二分查找只适用于有序数组，此题目中数组并不是有序的，所以不能使用二分查找。</p>\n<p>那么，这道题有没有更加快速的解法呢？当然是有的。</p>\n<p>上面说了，这道题的本质还是在数组中查找元素，重点在于查找，我们的目的是缩短查找的时间。那么有什么方法可以缩短查找时间呢？学过数据结构的同学应该都知道或者听说过一种数据结构–<code>散列表</code>（又叫做<code>哈希表</code>）。这种数据结构，在无冲突的情况下，查找元素的时间复杂度为<code>O(1)</code>，比暴力循环数组的<code>O(n)</code>快了很多。那么我们如何利用它来解决这个问题呢？</p>\n<p>一个简单的实现，使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素<code>(target - nums[i])</code>是否存在于表中。注意，该目标元素不能是 <code>nums[i]</code> 本身！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            map.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, map.get(complement) &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>注：这里使用了Java中的集合类HashMap，其实HashMap本质上就是哈希表</code></p>\n<p>复杂度分析：</p>\n<p>时间复杂度：<code>O(n)</code>，<br>我们把包含有 <code>n</code> 个元素的列表遍历两次。由于哈希表将查找时间缩短到 <code>O(1)</code> ，所以时间复杂度为 <code>O(n)</code>。</p>\n<p>空间复杂度：<code>O(n)</code>，<br>所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 <code>n</code> 个元素。</p>\n<p>可以看到，我们将程序的时间复杂度从O(n<sup>2</sup>)降到了<code>O(n)</code>，这说明我们的程序变得更快了，但是空间复杂度从<code>O(1)</code>变成了<code>O(n)</code>，占用的空间更多了。我们使用空间换取了时间，在现在程序效率要求较高，而内存空间或者硬盘空间成本日益廉价的情况下，如果没有特殊要求，我们可以不关注程序的空间复杂度，只关心程序的时间复杂度。</p>\n<p>上面哈希表的解法，我们使用了两遍哈希表，第一遍是把数组中的元素放到哈希表中，也就是建表；第二遍从哈希表中进行查找。<br>那么我们能不能使用一次哈希表就解决问题呢？</p>\n<p>我们看一下下面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(complement)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            map.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。</p>\n<p>复杂度分析：</p>\n<p>时间复杂度：<code>O(n)</code>，<br>我们只遍历了包含有 <code>n</code> 个元素的列表一次。在表中进行的每次查找只花费 <code>O(1)</code> 的时间。</p>\n<p>空间复杂度：<code>O(n)</code>，<br>所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 <code>n</code> 个元素。</p>\n<p>可以看到，这种方法的时间复杂度与空间复杂度，和两遍哈希表的方法是一样的，程序性能没有什么差别。但这种方法只用了一次for循环，看起来就很高端，看起来就要比两遍哈希表的方法效率要高（只是看起来要高，其实效率提高很有限。。），为啥还要讲最后一种解法呢？因为很多面试官就喜欢这种看起来高端的解法。（当然，只要你不用第一中方法暴力求解，面试官还是会欣赏你的。。。）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>刷了无数遍的LeetCode第一题，为啥刷了无数遍呢，因为每次想提高自己算法与数据结构能力的时候我都会下定决心来LeetCode刷题，而每次刷题，都是从第一题开始…</p>\n<p>不多扯淡，直接开题。</p>\n<p>题目要求是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given an array of integers, return indices of the two numbers such that they add up to a specific target.</span><br><span class=\"line\"></span><br><span class=\"line\">You may assume that each input would have exactly one solution, and you may not use the same element twice.</span><br></pre></td></tr></table></figure>\n\n\n<p>啥意思呢，帮英文不好的同学翻译一下：</p>\n<p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given nums &#x3D; [2, 7, 11, 15], target &#x3D; 9,</span><br><span class=\"line\"></span><br><span class=\"line\">Because nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9,</span><br><span class=\"line\">return [0, 1].</span><br></pre></td></tr></table></figure>\n\n<p>首先，一般人第一个想到的方法就是暴力破解，也就是直接循环两次数组，遍历数组中每个元素 <code>x</code>，再次遍历数组，并查找是否存在一个值与 <code>target - x</code> 相等的目标元素。</p>\n<p>先亮出代码，我们再来讨论程序性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[j] == target - nums[i]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, j &#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们来讨论一下此种解决方式的代码性能，分析一段代码的性能，主要从时间复杂度，以及空间复杂度两个方面来考虑。<br>简单解释一下什么是时间复杂度，什么是空间复杂度。</p>\n<p>时间复杂度指的是解决一个问题，程序所需要进行多少次操作。<br>空间复杂度指的是解决一个问题，所需要的额外空间。</p>\n<p>上述算法的复杂度为：</p>\n<p>时间复杂度：O(n<sup>2</sup>)，对于每个元素（一共<code>n</code>个），我们试图通过遍历数组的其余部分（其余的<code>n-1</code>个元素）来寻找它所对应的目标元素，这将耗费<code>O(n)</code>的时间。遍历数组中每个元素时间复杂度为O(n)，遍历数组其余部分的时间复杂度为<code>O(n)</code>（准确的来说为<code>O(n-1)</code>，但是因为<code>1</code>是常数，与n比起来可以忽略不计，所以简写为<code>O(n)</code>），因此时间复杂度为O(n<sup>2</sup>)。</p>\n<p>空间复杂度：<code>O(1)</code>。</p>\n<p>可以看到，此种方法的时间复杂度很高，因为这道题的本质还是在数组中查找元素，这相当于两层嵌套循环。说到查找元素，可能同学们会想到，可以用二分查找啊，二分查找不比简单的for循环速度快多了。确实，二分查找比暴力查找速度快得多，但是，二分查找只适用于有序数组，此题目中数组并不是有序的，所以不能使用二分查找。</p>\n<p>那么，这道题有没有更加快速的解法呢？当然是有的。</p>\n<p>上面说了，这道题的本质还是在数组中查找元素，重点在于查找，我们的目的是缩短查找的时间。那么有什么方法可以缩短查找时间呢？学过数据结构的同学应该都知道或者听说过一种数据结构–<code>散列表</code>（又叫做<code>哈希表</code>）。这种数据结构，在无冲突的情况下，查找元素的时间复杂度为<code>O(1)</code>，比暴力循环数组的<code>O(n)</code>快了很多。那么我们如何利用它来解决这个问题呢？</p>\n<p>一个简单的实现，使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素<code>(target - nums[i])</code>是否存在于表中。注意，该目标元素不能是 <code>nums[i]</code> 本身！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            map.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, map.get(complement) &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>注：这里使用了Java中的集合类HashMap，其实HashMap本质上就是哈希表</code></p>\n<p>复杂度分析：</p>\n<p>时间复杂度：<code>O(n)</code>，<br>我们把包含有 <code>n</code> 个元素的列表遍历两次。由于哈希表将查找时间缩短到 <code>O(1)</code> ，所以时间复杂度为 <code>O(n)</code>。</p>\n<p>空间复杂度：<code>O(n)</code>，<br>所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 <code>n</code> 个元素。</p>\n<p>可以看到，我们将程序的时间复杂度从O(n<sup>2</sup>)降到了<code>O(n)</code>，这说明我们的程序变得更快了，但是空间复杂度从<code>O(1)</code>变成了<code>O(n)</code>，占用的空间更多了。我们使用空间换取了时间，在现在程序效率要求较高，而内存空间或者硬盘空间成本日益廉价的情况下，如果没有特殊要求，我们可以不关注程序的空间复杂度，只关心程序的时间复杂度。</p>\n<p>上面哈希表的解法，我们使用了两遍哈希表，第一遍是把数组中的元素放到哈希表中，也就是建表；第二遍从哈希表中进行查找。<br>那么我们能不能使用一次哈希表就解决问题呢？</p>\n<p>我们看一下下面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(complement)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            map.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。</p>\n<p>复杂度分析：</p>\n<p>时间复杂度：<code>O(n)</code>，<br>我们只遍历了包含有 <code>n</code> 个元素的列表一次。在表中进行的每次查找只花费 <code>O(1)</code> 的时间。</p>\n<p>空间复杂度：<code>O(n)</code>，<br>所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 <code>n</code> 个元素。</p>\n<p>可以看到，这种方法的时间复杂度与空间复杂度，和两遍哈希表的方法是一样的，程序性能没有什么差别。但这种方法只用了一次for循环，看起来就很高端，看起来就要比两遍哈希表的方法效率要高（只是看起来要高，其实效率提高很有限。。），为啥还要讲最后一种解法呢？因为很多面试官就喜欢这种看起来高端的解法。（当然，只要你不用第一中方法暴力求解，面试官还是会欣赏你的。。。）</p>\n"},{"title":"MySQL优化（一）之简单介绍","date":"2019-11-17T09:40:13.000Z","_content":"\n做后端开发的同学们免不了接触MySQL，虽然现在有很多ORM框架，但是个人认为，在一些情况下还是需要我们手工写SQL的，个人也比较喜欢手写SQL，可能是做过半年数据分析类工作的原因吧。而能够手写SQL查询出我们想要的数据只是一个合格后端开发工程师的基本素质，我们还得学习如何优化我们的SQL，虽然现在很多大公司都有DBA这个职位，但是我们做后端开发的多了解一些SQL优化的知识也是很有帮助的。\n\n说到数据库优化，我们最常遇到的就是查询优化，而最常用的查询优化手段就是建立索引。还有就是在建库建表的时候就要做好的库表结构优化。\n\n查询优化，索引优化，库表结构优化需要齐头并进，一个不落。这三者相辅相成，在获得编写sql查询优化的经验的同时，我们也会学习到如何为高效的查询设计表结构以及索引，同样的，也可以学习到优化库表结构时将会影响到那些类型的查询。\n\n一条sql语句为什么需要优化？那绝对是因为它的查询速度慢，那么为什么查询速度会慢呢？\n\n查询性能低下最基本的原因就是访问的数据太多。某些查询了能不可避免的需要筛选大量数据，但这种情况不常见。大部分性能低下的查询都可以通过减少访问数据量的方式进行优化。对于低效的查询，我们首先可以通过以下两个步骤来分析：\n\n    1. 确认应用程序是够在检索大量超过我们实际需要的数据。这通常意味着我们访问了太多的行或者列。\n    2. 确认MySQL服务层是够在分析大量超过需要的数据行。\n\n知道了从哪方面入手，那么就会知道如何优化了\n\n第一，访问太多行或者列的：\n\n1. 若是访问太多行\n\n例如，在某个新闻网站中取出100条记录，但只是在页面上显示前10条。对于这种，最简单的就是在查询后面加上`limit`。\n\n2. 若是访问太多的列\n\n例如：我只想查询学生的名字，我们应该使用如下语句\n\n```sql\nselect name from students;\n```\n\n而不是使用\n\n```sql\nselect * from students;\n```\n这两个方法看起来很基础对不对，虽然基础，但是很有效。其实这也算不上什么优化，只是我们在开发中需要注意的细节问题。\n\n另外需要注意的是，总是取出全部的列，会让优化器无法完成索引覆盖扫描这类优化，还会为服务器带来额外的I/O、内存、CPU的消耗，因此，一些DBA是严格禁止使用`select *`这种写法的，这样做有时候还能避免某些列被修改带来的问题。\n\n但是，查询返回超过需要的数据也并不总是坏事，作为后端开发深有体会的一点就是，这种浪费数据库资源的方式可以简化开发。例如，在现在前后端分离的开发中，前端所需要展示哪些字段的数据，都是我们后端查询之后再返回给他的，但是，前端展示的字段并不是一成不变的，并不是总是那几个字段，因为有时候产品需求会变更，比如，今天的需求是展示名字，性别。明天的需求就可能变为展示名字，性别，年龄，身高等等等等。这种情况下，我们就需要频繁的修改我们的代码以满足一天一变的产品需求（需求天天变对于开发来说很苦逼的）。由于经常有这种情况发生，所以一些开发人员就会直接使用`select *`这种写法，不是爱改需求吗，那我就我把数据都给你，你想展示什么自己挑着用吧。。这种方式虽然不满足优化的思想，但是确实简化了开发，但是我们也不能为了简化开发一味的使用`select *`，我们使用这种方式的前提是我们清楚这样做的性能影响。\n\n第二，分析（扫描）了大量超过需要的数据行\n\n在确定查询只返回需要的数据以后，接下来我们应该看看查询为了返回这些结果，是否扫描了过多的数据。在分析查询时，查看该查询扫描的行数是非常有帮助的，这也能在一定程度上说明该查询的效率高不高，也就是`所需行数/扫描行数`的比值高不高。这里我们就要使用到`explain`关键字了，其中`type`列反应了访问类型，从全表扫描到索引扫描，范围扫描，唯一索引查询，常数引用等等。这些速度从慢到快，扫描的行数也是从多到少。如果没有找到合适的访问类型，通常最好的解决办法就是增加一个合适的索引，这也是为什么索引对查询优化这么重要的原因了，因为索引能让MySQL以最高效，扫描行数最少的方式找到需要的记录。\n\n需要注意的是，索引只是尽可能的只扫描所需要的数据行，并不是说增加索引就能让扫描的行数等于返回的行数。例如\n\n```sql\n-- 假设actor_id上建索引\nselect actor_id,count(*) from movie group by actor_id; -- 使用了聚合函数，返回的行数大多数情况下远远小于扫描的行数\n```\n\n如果发现查询需要扫描大量的数据但只返回少数的几行，那么通常可以尝试下面的技巧去优化：\n\n1. 使用索引覆盖扫描，把所有需要用的列都放在索引中，这样存储引擎无需回表获取对应行就可以返回结果了。\n2. 改变库表结构，例如使用单独的汇总表（例如上述聚合函数的情况优化）\n3. 重写复杂查询，让MySQL优化器能够以更优化的方式执行查询\n","source":"_posts/MySQL优化（一）之简单介绍.md","raw":"---\ntitle: MySQL优化（一）之简单介绍\ndate: 2019-11-17 17:40:13\ntags: [MySQL,SQL优化]\n---\n\n做后端开发的同学们免不了接触MySQL，虽然现在有很多ORM框架，但是个人认为，在一些情况下还是需要我们手工写SQL的，个人也比较喜欢手写SQL，可能是做过半年数据分析类工作的原因吧。而能够手写SQL查询出我们想要的数据只是一个合格后端开发工程师的基本素质，我们还得学习如何优化我们的SQL，虽然现在很多大公司都有DBA这个职位，但是我们做后端开发的多了解一些SQL优化的知识也是很有帮助的。\n\n说到数据库优化，我们最常遇到的就是查询优化，而最常用的查询优化手段就是建立索引。还有就是在建库建表的时候就要做好的库表结构优化。\n\n查询优化，索引优化，库表结构优化需要齐头并进，一个不落。这三者相辅相成，在获得编写sql查询优化的经验的同时，我们也会学习到如何为高效的查询设计表结构以及索引，同样的，也可以学习到优化库表结构时将会影响到那些类型的查询。\n\n一条sql语句为什么需要优化？那绝对是因为它的查询速度慢，那么为什么查询速度会慢呢？\n\n查询性能低下最基本的原因就是访问的数据太多。某些查询了能不可避免的需要筛选大量数据，但这种情况不常见。大部分性能低下的查询都可以通过减少访问数据量的方式进行优化。对于低效的查询，我们首先可以通过以下两个步骤来分析：\n\n    1. 确认应用程序是够在检索大量超过我们实际需要的数据。这通常意味着我们访问了太多的行或者列。\n    2. 确认MySQL服务层是够在分析大量超过需要的数据行。\n\n知道了从哪方面入手，那么就会知道如何优化了\n\n第一，访问太多行或者列的：\n\n1. 若是访问太多行\n\n例如，在某个新闻网站中取出100条记录，但只是在页面上显示前10条。对于这种，最简单的就是在查询后面加上`limit`。\n\n2. 若是访问太多的列\n\n例如：我只想查询学生的名字，我们应该使用如下语句\n\n```sql\nselect name from students;\n```\n\n而不是使用\n\n```sql\nselect * from students;\n```\n这两个方法看起来很基础对不对，虽然基础，但是很有效。其实这也算不上什么优化，只是我们在开发中需要注意的细节问题。\n\n另外需要注意的是，总是取出全部的列，会让优化器无法完成索引覆盖扫描这类优化，还会为服务器带来额外的I/O、内存、CPU的消耗，因此，一些DBA是严格禁止使用`select *`这种写法的，这样做有时候还能避免某些列被修改带来的问题。\n\n但是，查询返回超过需要的数据也并不总是坏事，作为后端开发深有体会的一点就是，这种浪费数据库资源的方式可以简化开发。例如，在现在前后端分离的开发中，前端所需要展示哪些字段的数据，都是我们后端查询之后再返回给他的，但是，前端展示的字段并不是一成不变的，并不是总是那几个字段，因为有时候产品需求会变更，比如，今天的需求是展示名字，性别。明天的需求就可能变为展示名字，性别，年龄，身高等等等等。这种情况下，我们就需要频繁的修改我们的代码以满足一天一变的产品需求（需求天天变对于开发来说很苦逼的）。由于经常有这种情况发生，所以一些开发人员就会直接使用`select *`这种写法，不是爱改需求吗，那我就我把数据都给你，你想展示什么自己挑着用吧。。这种方式虽然不满足优化的思想，但是确实简化了开发，但是我们也不能为了简化开发一味的使用`select *`，我们使用这种方式的前提是我们清楚这样做的性能影响。\n\n第二，分析（扫描）了大量超过需要的数据行\n\n在确定查询只返回需要的数据以后，接下来我们应该看看查询为了返回这些结果，是否扫描了过多的数据。在分析查询时，查看该查询扫描的行数是非常有帮助的，这也能在一定程度上说明该查询的效率高不高，也就是`所需行数/扫描行数`的比值高不高。这里我们就要使用到`explain`关键字了，其中`type`列反应了访问类型，从全表扫描到索引扫描，范围扫描，唯一索引查询，常数引用等等。这些速度从慢到快，扫描的行数也是从多到少。如果没有找到合适的访问类型，通常最好的解决办法就是增加一个合适的索引，这也是为什么索引对查询优化这么重要的原因了，因为索引能让MySQL以最高效，扫描行数最少的方式找到需要的记录。\n\n需要注意的是，索引只是尽可能的只扫描所需要的数据行，并不是说增加索引就能让扫描的行数等于返回的行数。例如\n\n```sql\n-- 假设actor_id上建索引\nselect actor_id,count(*) from movie group by actor_id; -- 使用了聚合函数，返回的行数大多数情况下远远小于扫描的行数\n```\n\n如果发现查询需要扫描大量的数据但只返回少数的几行，那么通常可以尝试下面的技巧去优化：\n\n1. 使用索引覆盖扫描，把所有需要用的列都放在索引中，这样存储引擎无需回表获取对应行就可以返回结果了。\n2. 改变库表结构，例如使用单独的汇总表（例如上述聚合函数的情况优化）\n3. 重写复杂查询，让MySQL优化器能够以更优化的方式执行查询\n","slug":"MySQL优化（一）之简单介绍","published":1,"updated":"2019-11-17T11:26:24.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79di000k07k33vky72ho","content":"<p>做后端开发的同学们免不了接触MySQL，虽然现在有很多ORM框架，但是个人认为，在一些情况下还是需要我们手工写SQL的，个人也比较喜欢手写SQL，可能是做过半年数据分析类工作的原因吧。而能够手写SQL查询出我们想要的数据只是一个合格后端开发工程师的基本素质，我们还得学习如何优化我们的SQL，虽然现在很多大公司都有DBA这个职位，但是我们做后端开发的多了解一些SQL优化的知识也是很有帮助的。</p>\n<p>说到数据库优化，我们最常遇到的就是查询优化，而最常用的查询优化手段就是建立索引。还有就是在建库建表的时候就要做好的库表结构优化。</p>\n<p>查询优化，索引优化，库表结构优化需要齐头并进，一个不落。这三者相辅相成，在获得编写sql查询优化的经验的同时，我们也会学习到如何为高效的查询设计表结构以及索引，同样的，也可以学习到优化库表结构时将会影响到那些类型的查询。</p>\n<p>一条sql语句为什么需要优化？那绝对是因为它的查询速度慢，那么为什么查询速度会慢呢？</p>\n<p>查询性能低下最基本的原因就是访问的数据太多。某些查询了能不可避免的需要筛选大量数据，但这种情况不常见。大部分性能低下的查询都可以通过减少访问数据量的方式进行优化。对于低效的查询，我们首先可以通过以下两个步骤来分析：</p>\n<pre><code>1. 确认应用程序是够在检索大量超过我们实际需要的数据。这通常意味着我们访问了太多的行或者列。\n2. 确认MySQL服务层是够在分析大量超过需要的数据行。</code></pre><p>知道了从哪方面入手，那么就会知道如何优化了</p>\n<p>第一，访问太多行或者列的：</p>\n<ol>\n<li>若是访问太多行</li>\n</ol>\n<p>例如，在某个新闻网站中取出100条记录，但只是在页面上显示前10条。对于这种，最简单的就是在查询后面加上<code>limit</code>。</p>\n<ol start=\"2\">\n<li>若是访问太多的列</li>\n</ol>\n<p>例如：我只想查询学生的名字，我们应该使用如下语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> students;</span><br></pre></td></tr></table></figure>\n\n<p>而不是使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> students;</span><br></pre></td></tr></table></figure>\n<p>这两个方法看起来很基础对不对，虽然基础，但是很有效。其实这也算不上什么优化，只是我们在开发中需要注意的细节问题。</p>\n<p>另外需要注意的是，总是取出全部的列，会让优化器无法完成索引覆盖扫描这类优化，还会为服务器带来额外的I/O、内存、CPU的消耗，因此，一些DBA是严格禁止使用<code>select *</code>这种写法的，这样做有时候还能避免某些列被修改带来的问题。</p>\n<p>但是，查询返回超过需要的数据也并不总是坏事，作为后端开发深有体会的一点就是，这种浪费数据库资源的方式可以简化开发。例如，在现在前后端分离的开发中，前端所需要展示哪些字段的数据，都是我们后端查询之后再返回给他的，但是，前端展示的字段并不是一成不变的，并不是总是那几个字段，因为有时候产品需求会变更，比如，今天的需求是展示名字，性别。明天的需求就可能变为展示名字，性别，年龄，身高等等等等。这种情况下，我们就需要频繁的修改我们的代码以满足一天一变的产品需求（需求天天变对于开发来说很苦逼的）。由于经常有这种情况发生，所以一些开发人员就会直接使用<code>select *</code>这种写法，不是爱改需求吗，那我就我把数据都给你，你想展示什么自己挑着用吧。。这种方式虽然不满足优化的思想，但是确实简化了开发，但是我们也不能为了简化开发一味的使用<code>select *</code>，我们使用这种方式的前提是我们清楚这样做的性能影响。</p>\n<p>第二，分析（扫描）了大量超过需要的数据行</p>\n<p>在确定查询只返回需要的数据以后，接下来我们应该看看查询为了返回这些结果，是否扫描了过多的数据。在分析查询时，查看该查询扫描的行数是非常有帮助的，这也能在一定程度上说明该查询的效率高不高，也就是<code>所需行数/扫描行数</code>的比值高不高。这里我们就要使用到<code>explain</code>关键字了，其中<code>type</code>列反应了访问类型，从全表扫描到索引扫描，范围扫描，唯一索引查询，常数引用等等。这些速度从慢到快，扫描的行数也是从多到少。如果没有找到合适的访问类型，通常最好的解决办法就是增加一个合适的索引，这也是为什么索引对查询优化这么重要的原因了，因为索引能让MySQL以最高效，扫描行数最少的方式找到需要的记录。</p>\n<p>需要注意的是，索引只是尽可能的只扫描所需要的数据行，并不是说增加索引就能让扫描的行数等于返回的行数。例如</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 假设actor_id上建索引</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> actor_id,<span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> movie <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> actor_id; <span class=\"comment\">-- 使用了聚合函数，返回的行数大多数情况下远远小于扫描的行数</span></span><br></pre></td></tr></table></figure>\n\n<p>如果发现查询需要扫描大量的数据但只返回少数的几行，那么通常可以尝试下面的技巧去优化：</p>\n<ol>\n<li>使用索引覆盖扫描，把所有需要用的列都放在索引中，这样存储引擎无需回表获取对应行就可以返回结果了。</li>\n<li>改变库表结构，例如使用单独的汇总表（例如上述聚合函数的情况优化）</li>\n<li>重写复杂查询，让MySQL优化器能够以更优化的方式执行查询</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>做后端开发的同学们免不了接触MySQL，虽然现在有很多ORM框架，但是个人认为，在一些情况下还是需要我们手工写SQL的，个人也比较喜欢手写SQL，可能是做过半年数据分析类工作的原因吧。而能够手写SQL查询出我们想要的数据只是一个合格后端开发工程师的基本素质，我们还得学习如何优化我们的SQL，虽然现在很多大公司都有DBA这个职位，但是我们做后端开发的多了解一些SQL优化的知识也是很有帮助的。</p>\n<p>说到数据库优化，我们最常遇到的就是查询优化，而最常用的查询优化手段就是建立索引。还有就是在建库建表的时候就要做好的库表结构优化。</p>\n<p>查询优化，索引优化，库表结构优化需要齐头并进，一个不落。这三者相辅相成，在获得编写sql查询优化的经验的同时，我们也会学习到如何为高效的查询设计表结构以及索引，同样的，也可以学习到优化库表结构时将会影响到那些类型的查询。</p>\n<p>一条sql语句为什么需要优化？那绝对是因为它的查询速度慢，那么为什么查询速度会慢呢？</p>\n<p>查询性能低下最基本的原因就是访问的数据太多。某些查询了能不可避免的需要筛选大量数据，但这种情况不常见。大部分性能低下的查询都可以通过减少访问数据量的方式进行优化。对于低效的查询，我们首先可以通过以下两个步骤来分析：</p>\n<pre><code>1. 确认应用程序是够在检索大量超过我们实际需要的数据。这通常意味着我们访问了太多的行或者列。\n2. 确认MySQL服务层是够在分析大量超过需要的数据行。</code></pre><p>知道了从哪方面入手，那么就会知道如何优化了</p>\n<p>第一，访问太多行或者列的：</p>\n<ol>\n<li>若是访问太多行</li>\n</ol>\n<p>例如，在某个新闻网站中取出100条记录，但只是在页面上显示前10条。对于这种，最简单的就是在查询后面加上<code>limit</code>。</p>\n<ol start=\"2\">\n<li>若是访问太多的列</li>\n</ol>\n<p>例如：我只想查询学生的名字，我们应该使用如下语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> students;</span><br></pre></td></tr></table></figure>\n\n<p>而不是使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> students;</span><br></pre></td></tr></table></figure>\n<p>这两个方法看起来很基础对不对，虽然基础，但是很有效。其实这也算不上什么优化，只是我们在开发中需要注意的细节问题。</p>\n<p>另外需要注意的是，总是取出全部的列，会让优化器无法完成索引覆盖扫描这类优化，还会为服务器带来额外的I/O、内存、CPU的消耗，因此，一些DBA是严格禁止使用<code>select *</code>这种写法的，这样做有时候还能避免某些列被修改带来的问题。</p>\n<p>但是，查询返回超过需要的数据也并不总是坏事，作为后端开发深有体会的一点就是，这种浪费数据库资源的方式可以简化开发。例如，在现在前后端分离的开发中，前端所需要展示哪些字段的数据，都是我们后端查询之后再返回给他的，但是，前端展示的字段并不是一成不变的，并不是总是那几个字段，因为有时候产品需求会变更，比如，今天的需求是展示名字，性别。明天的需求就可能变为展示名字，性别，年龄，身高等等等等。这种情况下，我们就需要频繁的修改我们的代码以满足一天一变的产品需求（需求天天变对于开发来说很苦逼的）。由于经常有这种情况发生，所以一些开发人员就会直接使用<code>select *</code>这种写法，不是爱改需求吗，那我就我把数据都给你，你想展示什么自己挑着用吧。。这种方式虽然不满足优化的思想，但是确实简化了开发，但是我们也不能为了简化开发一味的使用<code>select *</code>，我们使用这种方式的前提是我们清楚这样做的性能影响。</p>\n<p>第二，分析（扫描）了大量超过需要的数据行</p>\n<p>在确定查询只返回需要的数据以后，接下来我们应该看看查询为了返回这些结果，是否扫描了过多的数据。在分析查询时，查看该查询扫描的行数是非常有帮助的，这也能在一定程度上说明该查询的效率高不高，也就是<code>所需行数/扫描行数</code>的比值高不高。这里我们就要使用到<code>explain</code>关键字了，其中<code>type</code>列反应了访问类型，从全表扫描到索引扫描，范围扫描，唯一索引查询，常数引用等等。这些速度从慢到快，扫描的行数也是从多到少。如果没有找到合适的访问类型，通常最好的解决办法就是增加一个合适的索引，这也是为什么索引对查询优化这么重要的原因了，因为索引能让MySQL以最高效，扫描行数最少的方式找到需要的记录。</p>\n<p>需要注意的是，索引只是尽可能的只扫描所需要的数据行，并不是说增加索引就能让扫描的行数等于返回的行数。例如</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 假设actor_id上建索引</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> actor_id,<span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> movie <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> actor_id; <span class=\"comment\">-- 使用了聚合函数，返回的行数大多数情况下远远小于扫描的行数</span></span><br></pre></td></tr></table></figure>\n\n<p>如果发现查询需要扫描大量的数据但只返回少数的几行，那么通常可以尝试下面的技巧去优化：</p>\n<ol>\n<li>使用索引覆盖扫描，把所有需要用的列都放在索引中，这样存储引擎无需回表获取对应行就可以返回结果了。</li>\n<li>改变库表结构，例如使用单独的汇总表（例如上述聚合函数的情况优化）</li>\n<li>重写复杂查询，让MySQL优化器能够以更优化的方式执行查询</li>\n</ol>\n"},{"title":"Redis中的数据结构之简单动态字符串","date":"2019-10-23T12:57:21.000Z","_content":"\n前段时间学习Redis，在网上一搜Redis教程，绝大部分的教程都是在教你怎么使用Redis，比如如何set/get一个字符串，Redis列表怎么添加（获取）值等基础用法，这些就相当于我们学习一门计算机语言的语法过程。简单浏览一遍就好了，用到的时候不记得了再去查。（当然你如果记忆力强悍，全部记住也是极好的，省去了查百度的时间，提高了效率）。这些基础的语法知识，个人感觉没有什么含金量，熟悉编程的人几乎大部分人一看就懂。\n\n所以，我们要学习里面涉及到的原理知识，素闻Redis中的数据结构异常牛B，我呢就找了一本书《Redis设计与实现》来学习，在此也记录一下，加深一下印象，也分享一下学习笔记。\n\n首先我们来学习Redis中最简单的数据结构 `SDS`，也就是 `simple dynamic string`，翻译过来就是 `简单动态字符串`。正如其名字所说的，这种数据结构是一个简单的，动态的(可以被修改值)的字符串。\n\n当Redis需要的不仅仅是一个字符串字面量，而是需要一个可以被修改的字符串的时候，Redis就会使用SDS来表示字符串的值。比如在Redis中，包含字符串值的键值对在底层都是由SDS实现的。\n\n举个例子，在Redis客户端执行如下命令：\n```shell\nredis> set msg \"hello word\"\nOK\n```\n这个命令大家都很熟悉，这在Redis中创建了一个新的键值对，键为`msg`，值就是我们最熟悉的`hello world`。其中，`msg`是一个字符串，`hello world`也是一个字符串。上面说了，包含字符串值的键值对在底层都是由SDS实现的。\n所以\n- 键值对的键 `msg`是一个字符串对象，底层的实现是一个保存着字符串`msg`的SDS\n- 键值对的值 `hello world`也是一个字符串对象，底层的实现是一个保存着字符串`hello world`的SDS\n\n再举个例子：\n```shell\nredis> rpush fruits \"apple\" \"banana\" \"cherry\"\n```\n这个命令大家也知道，在Redis中创建了一个列表，其实也是一个键值对，键为`fruits`，值为`\"apple\" \"banana\" \"cherry\"`，其中：\n- 键值对的键 `fruits`是一个字符串对象，底层的实现是一个保存着字符串`fruits`的SDS\n- 键值对的值 `\"apple\" \"banana\" \"cherry\"`是一个列表对象，其中包含了三个字符串对象，这三个字符串对象分别由三个SDS实现：第一个SDS保存着\"apple\"，第二个SDS保存着\"banana\"，第三个SDS保存着\"cherry\"\n\n除了用来保存Redis中的字符串值之外，SDS还被用作缓冲区，这个以后我们再说。\n\n说了一些SDS在Redis中的应用，那么，SDS的数据结构到底是什么样子呢？\n\n我们来看一下SDS的数据结构定义代码：\n- 注：此书基于的Redis版本不是最新的，最新的版本中，SDS的数据结构做了一些优化，但是大同小异，大家有兴趣可以去github看Redis最新的源码。\n```c++\nstruct sdshdr {\n    int len; //记录buf数组中已使用的字节数量，等于SDS所保存的字符串长度\n    int free; //记录buf数组中未使用的字节数量\n    char buf[]; //字节数组，用来保存字符串的值\n}\n```\n\n比如我们定义一个字符串“Redis”，在SDS中会怎么存储呢？\n![](/pic_doc/redis_sds.jpeg) \n\n\n1. free属性的值为0，表示这个SDS没有分配任何未使用空间。\n2. len属性值为5，表示这个SDS保存了一个长度为5的字符串\n3. buf属性是一个char类型的数组，数组的前五个元素分别保存了 'R','e','d','i','s' 五个字符，而最后一个元素则保存了空字符'\\0'。\n\n学过c语言的都知道，c语言中字符串的结尾惯例就是一个空字符 `\\0`，Redis是用c语言编写的，所以遵循c语言字符串结尾的规范。大家可以看到结尾的空字符`\\0`虽然占用了一个字符的空间，但不计算在SDS的len属性里面，所以这个空字符串对于SDS的使用者是完全透明的，这样的好处是SDS可以直接重用一部分c语言字符串库中的函数。比如 `<stdio.h>/printf`函数。\n\n说完SDS的数据结构，大家肯定知道了SDS中的`len`与`buf[]`属性的含义，但可能不知道`free`是用来做什么的，我们暂时不讨论这个，下一篇再详细说明。\n\n既然Redis是用c语言编写的，那么保存字符串的时候为什么不用c语言中的表示方式呢？为何还要定义一个SDS呢？\n\n我们先来看一下\"Redis\"这个字符串在c语言中的表示\n![](/pic_doc/redis_c_string.jpeg)\n\n可以看到，c语言使用的这种简单的字符串表示方式，没有记录字符串自身的长度信息，也就是没有SDS中的`len`属性。想一下若是在c语言中获取这个字符串的长度该怎么获取呢？\n\n只有一种方法，那就是循环遍历整个字符串，对遇到的每个字符进行计数，直到遇到代表字符串结尾的空字符`\\0`为止。这个操作的时间复杂度为`O(n)`，虽然这个复杂度看起来并不是很高，但是还是满足不了Redis在效率性方面的要求（众所周知，Redis的应用场景大部分都会面临海量的并发，对其性能要求很高）。\n\n那么SDS在获取字符串长度时候的时间复杂度是多少呢？因为SDS在len属性中记录了SDS本身字符串的长度，所以获取字符串长度只需要访问SDS的len属性，所以时间复杂度为`O(1)`。\n\n可以看到，通过使用SDS而非c语言中的字符串，Redis将获取字符串的时间复杂度从`O(n)`降到了`O(1)`，所以这确保了获取字符串长度的工作不会成为Redis的性能瓶颈。\n\n当然，SDS与c字符串相比并不只是满足Redis在效率方面的要求，也满足了Redis对安全性以及功能方面的要求，这个我们下期再说吧。\n\n\n","source":"_posts/Redis中的数据结构之简单动态字符串.md","raw":"---\ntitle: Redis中的数据结构之简单动态字符串\ndate: 2019-10-23 20:57:21\ntags: [Redis,数据结构]\n---\n\n前段时间学习Redis，在网上一搜Redis教程，绝大部分的教程都是在教你怎么使用Redis，比如如何set/get一个字符串，Redis列表怎么添加（获取）值等基础用法，这些就相当于我们学习一门计算机语言的语法过程。简单浏览一遍就好了，用到的时候不记得了再去查。（当然你如果记忆力强悍，全部记住也是极好的，省去了查百度的时间，提高了效率）。这些基础的语法知识，个人感觉没有什么含金量，熟悉编程的人几乎大部分人一看就懂。\n\n所以，我们要学习里面涉及到的原理知识，素闻Redis中的数据结构异常牛B，我呢就找了一本书《Redis设计与实现》来学习，在此也记录一下，加深一下印象，也分享一下学习笔记。\n\n首先我们来学习Redis中最简单的数据结构 `SDS`，也就是 `simple dynamic string`，翻译过来就是 `简单动态字符串`。正如其名字所说的，这种数据结构是一个简单的，动态的(可以被修改值)的字符串。\n\n当Redis需要的不仅仅是一个字符串字面量，而是需要一个可以被修改的字符串的时候，Redis就会使用SDS来表示字符串的值。比如在Redis中，包含字符串值的键值对在底层都是由SDS实现的。\n\n举个例子，在Redis客户端执行如下命令：\n```shell\nredis> set msg \"hello word\"\nOK\n```\n这个命令大家都很熟悉，这在Redis中创建了一个新的键值对，键为`msg`，值就是我们最熟悉的`hello world`。其中，`msg`是一个字符串，`hello world`也是一个字符串。上面说了，包含字符串值的键值对在底层都是由SDS实现的。\n所以\n- 键值对的键 `msg`是一个字符串对象，底层的实现是一个保存着字符串`msg`的SDS\n- 键值对的值 `hello world`也是一个字符串对象，底层的实现是一个保存着字符串`hello world`的SDS\n\n再举个例子：\n```shell\nredis> rpush fruits \"apple\" \"banana\" \"cherry\"\n```\n这个命令大家也知道，在Redis中创建了一个列表，其实也是一个键值对，键为`fruits`，值为`\"apple\" \"banana\" \"cherry\"`，其中：\n- 键值对的键 `fruits`是一个字符串对象，底层的实现是一个保存着字符串`fruits`的SDS\n- 键值对的值 `\"apple\" \"banana\" \"cherry\"`是一个列表对象，其中包含了三个字符串对象，这三个字符串对象分别由三个SDS实现：第一个SDS保存着\"apple\"，第二个SDS保存着\"banana\"，第三个SDS保存着\"cherry\"\n\n除了用来保存Redis中的字符串值之外，SDS还被用作缓冲区，这个以后我们再说。\n\n说了一些SDS在Redis中的应用，那么，SDS的数据结构到底是什么样子呢？\n\n我们来看一下SDS的数据结构定义代码：\n- 注：此书基于的Redis版本不是最新的，最新的版本中，SDS的数据结构做了一些优化，但是大同小异，大家有兴趣可以去github看Redis最新的源码。\n```c++\nstruct sdshdr {\n    int len; //记录buf数组中已使用的字节数量，等于SDS所保存的字符串长度\n    int free; //记录buf数组中未使用的字节数量\n    char buf[]; //字节数组，用来保存字符串的值\n}\n```\n\n比如我们定义一个字符串“Redis”，在SDS中会怎么存储呢？\n![](/pic_doc/redis_sds.jpeg) \n\n\n1. free属性的值为0，表示这个SDS没有分配任何未使用空间。\n2. len属性值为5，表示这个SDS保存了一个长度为5的字符串\n3. buf属性是一个char类型的数组，数组的前五个元素分别保存了 'R','e','d','i','s' 五个字符，而最后一个元素则保存了空字符'\\0'。\n\n学过c语言的都知道，c语言中字符串的结尾惯例就是一个空字符 `\\0`，Redis是用c语言编写的，所以遵循c语言字符串结尾的规范。大家可以看到结尾的空字符`\\0`虽然占用了一个字符的空间，但不计算在SDS的len属性里面，所以这个空字符串对于SDS的使用者是完全透明的，这样的好处是SDS可以直接重用一部分c语言字符串库中的函数。比如 `<stdio.h>/printf`函数。\n\n说完SDS的数据结构，大家肯定知道了SDS中的`len`与`buf[]`属性的含义，但可能不知道`free`是用来做什么的，我们暂时不讨论这个，下一篇再详细说明。\n\n既然Redis是用c语言编写的，那么保存字符串的时候为什么不用c语言中的表示方式呢？为何还要定义一个SDS呢？\n\n我们先来看一下\"Redis\"这个字符串在c语言中的表示\n![](/pic_doc/redis_c_string.jpeg)\n\n可以看到，c语言使用的这种简单的字符串表示方式，没有记录字符串自身的长度信息，也就是没有SDS中的`len`属性。想一下若是在c语言中获取这个字符串的长度该怎么获取呢？\n\n只有一种方法，那就是循环遍历整个字符串，对遇到的每个字符进行计数，直到遇到代表字符串结尾的空字符`\\0`为止。这个操作的时间复杂度为`O(n)`，虽然这个复杂度看起来并不是很高，但是还是满足不了Redis在效率性方面的要求（众所周知，Redis的应用场景大部分都会面临海量的并发，对其性能要求很高）。\n\n那么SDS在获取字符串长度时候的时间复杂度是多少呢？因为SDS在len属性中记录了SDS本身字符串的长度，所以获取字符串长度只需要访问SDS的len属性，所以时间复杂度为`O(1)`。\n\n可以看到，通过使用SDS而非c语言中的字符串，Redis将获取字符串的时间复杂度从`O(n)`降到了`O(1)`，所以这确保了获取字符串长度的工作不会成为Redis的性能瓶颈。\n\n当然，SDS与c字符串相比并不只是满足Redis在效率方面的要求，也满足了Redis对安全性以及功能方面的要求，这个我们下期再说吧。\n\n\n","slug":"Redis中的数据结构之简单动态字符串","published":1,"updated":"2019-10-27T10:43:00.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79dj000l07k30tp1gxvs","content":"<p>前段时间学习Redis，在网上一搜Redis教程，绝大部分的教程都是在教你怎么使用Redis，比如如何set/get一个字符串，Redis列表怎么添加（获取）值等基础用法，这些就相当于我们学习一门计算机语言的语法过程。简单浏览一遍就好了，用到的时候不记得了再去查。（当然你如果记忆力强悍，全部记住也是极好的，省去了查百度的时间，提高了效率）。这些基础的语法知识，个人感觉没有什么含金量，熟悉编程的人几乎大部分人一看就懂。</p>\n<p>所以，我们要学习里面涉及到的原理知识，素闻Redis中的数据结构异常牛B，我呢就找了一本书《Redis设计与实现》来学习，在此也记录一下，加深一下印象，也分享一下学习笔记。</p>\n<p>首先我们来学习Redis中最简单的数据结构 <code>SDS</code>，也就是 <code>simple dynamic string</code>，翻译过来就是 <code>简单动态字符串</code>。正如其名字所说的，这种数据结构是一个简单的，动态的(可以被修改值)的字符串。</p>\n<p>当Redis需要的不仅仅是一个字符串字面量，而是需要一个可以被修改的字符串的时候，Redis就会使用SDS来表示字符串的值。比如在Redis中，包含字符串值的键值对在底层都是由SDS实现的。</p>\n<p>举个例子，在Redis客户端执行如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">redis&gt;</span><span class=\"bash\"> <span class=\"built_in\">set</span> msg <span class=\"string\">\"hello word\"</span></span></span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<p>这个命令大家都很熟悉，这在Redis中创建了一个新的键值对，键为<code>msg</code>，值就是我们最熟悉的<code>hello world</code>。其中，<code>msg</code>是一个字符串，<code>hello world</code>也是一个字符串。上面说了，包含字符串值的键值对在底层都是由SDS实现的。<br>所以</p>\n<ul>\n<li>键值对的键 <code>msg</code>是一个字符串对象，底层的实现是一个保存着字符串<code>msg</code>的SDS</li>\n<li>键值对的值 <code>hello world</code>也是一个字符串对象，底层的实现是一个保存着字符串<code>hello world</code>的SDS</li>\n</ul>\n<p>再举个例子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">redis&gt;</span><span class=\"bash\"> rpush fruits <span class=\"string\">\"apple\"</span> <span class=\"string\">\"banana\"</span> <span class=\"string\">\"cherry\"</span></span></span><br></pre></td></tr></table></figure>\n<p>这个命令大家也知道，在Redis中创建了一个列表，其实也是一个键值对，键为<code>fruits</code>，值为<code>&quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;</code>，其中：</p>\n<ul>\n<li>键值对的键 <code>fruits</code>是一个字符串对象，底层的实现是一个保存着字符串<code>fruits</code>的SDS</li>\n<li>键值对的值 <code>&quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;</code>是一个列表对象，其中包含了三个字符串对象，这三个字符串对象分别由三个SDS实现：第一个SDS保存着”apple”，第二个SDS保存着”banana”，第三个SDS保存着”cherry”</li>\n</ul>\n<p>除了用来保存Redis中的字符串值之外，SDS还被用作缓冲区，这个以后我们再说。</p>\n<p>说了一些SDS在Redis中的应用，那么，SDS的数据结构到底是什么样子呢？</p>\n<p>我们来看一下SDS的数据结构定义代码：</p>\n<ul>\n<li>注：此书基于的Redis版本不是最新的，最新的版本中，SDS的数据结构做了一些优化，但是大同小异，大家有兴趣可以去github看Redis最新的源码。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len; <span class=\"comment\">//记录buf数组中已使用的字节数量，等于SDS所保存的字符串长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>; <span class=\"comment\">//记录buf数组中未使用的字节数量</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[]; <span class=\"comment\">//字节数组，用来保存字符串的值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>比如我们定义一个字符串“Redis”，在SDS中会怎么存储呢？<br><img src=\"/pic_doc/redis_sds.jpeg\" alt=\"\"> </p>\n<ol>\n<li>free属性的值为0，表示这个SDS没有分配任何未使用空间。</li>\n<li>len属性值为5，表示这个SDS保存了一个长度为5的字符串</li>\n<li>buf属性是一个char类型的数组，数组的前五个元素分别保存了 ‘R’,’e’,’d’,’i’,’s’ 五个字符，而最后一个元素则保存了空字符’\\0’。</li>\n</ol>\n<p>学过c语言的都知道，c语言中字符串的结尾惯例就是一个空字符 <code>\\0</code>，Redis是用c语言编写的，所以遵循c语言字符串结尾的规范。大家可以看到结尾的空字符<code>\\0</code>虽然占用了一个字符的空间，但不计算在SDS的len属性里面，所以这个空字符串对于SDS的使用者是完全透明的，这样的好处是SDS可以直接重用一部分c语言字符串库中的函数。比如 <code>&lt;stdio.h&gt;/printf</code>函数。</p>\n<p>说完SDS的数据结构，大家肯定知道了SDS中的<code>len</code>与<code>buf[]</code>属性的含义，但可能不知道<code>free</code>是用来做什么的，我们暂时不讨论这个，下一篇再详细说明。</p>\n<p>既然Redis是用c语言编写的，那么保存字符串的时候为什么不用c语言中的表示方式呢？为何还要定义一个SDS呢？</p>\n<p>我们先来看一下”Redis”这个字符串在c语言中的表示<br><img src=\"/pic_doc/redis_c_string.jpeg\" alt=\"\"></p>\n<p>可以看到，c语言使用的这种简单的字符串表示方式，没有记录字符串自身的长度信息，也就是没有SDS中的<code>len</code>属性。想一下若是在c语言中获取这个字符串的长度该怎么获取呢？</p>\n<p>只有一种方法，那就是循环遍历整个字符串，对遇到的每个字符进行计数，直到遇到代表字符串结尾的空字符<code>\\0</code>为止。这个操作的时间复杂度为<code>O(n)</code>，虽然这个复杂度看起来并不是很高，但是还是满足不了Redis在效率性方面的要求（众所周知，Redis的应用场景大部分都会面临海量的并发，对其性能要求很高）。</p>\n<p>那么SDS在获取字符串长度时候的时间复杂度是多少呢？因为SDS在len属性中记录了SDS本身字符串的长度，所以获取字符串长度只需要访问SDS的len属性，所以时间复杂度为<code>O(1)</code>。</p>\n<p>可以看到，通过使用SDS而非c语言中的字符串，Redis将获取字符串的时间复杂度从<code>O(n)</code>降到了<code>O(1)</code>，所以这确保了获取字符串长度的工作不会成为Redis的性能瓶颈。</p>\n<p>当然，SDS与c字符串相比并不只是满足Redis在效率方面的要求，也满足了Redis对安全性以及功能方面的要求，这个我们下期再说吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前段时间学习Redis，在网上一搜Redis教程，绝大部分的教程都是在教你怎么使用Redis，比如如何set/get一个字符串，Redis列表怎么添加（获取）值等基础用法，这些就相当于我们学习一门计算机语言的语法过程。简单浏览一遍就好了，用到的时候不记得了再去查。（当然你如果记忆力强悍，全部记住也是极好的，省去了查百度的时间，提高了效率）。这些基础的语法知识，个人感觉没有什么含金量，熟悉编程的人几乎大部分人一看就懂。</p>\n<p>所以，我们要学习里面涉及到的原理知识，素闻Redis中的数据结构异常牛B，我呢就找了一本书《Redis设计与实现》来学习，在此也记录一下，加深一下印象，也分享一下学习笔记。</p>\n<p>首先我们来学习Redis中最简单的数据结构 <code>SDS</code>，也就是 <code>simple dynamic string</code>，翻译过来就是 <code>简单动态字符串</code>。正如其名字所说的，这种数据结构是一个简单的，动态的(可以被修改值)的字符串。</p>\n<p>当Redis需要的不仅仅是一个字符串字面量，而是需要一个可以被修改的字符串的时候，Redis就会使用SDS来表示字符串的值。比如在Redis中，包含字符串值的键值对在底层都是由SDS实现的。</p>\n<p>举个例子，在Redis客户端执行如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">redis&gt;</span><span class=\"bash\"> <span class=\"built_in\">set</span> msg <span class=\"string\">\"hello word\"</span></span></span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<p>这个命令大家都很熟悉，这在Redis中创建了一个新的键值对，键为<code>msg</code>，值就是我们最熟悉的<code>hello world</code>。其中，<code>msg</code>是一个字符串，<code>hello world</code>也是一个字符串。上面说了，包含字符串值的键值对在底层都是由SDS实现的。<br>所以</p>\n<ul>\n<li>键值对的键 <code>msg</code>是一个字符串对象，底层的实现是一个保存着字符串<code>msg</code>的SDS</li>\n<li>键值对的值 <code>hello world</code>也是一个字符串对象，底层的实现是一个保存着字符串<code>hello world</code>的SDS</li>\n</ul>\n<p>再举个例子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">redis&gt;</span><span class=\"bash\"> rpush fruits <span class=\"string\">\"apple\"</span> <span class=\"string\">\"banana\"</span> <span class=\"string\">\"cherry\"</span></span></span><br></pre></td></tr></table></figure>\n<p>这个命令大家也知道，在Redis中创建了一个列表，其实也是一个键值对，键为<code>fruits</code>，值为<code>&quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;</code>，其中：</p>\n<ul>\n<li>键值对的键 <code>fruits</code>是一个字符串对象，底层的实现是一个保存着字符串<code>fruits</code>的SDS</li>\n<li>键值对的值 <code>&quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;</code>是一个列表对象，其中包含了三个字符串对象，这三个字符串对象分别由三个SDS实现：第一个SDS保存着”apple”，第二个SDS保存着”banana”，第三个SDS保存着”cherry”</li>\n</ul>\n<p>除了用来保存Redis中的字符串值之外，SDS还被用作缓冲区，这个以后我们再说。</p>\n<p>说了一些SDS在Redis中的应用，那么，SDS的数据结构到底是什么样子呢？</p>\n<p>我们来看一下SDS的数据结构定义代码：</p>\n<ul>\n<li>注：此书基于的Redis版本不是最新的，最新的版本中，SDS的数据结构做了一些优化，但是大同小异，大家有兴趣可以去github看Redis最新的源码。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len; <span class=\"comment\">//记录buf数组中已使用的字节数量，等于SDS所保存的字符串长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>; <span class=\"comment\">//记录buf数组中未使用的字节数量</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[]; <span class=\"comment\">//字节数组，用来保存字符串的值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>比如我们定义一个字符串“Redis”，在SDS中会怎么存储呢？<br><img src=\"/pic_doc/redis_sds.jpeg\" alt=\"\"> </p>\n<ol>\n<li>free属性的值为0，表示这个SDS没有分配任何未使用空间。</li>\n<li>len属性值为5，表示这个SDS保存了一个长度为5的字符串</li>\n<li>buf属性是一个char类型的数组，数组的前五个元素分别保存了 ‘R’,’e’,’d’,’i’,’s’ 五个字符，而最后一个元素则保存了空字符’\\0’。</li>\n</ol>\n<p>学过c语言的都知道，c语言中字符串的结尾惯例就是一个空字符 <code>\\0</code>，Redis是用c语言编写的，所以遵循c语言字符串结尾的规范。大家可以看到结尾的空字符<code>\\0</code>虽然占用了一个字符的空间，但不计算在SDS的len属性里面，所以这个空字符串对于SDS的使用者是完全透明的，这样的好处是SDS可以直接重用一部分c语言字符串库中的函数。比如 <code>&lt;stdio.h&gt;/printf</code>函数。</p>\n<p>说完SDS的数据结构，大家肯定知道了SDS中的<code>len</code>与<code>buf[]</code>属性的含义，但可能不知道<code>free</code>是用来做什么的，我们暂时不讨论这个，下一篇再详细说明。</p>\n<p>既然Redis是用c语言编写的，那么保存字符串的时候为什么不用c语言中的表示方式呢？为何还要定义一个SDS呢？</p>\n<p>我们先来看一下”Redis”这个字符串在c语言中的表示<br><img src=\"/pic_doc/redis_c_string.jpeg\" alt=\"\"></p>\n<p>可以看到，c语言使用的这种简单的字符串表示方式，没有记录字符串自身的长度信息，也就是没有SDS中的<code>len</code>属性。想一下若是在c语言中获取这个字符串的长度该怎么获取呢？</p>\n<p>只有一种方法，那就是循环遍历整个字符串，对遇到的每个字符进行计数，直到遇到代表字符串结尾的空字符<code>\\0</code>为止。这个操作的时间复杂度为<code>O(n)</code>，虽然这个复杂度看起来并不是很高，但是还是满足不了Redis在效率性方面的要求（众所周知，Redis的应用场景大部分都会面临海量的并发，对其性能要求很高）。</p>\n<p>那么SDS在获取字符串长度时候的时间复杂度是多少呢？因为SDS在len属性中记录了SDS本身字符串的长度，所以获取字符串长度只需要访问SDS的len属性，所以时间复杂度为<code>O(1)</code>。</p>\n<p>可以看到，通过使用SDS而非c语言中的字符串，Redis将获取字符串的时间复杂度从<code>O(n)</code>降到了<code>O(1)</code>，所以这确保了获取字符串长度的工作不会成为Redis的性能瓶颈。</p>\n<p>当然，SDS与c字符串相比并不只是满足Redis在效率方面的要求，也满足了Redis对安全性以及功能方面的要求，这个我们下期再说吧。</p>\n"},{"title":"Redis中的数据结构之简单动态字符串（二）","date":"2019-11-08T12:10:42.000Z","_content":"\n上一篇我们讲到了Redis中简单动态字符串与c语言中字符串相比的一个优势，也就是获取字符串长度时的时间复杂度有了大幅度降低，满足了Redis在效率方面的要求。\n\n今天来说一下，SDS是如何满足Redis对字符串在安全性方面的要求。\n\n除了获取字符串长度的复杂度高之外，C语言中字符串不记录自身长度带来的另一个问题是容易造成缓冲区溢出（buffer overflow），例如`<string.h>/strcat`函数可以将`src`字符串中的内容拼接到`dest`字符串末尾。\n\n```c++\nchar* strcat(char* dest,const char* src)\n```\n\n举个例子，假如一段程序，在内存中有两个紧紧相邻的c语言字符串`s1`和`s2`与`Redis`,`MongoDB`，如图所示\n\n![在内存中紧邻的两个C字符串](/pic_doc/c_string_s1&s2.jpeg) \n\n如果一个程序员决定通过使用`strcat`函数来修改`s1`的内容为`Redis Cluster`\n\n```c++\nstrcat(s1, \"Cluster\");\n```\n\n但他忘了在执行`strcat`之前为`s1`分配足够的空间（众所周知，在c语言与c++中需要程序员自己手工对内存进行管理），那么就会导致`Cluster`溢出到`s2`的位置，如下图：\n\n![s2被溢出的内容覆盖](/pic_doc/c_string_s1&s2_buf_overflow.jpeg) \n\n而在SDS中，通过一个巧妙的方法避免了这种情况的发生，也就是利用SDS结构体中的`free`属性(在最新版的Redis中，SDS的结构体中已经移除了free属性，转而使用alloc来代替，不过两个属性的含义有所不同，但在SDS中起到的作用基本一致，这个有机会再说哈)。那么SDS是怎么使用`free`属性来杜绝缓冲区溢出的呢？\n\n举个例子：SDS的API中也有一个用于执行拼接操作的`sdscat`函数，类似于c语言中的`strcat`，当SDS中`sdscat`需要拼接字符串的时候，会先检查SDS的空间是否满足所需的要求，如果不满足的话，Redis会自动将SDS的空间扩展到所需大小，然后再执行拼接操作，所以使用SDS既不必像c语言中手动修改空间大小，也不会出现前面所说的c语言中字符串的缓冲区问题。（`注：这里只是举了一个拼接字符串的例子，其他的有关SDS的API在修改SDS的时候也会做上面的操作`）\n\n例如有以下SDS：\n\n![执行sdscat之前](/pic_doc/redis_sds.jpeg)\n\n我们执行：\n\n```c++\nsdscat(s,\"Cluster\");\n```\n\n拼接完的SDS如下图所示：\n\n![执行sdscat之后](/pic_doc/sds_after_sdscat.jpeg)\n\n注意：上图所示的SDS，sdscat不仅对SDS进行了拼接操作，还为SDS分配了13字节的未使用空间，并且拼接之后的字符串正好也是13字节长，这种现象既不是巧合，也不是bug(工业界以及大规模使用的Redis怎么会有bug！？)，这和SDS的空间分配策略有关系，空间分配策略又是Redis一个很巧妙的设计，所以，我们下一篇再讲吧！\n\n\n","source":"_posts/Redis中的数据结构之简单动态字符串（二）.md","raw":"---\ntitle: Redis中的数据结构之简单动态字符串（二）\ndate: 2019-11-08 20:10:42\ntags: [Redis,数据结构]\n---\n\n上一篇我们讲到了Redis中简单动态字符串与c语言中字符串相比的一个优势，也就是获取字符串长度时的时间复杂度有了大幅度降低，满足了Redis在效率方面的要求。\n\n今天来说一下，SDS是如何满足Redis对字符串在安全性方面的要求。\n\n除了获取字符串长度的复杂度高之外，C语言中字符串不记录自身长度带来的另一个问题是容易造成缓冲区溢出（buffer overflow），例如`<string.h>/strcat`函数可以将`src`字符串中的内容拼接到`dest`字符串末尾。\n\n```c++\nchar* strcat(char* dest,const char* src)\n```\n\n举个例子，假如一段程序，在内存中有两个紧紧相邻的c语言字符串`s1`和`s2`与`Redis`,`MongoDB`，如图所示\n\n![在内存中紧邻的两个C字符串](/pic_doc/c_string_s1&s2.jpeg) \n\n如果一个程序员决定通过使用`strcat`函数来修改`s1`的内容为`Redis Cluster`\n\n```c++\nstrcat(s1, \"Cluster\");\n```\n\n但他忘了在执行`strcat`之前为`s1`分配足够的空间（众所周知，在c语言与c++中需要程序员自己手工对内存进行管理），那么就会导致`Cluster`溢出到`s2`的位置，如下图：\n\n![s2被溢出的内容覆盖](/pic_doc/c_string_s1&s2_buf_overflow.jpeg) \n\n而在SDS中，通过一个巧妙的方法避免了这种情况的发生，也就是利用SDS结构体中的`free`属性(在最新版的Redis中，SDS的结构体中已经移除了free属性，转而使用alloc来代替，不过两个属性的含义有所不同，但在SDS中起到的作用基本一致，这个有机会再说哈)。那么SDS是怎么使用`free`属性来杜绝缓冲区溢出的呢？\n\n举个例子：SDS的API中也有一个用于执行拼接操作的`sdscat`函数，类似于c语言中的`strcat`，当SDS中`sdscat`需要拼接字符串的时候，会先检查SDS的空间是否满足所需的要求，如果不满足的话，Redis会自动将SDS的空间扩展到所需大小，然后再执行拼接操作，所以使用SDS既不必像c语言中手动修改空间大小，也不会出现前面所说的c语言中字符串的缓冲区问题。（`注：这里只是举了一个拼接字符串的例子，其他的有关SDS的API在修改SDS的时候也会做上面的操作`）\n\n例如有以下SDS：\n\n![执行sdscat之前](/pic_doc/redis_sds.jpeg)\n\n我们执行：\n\n```c++\nsdscat(s,\"Cluster\");\n```\n\n拼接完的SDS如下图所示：\n\n![执行sdscat之后](/pic_doc/sds_after_sdscat.jpeg)\n\n注意：上图所示的SDS，sdscat不仅对SDS进行了拼接操作，还为SDS分配了13字节的未使用空间，并且拼接之后的字符串正好也是13字节长，这种现象既不是巧合，也不是bug(工业界以及大规模使用的Redis怎么会有bug！？)，这和SDS的空间分配策略有关系，空间分配策略又是Redis一个很巧妙的设计，所以，我们下一篇再讲吧！\n\n\n","slug":"Redis中的数据结构之简单动态字符串（二）","published":1,"updated":"2019-11-08T13:31:45.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79dk000n07k3fbhg3kzn","content":"<p>上一篇我们讲到了Redis中简单动态字符串与c语言中字符串相比的一个优势，也就是获取字符串长度时的时间复杂度有了大幅度降低，满足了Redis在效率方面的要求。</p>\n<p>今天来说一下，SDS是如何满足Redis对字符串在安全性方面的要求。</p>\n<p>除了获取字符串长度的复杂度高之外，C语言中字符串不记录自身长度带来的另一个问题是容易造成缓冲区溢出（buffer overflow），例如<code>&lt;string.h&gt;/strcat</code>函数可以将<code>src</code>字符串中的内容拼接到<code>dest</code>字符串末尾。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">strcat</span><span class=\"params\">(<span class=\"keyword\">char</span>* dest,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* src)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>举个例子，假如一段程序，在内存中有两个紧紧相邻的c语言字符串<code>s1</code>和<code>s2</code>与<code>Redis</code>,<code>MongoDB</code>，如图所示</p>\n<p><img src=\"/pic_doc/c_string_s1&s2.jpeg\" alt=\"在内存中紧邻的两个C字符串\"> </p>\n<p>如果一个程序员决定通过使用<code>strcat</code>函数来修改<code>s1</code>的内容为<code>Redis Cluster</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">strcat</span>(s1, <span class=\"string\">\"Cluster\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>但他忘了在执行<code>strcat</code>之前为<code>s1</code>分配足够的空间（众所周知，在c语言与c++中需要程序员自己手工对内存进行管理），那么就会导致<code>Cluster</code>溢出到<code>s2</code>的位置，如下图：</p>\n<p><img src=\"/pic_doc/c_string_s1&s2_buf_overflow.jpeg\" alt=\"s2被溢出的内容覆盖\"> </p>\n<p>而在SDS中，通过一个巧妙的方法避免了这种情况的发生，也就是利用SDS结构体中的<code>free</code>属性(在最新版的Redis中，SDS的结构体中已经移除了free属性，转而使用alloc来代替，不过两个属性的含义有所不同，但在SDS中起到的作用基本一致，这个有机会再说哈)。那么SDS是怎么使用<code>free</code>属性来杜绝缓冲区溢出的呢？</p>\n<p>举个例子：SDS的API中也有一个用于执行拼接操作的<code>sdscat</code>函数，类似于c语言中的<code>strcat</code>，当SDS中<code>sdscat</code>需要拼接字符串的时候，会先检查SDS的空间是否满足所需的要求，如果不满足的话，Redis会自动将SDS的空间扩展到所需大小，然后再执行拼接操作，所以使用SDS既不必像c语言中手动修改空间大小，也不会出现前面所说的c语言中字符串的缓冲区问题。（<code>注：这里只是举了一个拼接字符串的例子，其他的有关SDS的API在修改SDS的时候也会做上面的操作</code>）</p>\n<p>例如有以下SDS：</p>\n<p><img src=\"/pic_doc/redis_sds.jpeg\" alt=\"执行sdscat之前\"></p>\n<p>我们执行：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdscat(s,<span class=\"string\">\"Cluster\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>拼接完的SDS如下图所示：</p>\n<p><img src=\"/pic_doc/sds_after_sdscat.jpeg\" alt=\"执行sdscat之后\"></p>\n<p>注意：上图所示的SDS，sdscat不仅对SDS进行了拼接操作，还为SDS分配了13字节的未使用空间，并且拼接之后的字符串正好也是13字节长，这种现象既不是巧合，也不是bug(工业界以及大规模使用的Redis怎么会有bug！？)，这和SDS的空间分配策略有关系，空间分配策略又是Redis一个很巧妙的设计，所以，我们下一篇再讲吧！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇我们讲到了Redis中简单动态字符串与c语言中字符串相比的一个优势，也就是获取字符串长度时的时间复杂度有了大幅度降低，满足了Redis在效率方面的要求。</p>\n<p>今天来说一下，SDS是如何满足Redis对字符串在安全性方面的要求。</p>\n<p>除了获取字符串长度的复杂度高之外，C语言中字符串不记录自身长度带来的另一个问题是容易造成缓冲区溢出（buffer overflow），例如<code>&lt;string.h&gt;/strcat</code>函数可以将<code>src</code>字符串中的内容拼接到<code>dest</code>字符串末尾。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">strcat</span><span class=\"params\">(<span class=\"keyword\">char</span>* dest,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* src)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>举个例子，假如一段程序，在内存中有两个紧紧相邻的c语言字符串<code>s1</code>和<code>s2</code>与<code>Redis</code>,<code>MongoDB</code>，如图所示</p>\n<p><img src=\"/pic_doc/c_string_s1&s2.jpeg\" alt=\"在内存中紧邻的两个C字符串\"> </p>\n<p>如果一个程序员决定通过使用<code>strcat</code>函数来修改<code>s1</code>的内容为<code>Redis Cluster</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">strcat</span>(s1, <span class=\"string\">\"Cluster\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>但他忘了在执行<code>strcat</code>之前为<code>s1</code>分配足够的空间（众所周知，在c语言与c++中需要程序员自己手工对内存进行管理），那么就会导致<code>Cluster</code>溢出到<code>s2</code>的位置，如下图：</p>\n<p><img src=\"/pic_doc/c_string_s1&s2_buf_overflow.jpeg\" alt=\"s2被溢出的内容覆盖\"> </p>\n<p>而在SDS中，通过一个巧妙的方法避免了这种情况的发生，也就是利用SDS结构体中的<code>free</code>属性(在最新版的Redis中，SDS的结构体中已经移除了free属性，转而使用alloc来代替，不过两个属性的含义有所不同，但在SDS中起到的作用基本一致，这个有机会再说哈)。那么SDS是怎么使用<code>free</code>属性来杜绝缓冲区溢出的呢？</p>\n<p>举个例子：SDS的API中也有一个用于执行拼接操作的<code>sdscat</code>函数，类似于c语言中的<code>strcat</code>，当SDS中<code>sdscat</code>需要拼接字符串的时候，会先检查SDS的空间是否满足所需的要求，如果不满足的话，Redis会自动将SDS的空间扩展到所需大小，然后再执行拼接操作，所以使用SDS既不必像c语言中手动修改空间大小，也不会出现前面所说的c语言中字符串的缓冲区问题。（<code>注：这里只是举了一个拼接字符串的例子，其他的有关SDS的API在修改SDS的时候也会做上面的操作</code>）</p>\n<p>例如有以下SDS：</p>\n<p><img src=\"/pic_doc/redis_sds.jpeg\" alt=\"执行sdscat之前\"></p>\n<p>我们执行：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdscat(s,<span class=\"string\">\"Cluster\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>拼接完的SDS如下图所示：</p>\n<p><img src=\"/pic_doc/sds_after_sdscat.jpeg\" alt=\"执行sdscat之后\"></p>\n<p>注意：上图所示的SDS，sdscat不仅对SDS进行了拼接操作，还为SDS分配了13字节的未使用空间，并且拼接之后的字符串正好也是13字节长，这种现象既不是巧合，也不是bug(工业界以及大规模使用的Redis怎么会有bug！？)，这和SDS的空间分配策略有关系，空间分配策略又是Redis一个很巧妙的设计，所以，我们下一篇再讲吧！</p>\n"},{"title":"二分查找及其Java代码实现","date":"2019-08-31T06:38:11.000Z","_content":"假设我们在词典中查找一个k开头的单词，我们会怎么做呢？\n1. 从词典第一页开始一页一页的翻页，然后直到翻到k开头的单词。\n2. 直接翻页到词典大概中间的位置，然后根据词典a-z排列规律，判断翻到的页在k之前，还是之后，然后继续翻页。\n\n其实这就是一个查找问题，上面第二种方法就是 `二分查找`\n\n我们再举一个例子：\n我自己随便想一个 `1-100` 之间的数字，然后让你来猜，你每次猜测之后我都会告诉你，猜大了还是猜小了。（假设我心中想的数字是60）\n\n1. 第一种方式：假设你从 `1` 开始依次往上猜，要猜到 `60` 你得猜60次才能猜到。这种方式就是 `简单查找`。（当然聪明如你肯定不会以这种方式来猜）\n2. 第二种方式：从 `50` 开始，小了，排除`1-50`，排除了一半数字；接下来你猜 `75`，大了，又排除了一半数字`75-100`；接下来你猜 `63`，大了；依次类推，你每次猜测的都是中间的数字，从而每次都将余下的数字排除一半，无论我心中的所想的数字是几，你在7步之内就能猜到。（大家想想为什么是7次？给个提示，2的6次方是64,2的7次方是128。）\n\n上述第二种方式就是 `二分查找` 。\n\n一般而言，对于包含n个元素的列表，用二分查找最多需要 `logn` 步（log以2为底），用简单查找最多需要 `n` 步\n\n接下来我们看看如何编写二分查找的Java代码，有两种方式，一种是利用循环，另一种是利用递归（递归是什么此篇文章就不展开讲了，之后再讲。）\n\n另外需要注意的是，二分查找只能应用在排好顺序的数组或列表上。\n```java\n\n/**\n* BinSearch\n*/\npublic class BinSearch {\n    public static void main(String[] args) {\n        int[] arr = {1,4,8,16,45,48,78};\n        int index = recursionBinarySearch(arr,48,0,arr.length-1);\n        int index2 = commonBinarySearch(arr,48);\n        System.out.println(index);\n        System.out.println(index2);\n    }\n    //递归\n    public static int recursionBinarySearch(int[] arr,int key,int low,int high){\n        \n        if(key < arr[low] || key > arr[high] || low > high){\n            return -1;              \n        }\n        \n        int middle = (low + high) / 2;          //初始中间位置\n        if(arr[middle] > key){\n            //比关键字大则关键字在左区域\n            return recursionBinarySearch(arr, key,low,middle-1);\n        }else if(arr[middle] < key){\n            //比关键字小则关键字在右区域\n            return recursionBinarySearch(arr, key,middle+1,high);\n        }else {\n            return middle;\n        }\n    }\n    //循环\n    public static int commonBinarySearch(int[] arr,int key){\n        int low = 0;\n        int high = arr.length - 1;\n        int middle = 0;         //定义middle\n        \n        if(key < arr[low] || key > arr[high] || low > high){\n            return -1;              \n        }\n        \n        while(low <= high){\n            middle = (low + high) / 2;\n            if(arr[middle] > key){\n                //比关键字大则关键字在左区域\n                high = middle - 1;\n            }else if(arr[middle] < key){\n                //比关键字小则关键字在右区域\n                low = middle + 1;\n            }else{\n                return middle;\n            }\n        }\n        return -1;      //最后仍然没有找到，则返回-1\n    }\n}\n\n\n```\n","source":"_posts/二分查找及其Java代码实现.md","raw":"---\ntitle: 二分查找及其Java代码实现\ndate: 2019-08-31 14:38:11\ntags: 算法\n---\n假设我们在词典中查找一个k开头的单词，我们会怎么做呢？\n1. 从词典第一页开始一页一页的翻页，然后直到翻到k开头的单词。\n2. 直接翻页到词典大概中间的位置，然后根据词典a-z排列规律，判断翻到的页在k之前，还是之后，然后继续翻页。\n\n其实这就是一个查找问题，上面第二种方法就是 `二分查找`\n\n我们再举一个例子：\n我自己随便想一个 `1-100` 之间的数字，然后让你来猜，你每次猜测之后我都会告诉你，猜大了还是猜小了。（假设我心中想的数字是60）\n\n1. 第一种方式：假设你从 `1` 开始依次往上猜，要猜到 `60` 你得猜60次才能猜到。这种方式就是 `简单查找`。（当然聪明如你肯定不会以这种方式来猜）\n2. 第二种方式：从 `50` 开始，小了，排除`1-50`，排除了一半数字；接下来你猜 `75`，大了，又排除了一半数字`75-100`；接下来你猜 `63`，大了；依次类推，你每次猜测的都是中间的数字，从而每次都将余下的数字排除一半，无论我心中的所想的数字是几，你在7步之内就能猜到。（大家想想为什么是7次？给个提示，2的6次方是64,2的7次方是128。）\n\n上述第二种方式就是 `二分查找` 。\n\n一般而言，对于包含n个元素的列表，用二分查找最多需要 `logn` 步（log以2为底），用简单查找最多需要 `n` 步\n\n接下来我们看看如何编写二分查找的Java代码，有两种方式，一种是利用循环，另一种是利用递归（递归是什么此篇文章就不展开讲了，之后再讲。）\n\n另外需要注意的是，二分查找只能应用在排好顺序的数组或列表上。\n```java\n\n/**\n* BinSearch\n*/\npublic class BinSearch {\n    public static void main(String[] args) {\n        int[] arr = {1,4,8,16,45,48,78};\n        int index = recursionBinarySearch(arr,48,0,arr.length-1);\n        int index2 = commonBinarySearch(arr,48);\n        System.out.println(index);\n        System.out.println(index2);\n    }\n    //递归\n    public static int recursionBinarySearch(int[] arr,int key,int low,int high){\n        \n        if(key < arr[low] || key > arr[high] || low > high){\n            return -1;              \n        }\n        \n        int middle = (low + high) / 2;          //初始中间位置\n        if(arr[middle] > key){\n            //比关键字大则关键字在左区域\n            return recursionBinarySearch(arr, key,low,middle-1);\n        }else if(arr[middle] < key){\n            //比关键字小则关键字在右区域\n            return recursionBinarySearch(arr, key,middle+1,high);\n        }else {\n            return middle;\n        }\n    }\n    //循环\n    public static int commonBinarySearch(int[] arr,int key){\n        int low = 0;\n        int high = arr.length - 1;\n        int middle = 0;         //定义middle\n        \n        if(key < arr[low] || key > arr[high] || low > high){\n            return -1;              \n        }\n        \n        while(low <= high){\n            middle = (low + high) / 2;\n            if(arr[middle] > key){\n                //比关键字大则关键字在左区域\n                high = middle - 1;\n            }else if(arr[middle] < key){\n                //比关键字小则关键字在右区域\n                low = middle + 1;\n            }else{\n                return middle;\n            }\n        }\n        return -1;      //最后仍然没有找到，则返回-1\n    }\n}\n\n\n```\n","slug":"二分查找及其Java代码实现","published":1,"updated":"2019-09-08T08:49:04.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79dl000o07k330dm0b63","content":"<p>假设我们在词典中查找一个k开头的单词，我们会怎么做呢？</p>\n<ol>\n<li>从词典第一页开始一页一页的翻页，然后直到翻到k开头的单词。</li>\n<li>直接翻页到词典大概中间的位置，然后根据词典a-z排列规律，判断翻到的页在k之前，还是之后，然后继续翻页。</li>\n</ol>\n<p>其实这就是一个查找问题，上面第二种方法就是 <code>二分查找</code></p>\n<p>我们再举一个例子：<br>我自己随便想一个 <code>1-100</code> 之间的数字，然后让你来猜，你每次猜测之后我都会告诉你，猜大了还是猜小了。（假设我心中想的数字是60）</p>\n<ol>\n<li>第一种方式：假设你从 <code>1</code> 开始依次往上猜，要猜到 <code>60</code> 你得猜60次才能猜到。这种方式就是 <code>简单查找</code>。（当然聪明如你肯定不会以这种方式来猜）</li>\n<li>第二种方式：从 <code>50</code> 开始，小了，排除<code>1-50</code>，排除了一半数字；接下来你猜 <code>75</code>，大了，又排除了一半数字<code>75-100</code>；接下来你猜 <code>63</code>，大了；依次类推，你每次猜测的都是中间的数字，从而每次都将余下的数字排除一半，无论我心中的所想的数字是几，你在7步之内就能猜到。（大家想想为什么是7次？给个提示，2的6次方是64,2的7次方是128。）</li>\n</ol>\n<p>上述第二种方式就是 <code>二分查找</code> 。</p>\n<p>一般而言，对于包含n个元素的列表，用二分查找最多需要 <code>logn</code> 步（log以2为底），用简单查找最多需要 <code>n</code> 步</p>\n<p>接下来我们看看如何编写二分查找的Java代码，有两种方式，一种是利用循环，另一种是利用递归（递归是什么此篇文章就不展开讲了，之后再讲。）</p>\n<p>另外需要注意的是，二分查找只能应用在排好顺序的数组或列表上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* BinSearch</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinSearch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">16</span>,<span class=\"number\">45</span>,<span class=\"number\">48</span>,<span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = recursionBinarySearch(arr,<span class=\"number\">48</span>,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index2 = commonBinarySearch(arr,<span class=\"number\">48</span>);</span><br><span class=\"line\">        System.out.println(index);</span><br><span class=\"line\">        System.out.println(index2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//递归</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">recursionBinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> key,<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; arr[low] || key &gt; arr[high] || low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = (low + high) / <span class=\"number\">2</span>;          <span class=\"comment\">//初始中间位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字大则关键字在左区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,low,middle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字小则关键字在右区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,middle+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//循环</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">commonBinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> high = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = <span class=\"number\">0</span>;         <span class=\"comment\">//定义middle</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; arr[low] || key &gt; arr[high] || low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(low &lt;= high)&#123;</span><br><span class=\"line\">            middle = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//比关键字大则关键字在左区域</span></span><br><span class=\"line\">                high = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//比关键字小则关键字在右区域</span></span><br><span class=\"line\">                low = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;      <span class=\"comment\">//最后仍然没有找到，则返回-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>假设我们在词典中查找一个k开头的单词，我们会怎么做呢？</p>\n<ol>\n<li>从词典第一页开始一页一页的翻页，然后直到翻到k开头的单词。</li>\n<li>直接翻页到词典大概中间的位置，然后根据词典a-z排列规律，判断翻到的页在k之前，还是之后，然后继续翻页。</li>\n</ol>\n<p>其实这就是一个查找问题，上面第二种方法就是 <code>二分查找</code></p>\n<p>我们再举一个例子：<br>我自己随便想一个 <code>1-100</code> 之间的数字，然后让你来猜，你每次猜测之后我都会告诉你，猜大了还是猜小了。（假设我心中想的数字是60）</p>\n<ol>\n<li>第一种方式：假设你从 <code>1</code> 开始依次往上猜，要猜到 <code>60</code> 你得猜60次才能猜到。这种方式就是 <code>简单查找</code>。（当然聪明如你肯定不会以这种方式来猜）</li>\n<li>第二种方式：从 <code>50</code> 开始，小了，排除<code>1-50</code>，排除了一半数字；接下来你猜 <code>75</code>，大了，又排除了一半数字<code>75-100</code>；接下来你猜 <code>63</code>，大了；依次类推，你每次猜测的都是中间的数字，从而每次都将余下的数字排除一半，无论我心中的所想的数字是几，你在7步之内就能猜到。（大家想想为什么是7次？给个提示，2的6次方是64,2的7次方是128。）</li>\n</ol>\n<p>上述第二种方式就是 <code>二分查找</code> 。</p>\n<p>一般而言，对于包含n个元素的列表，用二分查找最多需要 <code>logn</code> 步（log以2为底），用简单查找最多需要 <code>n</code> 步</p>\n<p>接下来我们看看如何编写二分查找的Java代码，有两种方式，一种是利用循环，另一种是利用递归（递归是什么此篇文章就不展开讲了，之后再讲。）</p>\n<p>另外需要注意的是，二分查找只能应用在排好顺序的数组或列表上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* BinSearch</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinSearch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">16</span>,<span class=\"number\">45</span>,<span class=\"number\">48</span>,<span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = recursionBinarySearch(arr,<span class=\"number\">48</span>,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index2 = commonBinarySearch(arr,<span class=\"number\">48</span>);</span><br><span class=\"line\">        System.out.println(index);</span><br><span class=\"line\">        System.out.println(index2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//递归</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">recursionBinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> key,<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; arr[low] || key &gt; arr[high] || low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = (low + high) / <span class=\"number\">2</span>;          <span class=\"comment\">//初始中间位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字大则关键字在左区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,low,middle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字小则关键字在右区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,middle+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//循环</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">commonBinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> high = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = <span class=\"number\">0</span>;         <span class=\"comment\">//定义middle</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; arr[low] || key &gt; arr[high] || low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(low &lt;= high)&#123;</span><br><span class=\"line\">            middle = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//比关键字大则关键字在左区域</span></span><br><span class=\"line\">                high = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//比关键字小则关键字在右区域</span></span><br><span class=\"line\">                low = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;      <span class=\"comment\">//最后仍然没有找到，则返回-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Java并发编程（三）之线程池的使用","date":"2019-11-24T08:40:14.000Z","_content":"\n之前我们在如何创建线程的文章中介绍到了线程池创建线程，接下来学习一下如何使用线程池创建线程。\n\nJava通过Executors提供四种常用线程池，这四种线程池都是通过`ThreadPoolExecutor`实现的，我们来看一下其构造方法\n\n```java\npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n    if (corePoolSize < 0 ||\n        maximumPoolSize <= 0 ||\n        maximumPoolSize < corePoolSize ||\n        keepAliveTime < 0)\n        throw new IllegalArgumentException();\n    if (workQueue == null || threadFactory == null || handler == null)\n        throw new NullPointerException();\n    this.acc = System.getSecurityManager() == null ?\n            null :\n            AccessController.getContext();\n    this.corePoolSize = corePoolSize;\n    this.maximumPoolSize = maximumPoolSize;\n    this.workQueue = workQueue;\n    this.keepAliveTime = unit.toNanos(keepAliveTime);\n    this.threadFactory = threadFactory;\n    this.handler = handler;\n}\n```\n\n构造方法内具体的逻辑我们先忽略，先来看看构造方法的参数含义：\n\n1. corePoolSize: 线程池核心线程个数\n2. maximumPoolSize： 线程池最大线程个数\n3. keepAliveTime： 线程存活时间，指的是如果当前线程池中的线程数量比核心线程数量多，并且是闲置状态，则这些闲置线程能存活的最大时间\n4. unit： 存活时间的时间单位\n5. workQueue： 用于保存等待执行的任务的阻塞队列，比如基于数组的有界队列`ArrayBlockingQueue`，基于链表的`LinkedBlockingQueue`等\n6. threadFactory： 创建线程的工厂\n7. handler： 拒绝策略，当队列满了，并且线程个数达到maximumPoolSize后采取的拒绝策略\n\n`Executors`中创建线程池的方法其实就是通过使用`ThreadPoolExecutor`构造方法的不同参数来创建不同类型的线程池 \n\n接下来我们深入源码看一看`Executors`中创建线程池的方法，它是如何使用`ThreadPoolExecutor`来创建线程池的\n\n1. 单线程化线程池（SingleThreadExecutor）\n\n```java\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n}\n\npublic static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory) {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>(),\n                                threadFactory));\n}\n```\n\n- 特点：创建一个核心线程个数和最大线程个数都为1的线程池，并且阻塞队列长度为Integer.MAX_VALUE。keepAliveTime为0说明只要线程个数比核心线程数多并且当前空闲则回收。\n- 应用场景：不适合并发但可能引起IO阻塞性及影响UI线程响应的操作，如数据库操作、文件操作等。\n\n使用示例：\n\n```java\nExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();\n\nfor (int i = 0; i < 10; i++) {\n    final int index = i;\n    singleThreadExecutor.execute(new Runnable() {\n\n        @Override\n        public void run() {\n            try {\n                System.out.println(index);\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    });\n}\n```\n\n执行结果为\n\n```java\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```\n\n可以看到，index的值是递增的，因为只有一个线程在执行任务\n\n2. 定长线程池（FixedThreadPool）\n\n```java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>());\n}\n\npublic static ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>(),\n                                    threadFactory);\n}\n```\n\n- 特点：只有核心线程，线程数量固定（其`corePoolSize`和`maximumPoolSize`值相同），执行完立即回收（`keepAliveTime`为0），阻塞队列长度为Integer.MAX_VALUE。\n- 应用场景：控制线程最大并发数。\n\n使用示例：\n\n```java\nExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);\nfor (int i = 0; i < 10; i++) {\n    final int index = i;\n\n    fixedThreadPool.execute(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                System.out.println(index);\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    });\n}\n```\n\n执行结果为：\n\n```java\n0\n2\n1\n3\n4\n5\n6\n7\n8\n9\n```\n\n可以看到，index的值不是递增的，因为只有三个线程在执行任务\n\n3. 可缓存线程池（CachedThreadPool）\n\n```java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                    60L, TimeUnit.SECONDS,\n                                    new SynchronousQueue<Runnable>());\n}\n\npublic static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                    60L, TimeUnit.SECONDS,\n                                    new SynchronousQueue<Runnable>(),\n                                    threadFactory);\n}\n```\n\n- 特点：无核心线程，非核心线程数量无限，执行完闲置60s后回收，这个类型的特殊之处在于，加入同步队列的任务会被马上执行，同步队列里面最多只有一个任务（因为每来一个任务就会马上创建一个线程来执行）\n- 应用场景：执行大量、耗时少的任务。\n\n使用示例：\n\n```java\nExecutorService cachedThreadPool = Executors.newCachedThreadPool();\nfor (int i = 0; i < 10; i++) {\n    final int index = i;\n    cachedThreadPool.execute(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(2000);\n                System.out.println(index);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            \n        }\n    });\n}\n```\n\n执行结果：\n\n```java\n8\n6\n2\n4\n0\n3\n1\n5\n7\n9\n```\n\n可以看到，index的值不是递增的，原因与上一个相同。\n\n4. 定时线程池（ScheduledThreadPool）\n\n```java\npublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n    return new ScheduledThreadPoolExecutor(corePoolSize);\n}\n\npublic static ScheduledExecutorService newScheduledThreadPool(\n        int corePoolSize, ThreadFactory threadFactory) {\n    return new ScheduledThreadPoolExecutor(corePoolSize, threadFactory);\n}\n```\n- 注：这个与上面三个有点区别，这是使用的是`ScheduledThreadPoolExecutor`创建的，此类继承`ThreadPoolExecutor`类。\n\n- 特点：核心线程数量固定，非核心线程数量无限，执行完闲置10ms后回收，任务队列为延时阻塞队列。\n- 应用场景：执行定时或周期性的任务。\n\n使用示例：\n\n```java\nScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);\nscheduledThreadPool.schedule(new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(\"delay 3 seconds\");\n    }\n}, 3, TimeUnit.SECONDS);\n```\n\n执行结果：\n    延迟3秒后打印出`delay 3 seconds`\n\n下面我们来用代码具体看下，这些线程池的区别\n\n1. 单线程化线程池（SingleThreadExecutor）\n\n```java\n// 创建一个单线程的线程池  \nExecutorService pool = Executors.newSingleThreadExecutor();  \n// 创建线程  \nThread t1 = new MyThreadPoolTest();  \nThread t2 = new MyThreadPoolTest();  \nThread t3 = new MyThreadPoolTest();  \nThread t4 = new MyThreadPoolTest();  \nThread t5 = new MyThreadPoolTest();  \n// 将线程放入池中进行执行  \npool.execute(t1);  \npool.execute(t2);  \npool.execute(t3);  \npool.execute(t4);  \npool.execute(t5);  \n// 关闭线程池  \npool.shutdown();\n```\n执行结果：\n\n```java\npool-1-thread-1正在执行。。。\npool-1-thread-1正在执行。。。\npool-1-thread-1正在执行。。。\npool-1-thread-1正在执行。。。\npool-1-thread-1正在执行。。。\n```\n\n通过执行结果我们可以看到，虽然我们在线程池中放了5个线程，但是由于线程池是单线程池，所以只有第一个线程存在于线程池中。\n每次调用execute方法，其实最后都是调用了thread-1的run方法。\n\n2. 定长线程池（FixedThreadPool）\n\n```java\nExecutorService pool = Executors.newFixedThreadPool(5);\n// 创建线程  \nThread t1 = new MyThreadPoolTest();  \nThread t2 = new MyThreadPoolTest();  \nThread t3 = new MyThreadPoolTest();  \nThread t4 = new MyThreadPoolTest();  \nThread t5 = new MyThreadPoolTest();  \n// 将线程放入池中进行执行  \npool.execute(t1);  \npool.execute(t2);  \npool.execute(t3);  \npool.execute(t4);  \npool.execute(t5);  \n// 关闭线程池  \npool.shutdown();\n```\n\n```java\npool-1-thread-1正在执行。。。\npool-1-thread-4正在执行。。。\npool-1-thread-3正在执行。。。\npool-1-thread-2正在执行。。。\npool-1-thread-5正在执行。。。\n```\n\n将`Executors.newFixedThreadPool(5)`中的`5`改为`2`再试试\n\n```java\npool-1-thread-1正在执行。。。\npool-1-thread-2正在执行。。。\npool-1-thread-2正在执行。。。\npool-1-thread-1正在执行。。。\npool-1-thread-2正在执行。。。\n```\n\n从以上结果可以看出，newFixedThreadPool的参数指定了可以运行的线程的最大数目，超过这个数目的线程加进去以后，不会运行。其次，加入线程池的线程属于托管状态，线程的运行不受加入顺序的影响。\n\n\n3. 可缓存线程池（CachedThreadPool）\n\n```java\nExecutorService pool = Executors.newCachedThreadPool();\n// 创建线程  \nThread t1 = new MyThreadPoolTest();  \nThread t2 = new MyThreadPoolTest();  \nThread t3 = new MyThreadPoolTest();  \nThread t4 = new MyThreadPoolTest();  \nThread t5 = new MyThreadPoolTest();  \n// 将线程放入池中进行执行  \npool.execute(t1);  \npool.execute(t2);  \npool.execute(t3);  \npool.execute(t4);  \npool.execute(t5);  \n// 关闭线程池  \npool.shutdown();\n```\n\n```java\npool-1-thread-1正在执行。。。\npool-1-thread-3正在执行。。。\npool-1-thread-2正在执行。。。\npool-1-thread-5正在执行。。。\npool-1-thread-4正在执行。。。\n```\n\n这种方式的特点是：可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。\n\n4. 定时线程池（ScheduledThreadPool）\n\n```java\nScheduledThreadPoolExecutor exec = new ScheduledThreadPoolExecutor(1);\nexec.scheduleAtFixedRate(new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(\"================\");\n    }\n}, 1000, 5000, TimeUnit.MILLISECONDS);\n\nexec.scheduleAtFixedRate(new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(System.nanoTime());\n    }\n}, 1000, 2000, TimeUnit.MILLISECONDS);\n```\n\n```java\n================\n233471023732097\n233473026158692\n233475023768285\n================\n233477030024240\n233479027432148\n================\n233481026928538\n233483025530535\n233485025312657\n================\n```\n\n可以看到，两个任务互不影响\n\n上面的代码建议大家亲自执行以下，会有更深的体会。\n","source":"_posts/Java并发编程（三）之线程池的使用.md","raw":"---\ntitle: Java并发编程（三）之线程池的使用\ndate: 2019-11-24 16:40:14\ntags: [多线程,并发,Java]\n---\n\n之前我们在如何创建线程的文章中介绍到了线程池创建线程，接下来学习一下如何使用线程池创建线程。\n\nJava通过Executors提供四种常用线程池，这四种线程池都是通过`ThreadPoolExecutor`实现的，我们来看一下其构造方法\n\n```java\npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n    if (corePoolSize < 0 ||\n        maximumPoolSize <= 0 ||\n        maximumPoolSize < corePoolSize ||\n        keepAliveTime < 0)\n        throw new IllegalArgumentException();\n    if (workQueue == null || threadFactory == null || handler == null)\n        throw new NullPointerException();\n    this.acc = System.getSecurityManager() == null ?\n            null :\n            AccessController.getContext();\n    this.corePoolSize = corePoolSize;\n    this.maximumPoolSize = maximumPoolSize;\n    this.workQueue = workQueue;\n    this.keepAliveTime = unit.toNanos(keepAliveTime);\n    this.threadFactory = threadFactory;\n    this.handler = handler;\n}\n```\n\n构造方法内具体的逻辑我们先忽略，先来看看构造方法的参数含义：\n\n1. corePoolSize: 线程池核心线程个数\n2. maximumPoolSize： 线程池最大线程个数\n3. keepAliveTime： 线程存活时间，指的是如果当前线程池中的线程数量比核心线程数量多，并且是闲置状态，则这些闲置线程能存活的最大时间\n4. unit： 存活时间的时间单位\n5. workQueue： 用于保存等待执行的任务的阻塞队列，比如基于数组的有界队列`ArrayBlockingQueue`，基于链表的`LinkedBlockingQueue`等\n6. threadFactory： 创建线程的工厂\n7. handler： 拒绝策略，当队列满了，并且线程个数达到maximumPoolSize后采取的拒绝策略\n\n`Executors`中创建线程池的方法其实就是通过使用`ThreadPoolExecutor`构造方法的不同参数来创建不同类型的线程池 \n\n接下来我们深入源码看一看`Executors`中创建线程池的方法，它是如何使用`ThreadPoolExecutor`来创建线程池的\n\n1. 单线程化线程池（SingleThreadExecutor）\n\n```java\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n}\n\npublic static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory) {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>(),\n                                threadFactory));\n}\n```\n\n- 特点：创建一个核心线程个数和最大线程个数都为1的线程池，并且阻塞队列长度为Integer.MAX_VALUE。keepAliveTime为0说明只要线程个数比核心线程数多并且当前空闲则回收。\n- 应用场景：不适合并发但可能引起IO阻塞性及影响UI线程响应的操作，如数据库操作、文件操作等。\n\n使用示例：\n\n```java\nExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();\n\nfor (int i = 0; i < 10; i++) {\n    final int index = i;\n    singleThreadExecutor.execute(new Runnable() {\n\n        @Override\n        public void run() {\n            try {\n                System.out.println(index);\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    });\n}\n```\n\n执行结果为\n\n```java\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```\n\n可以看到，index的值是递增的，因为只有一个线程在执行任务\n\n2. 定长线程池（FixedThreadPool）\n\n```java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>());\n}\n\npublic static ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>(),\n                                    threadFactory);\n}\n```\n\n- 特点：只有核心线程，线程数量固定（其`corePoolSize`和`maximumPoolSize`值相同），执行完立即回收（`keepAliveTime`为0），阻塞队列长度为Integer.MAX_VALUE。\n- 应用场景：控制线程最大并发数。\n\n使用示例：\n\n```java\nExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);\nfor (int i = 0; i < 10; i++) {\n    final int index = i;\n\n    fixedThreadPool.execute(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                System.out.println(index);\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    });\n}\n```\n\n执行结果为：\n\n```java\n0\n2\n1\n3\n4\n5\n6\n7\n8\n9\n```\n\n可以看到，index的值不是递增的，因为只有三个线程在执行任务\n\n3. 可缓存线程池（CachedThreadPool）\n\n```java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                    60L, TimeUnit.SECONDS,\n                                    new SynchronousQueue<Runnable>());\n}\n\npublic static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                    60L, TimeUnit.SECONDS,\n                                    new SynchronousQueue<Runnable>(),\n                                    threadFactory);\n}\n```\n\n- 特点：无核心线程，非核心线程数量无限，执行完闲置60s后回收，这个类型的特殊之处在于，加入同步队列的任务会被马上执行，同步队列里面最多只有一个任务（因为每来一个任务就会马上创建一个线程来执行）\n- 应用场景：执行大量、耗时少的任务。\n\n使用示例：\n\n```java\nExecutorService cachedThreadPool = Executors.newCachedThreadPool();\nfor (int i = 0; i < 10; i++) {\n    final int index = i;\n    cachedThreadPool.execute(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(2000);\n                System.out.println(index);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            \n        }\n    });\n}\n```\n\n执行结果：\n\n```java\n8\n6\n2\n4\n0\n3\n1\n5\n7\n9\n```\n\n可以看到，index的值不是递增的，原因与上一个相同。\n\n4. 定时线程池（ScheduledThreadPool）\n\n```java\npublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n    return new ScheduledThreadPoolExecutor(corePoolSize);\n}\n\npublic static ScheduledExecutorService newScheduledThreadPool(\n        int corePoolSize, ThreadFactory threadFactory) {\n    return new ScheduledThreadPoolExecutor(corePoolSize, threadFactory);\n}\n```\n- 注：这个与上面三个有点区别，这是使用的是`ScheduledThreadPoolExecutor`创建的，此类继承`ThreadPoolExecutor`类。\n\n- 特点：核心线程数量固定，非核心线程数量无限，执行完闲置10ms后回收，任务队列为延时阻塞队列。\n- 应用场景：执行定时或周期性的任务。\n\n使用示例：\n\n```java\nScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);\nscheduledThreadPool.schedule(new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(\"delay 3 seconds\");\n    }\n}, 3, TimeUnit.SECONDS);\n```\n\n执行结果：\n    延迟3秒后打印出`delay 3 seconds`\n\n下面我们来用代码具体看下，这些线程池的区别\n\n1. 单线程化线程池（SingleThreadExecutor）\n\n```java\n// 创建一个单线程的线程池  \nExecutorService pool = Executors.newSingleThreadExecutor();  \n// 创建线程  \nThread t1 = new MyThreadPoolTest();  \nThread t2 = new MyThreadPoolTest();  \nThread t3 = new MyThreadPoolTest();  \nThread t4 = new MyThreadPoolTest();  \nThread t5 = new MyThreadPoolTest();  \n// 将线程放入池中进行执行  \npool.execute(t1);  \npool.execute(t2);  \npool.execute(t3);  \npool.execute(t4);  \npool.execute(t5);  \n// 关闭线程池  \npool.shutdown();\n```\n执行结果：\n\n```java\npool-1-thread-1正在执行。。。\npool-1-thread-1正在执行。。。\npool-1-thread-1正在执行。。。\npool-1-thread-1正在执行。。。\npool-1-thread-1正在执行。。。\n```\n\n通过执行结果我们可以看到，虽然我们在线程池中放了5个线程，但是由于线程池是单线程池，所以只有第一个线程存在于线程池中。\n每次调用execute方法，其实最后都是调用了thread-1的run方法。\n\n2. 定长线程池（FixedThreadPool）\n\n```java\nExecutorService pool = Executors.newFixedThreadPool(5);\n// 创建线程  \nThread t1 = new MyThreadPoolTest();  \nThread t2 = new MyThreadPoolTest();  \nThread t3 = new MyThreadPoolTest();  \nThread t4 = new MyThreadPoolTest();  \nThread t5 = new MyThreadPoolTest();  \n// 将线程放入池中进行执行  \npool.execute(t1);  \npool.execute(t2);  \npool.execute(t3);  \npool.execute(t4);  \npool.execute(t5);  \n// 关闭线程池  \npool.shutdown();\n```\n\n```java\npool-1-thread-1正在执行。。。\npool-1-thread-4正在执行。。。\npool-1-thread-3正在执行。。。\npool-1-thread-2正在执行。。。\npool-1-thread-5正在执行。。。\n```\n\n将`Executors.newFixedThreadPool(5)`中的`5`改为`2`再试试\n\n```java\npool-1-thread-1正在执行。。。\npool-1-thread-2正在执行。。。\npool-1-thread-2正在执行。。。\npool-1-thread-1正在执行。。。\npool-1-thread-2正在执行。。。\n```\n\n从以上结果可以看出，newFixedThreadPool的参数指定了可以运行的线程的最大数目，超过这个数目的线程加进去以后，不会运行。其次，加入线程池的线程属于托管状态，线程的运行不受加入顺序的影响。\n\n\n3. 可缓存线程池（CachedThreadPool）\n\n```java\nExecutorService pool = Executors.newCachedThreadPool();\n// 创建线程  \nThread t1 = new MyThreadPoolTest();  \nThread t2 = new MyThreadPoolTest();  \nThread t3 = new MyThreadPoolTest();  \nThread t4 = new MyThreadPoolTest();  \nThread t5 = new MyThreadPoolTest();  \n// 将线程放入池中进行执行  \npool.execute(t1);  \npool.execute(t2);  \npool.execute(t3);  \npool.execute(t4);  \npool.execute(t5);  \n// 关闭线程池  \npool.shutdown();\n```\n\n```java\npool-1-thread-1正在执行。。。\npool-1-thread-3正在执行。。。\npool-1-thread-2正在执行。。。\npool-1-thread-5正在执行。。。\npool-1-thread-4正在执行。。。\n```\n\n这种方式的特点是：可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。\n\n4. 定时线程池（ScheduledThreadPool）\n\n```java\nScheduledThreadPoolExecutor exec = new ScheduledThreadPoolExecutor(1);\nexec.scheduleAtFixedRate(new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(\"================\");\n    }\n}, 1000, 5000, TimeUnit.MILLISECONDS);\n\nexec.scheduleAtFixedRate(new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(System.nanoTime());\n    }\n}, 1000, 2000, TimeUnit.MILLISECONDS);\n```\n\n```java\n================\n233471023732097\n233473026158692\n233475023768285\n================\n233477030024240\n233479027432148\n================\n233481026928538\n233483025530535\n233485025312657\n================\n```\n\n可以看到，两个任务互不影响\n\n上面的代码建议大家亲自执行以下，会有更深的体会。\n","slug":"Java并发编程（三）之线程池的使用","published":1,"updated":"2019-11-24T11:20:11.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79dy000q07k3c53x7371","content":"<p>之前我们在如何创建线程的文章中介绍到了线程池创建线程，接下来学习一下如何使用线程池创建线程。</p>\n<p>Java通过Executors提供四种常用线程池，这四种线程池都是通过<code>ThreadPoolExecutor</code>实现的，我们来看一下其构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">        keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"keyword\">null</span> || threadFactory == <span class=\"keyword\">null</span> || handler == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.acc = System.getSecurityManager() == <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">            <span class=\"keyword\">null</span> :</span><br><span class=\"line\">            AccessController.getContext();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.workQueue = workQueue;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handler = handler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造方法内具体的逻辑我们先忽略，先来看看构造方法的参数含义：</p>\n<ol>\n<li>corePoolSize: 线程池核心线程个数</li>\n<li>maximumPoolSize： 线程池最大线程个数</li>\n<li>keepAliveTime： 线程存活时间，指的是如果当前线程池中的线程数量比核心线程数量多，并且是闲置状态，则这些闲置线程能存活的最大时间</li>\n<li>unit： 存活时间的时间单位</li>\n<li>workQueue： 用于保存等待执行的任务的阻塞队列，比如基于数组的有界队列<code>ArrayBlockingQueue</code>，基于链表的<code>LinkedBlockingQueue</code>等</li>\n<li>threadFactory： 创建线程的工厂</li>\n<li>handler： 拒绝策略，当队列满了，并且线程个数达到maximumPoolSize后采取的拒绝策略</li>\n</ol>\n<p><code>Executors</code>中创建线程池的方法其实就是通过使用<code>ThreadPoolExecutor</code>构造方法的不同参数来创建不同类型的线程池 </p>\n<p>接下来我们深入源码看一看<code>Executors</code>中创建线程池的方法，它是如何使用<code>ThreadPoolExecutor</code>来创建线程池的</p>\n<ol>\n<li>单线程化线程池（SingleThreadExecutor）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">                                threadFactory));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>特点：创建一个核心线程个数和最大线程个数都为1的线程池，并且阻塞队列长度为Integer.MAX_VALUE。keepAliveTime为0说明只要线程个数比核心线程数多并且当前空闲则回收。</li>\n<li>应用场景：不适合并发但可能引起IO阻塞性及影响UI线程响应的操作，如数据库操作、文件操作等。</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">    singleThreadExecutor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(index);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，index的值是递增的，因为只有一个线程在执行任务</p>\n<ol start=\"2\">\n<li>定长线程池（FixedThreadPool）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                    <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                    <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">                                    threadFactory);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>特点：只有核心线程，线程数量固定（其<code>corePoolSize</code>和<code>maximumPoolSize</code>值相同），执行完立即回收（<code>keepAliveTime</code>为0），阻塞队列长度为Integer.MAX_VALUE。</li>\n<li>应用场景：控制线程最大并发数。</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\"></span><br><span class=\"line\">    fixedThreadPool.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(index);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，index的值不是递增的，因为只有三个线程在执行任务</p>\n<ol start=\"3\">\n<li>可缓存线程池（CachedThreadPool）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                    <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                    <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                    <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                    <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">                                    threadFactory);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>特点：无核心线程，非核心线程数量无限，执行完闲置60s后回收，这个类型的特殊之处在于，加入同步队列的任务会被马上执行，同步队列里面最多只有一个任务（因为每来一个任务就会马上创建一个线程来执行）</li>\n<li>应用场景：执行大量、耗时少的任务。</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">    cachedThreadPool.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                System.out.println(index);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，index的值不是递增的，原因与上一个相同。</p>\n<ol start=\"4\">\n<li>定时线程池（ScheduledThreadPool）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> corePoolSize, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(corePoolSize, threadFactory);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>注：这个与上面三个有点区别，这是使用的是<code>ScheduledThreadPoolExecutor</code>创建的，此类继承<code>ThreadPoolExecutor</code>类。</p>\n</li>\n<li><p>特点：核心线程数量固定，非核心线程数量无限，执行完闲置10ms后回收，任务队列为延时阻塞队列。</p>\n</li>\n<li><p>应用场景：执行定时或周期性的任务。</p>\n</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">scheduledThreadPool.schedule(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"delay 3 seconds\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">3</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：<br>    延迟3秒后打印出<code>delay 3 seconds</code></p>\n<p>下面我们来用代码具体看下，这些线程池的区别</p>\n<ol>\n<li>单线程化线程池（SingleThreadExecutor）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个单线程的线程池  </span></span><br><span class=\"line\">ExecutorService pool = Executors.newSingleThreadExecutor();  </span><br><span class=\"line\"><span class=\"comment\">// 创建线程  </span></span><br><span class=\"line\">Thread t1 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t2 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t3 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t4 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t5 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\"><span class=\"comment\">// 将线程放入池中进行执行  </span></span><br><span class=\"line\">pool.execute(t1);  </span><br><span class=\"line\">pool.execute(t2);  </span><br><span class=\"line\">pool.execute(t3);  </span><br><span class=\"line\">pool.execute(t4);  </span><br><span class=\"line\">pool.execute(t5);  </span><br><span class=\"line\"><span class=\"comment\">// 关闭线程池  </span></span><br><span class=\"line\">pool.shutdown();</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br></pre></td></tr></table></figure>\n\n<p>通过执行结果我们可以看到，虽然我们在线程池中放了5个线程，但是由于线程池是单线程池，所以只有第一个线程存在于线程池中。<br>每次调用execute方法，其实最后都是调用了thread-1的run方法。</p>\n<ol start=\"2\">\n<li>定长线程池（FixedThreadPool）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService pool = Executors.newFixedThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建线程  </span></span><br><span class=\"line\">Thread t1 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t2 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t3 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t4 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t5 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\"><span class=\"comment\">// 将线程放入池中进行执行  </span></span><br><span class=\"line\">pool.execute(t1);  </span><br><span class=\"line\">pool.execute(t2);  </span><br><span class=\"line\">pool.execute(t3);  </span><br><span class=\"line\">pool.execute(t4);  </span><br><span class=\"line\">pool.execute(t5);  </span><br><span class=\"line\"><span class=\"comment\">// 关闭线程池  </span></span><br><span class=\"line\">pool.shutdown();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">4</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">5</span>正在执行。。。</span><br></pre></td></tr></table></figure>\n\n<p>将<code>Executors.newFixedThreadPool(5)</code>中的<code>5</code>改为<code>2</code>再试试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span>正在执行。。。</span><br></pre></td></tr></table></figure>\n\n<p>从以上结果可以看出，newFixedThreadPool的参数指定了可以运行的线程的最大数目，超过这个数目的线程加进去以后，不会运行。其次，加入线程池的线程属于托管状态，线程的运行不受加入顺序的影响。</p>\n<ol start=\"3\">\n<li>可缓存线程池（CachedThreadPool）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService pool = Executors.newCachedThreadPool();</span><br><span class=\"line\"><span class=\"comment\">// 创建线程  </span></span><br><span class=\"line\">Thread t1 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t2 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t3 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t4 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t5 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\"><span class=\"comment\">// 将线程放入池中进行执行  </span></span><br><span class=\"line\">pool.execute(t1);  </span><br><span class=\"line\">pool.execute(t2);  </span><br><span class=\"line\">pool.execute(t3);  </span><br><span class=\"line\">pool.execute(t4);  </span><br><span class=\"line\">pool.execute(t5);  </span><br><span class=\"line\"><span class=\"comment\">// 关闭线程池  </span></span><br><span class=\"line\">pool.shutdown();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">5</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">4</span>正在执行。。。</span><br></pre></td></tr></table></figure>\n\n<p>这种方式的特点是：可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。</p>\n<ol start=\"4\">\n<li>定时线程池（ScheduledThreadPool）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ScheduledThreadPoolExecutor exec = <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(<span class=\"number\">1</span>);</span><br><span class=\"line\">exec.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"================\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>, <span class=\"number\">5000</span>, TimeUnit.MILLISECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">exec.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(System.nanoTime());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>, <span class=\"number\">2000</span>, TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">================</span><br><span class=\"line\"><span class=\"number\">233471023732097</span></span><br><span class=\"line\"><span class=\"number\">233473026158692</span></span><br><span class=\"line\"><span class=\"number\">233475023768285</span></span><br><span class=\"line\">================</span><br><span class=\"line\"><span class=\"number\">233477030024240</span></span><br><span class=\"line\"><span class=\"number\">233479027432148</span></span><br><span class=\"line\">================</span><br><span class=\"line\"><span class=\"number\">233481026928538</span></span><br><span class=\"line\"><span class=\"number\">233483025530535</span></span><br><span class=\"line\"><span class=\"number\">233485025312657</span></span><br><span class=\"line\">================</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，两个任务互不影响</p>\n<p>上面的代码建议大家亲自执行以下，会有更深的体会。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前我们在如何创建线程的文章中介绍到了线程池创建线程，接下来学习一下如何使用线程池创建线程。</p>\n<p>Java通过Executors提供四种常用线程池，这四种线程池都是通过<code>ThreadPoolExecutor</code>实现的，我们来看一下其构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">        keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"keyword\">null</span> || threadFactory == <span class=\"keyword\">null</span> || handler == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.acc = System.getSecurityManager() == <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">            <span class=\"keyword\">null</span> :</span><br><span class=\"line\">            AccessController.getContext();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.workQueue = workQueue;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handler = handler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造方法内具体的逻辑我们先忽略，先来看看构造方法的参数含义：</p>\n<ol>\n<li>corePoolSize: 线程池核心线程个数</li>\n<li>maximumPoolSize： 线程池最大线程个数</li>\n<li>keepAliveTime： 线程存活时间，指的是如果当前线程池中的线程数量比核心线程数量多，并且是闲置状态，则这些闲置线程能存活的最大时间</li>\n<li>unit： 存活时间的时间单位</li>\n<li>workQueue： 用于保存等待执行的任务的阻塞队列，比如基于数组的有界队列<code>ArrayBlockingQueue</code>，基于链表的<code>LinkedBlockingQueue</code>等</li>\n<li>threadFactory： 创建线程的工厂</li>\n<li>handler： 拒绝策略，当队列满了，并且线程个数达到maximumPoolSize后采取的拒绝策略</li>\n</ol>\n<p><code>Executors</code>中创建线程池的方法其实就是通过使用<code>ThreadPoolExecutor</code>构造方法的不同参数来创建不同类型的线程池 </p>\n<p>接下来我们深入源码看一看<code>Executors</code>中创建线程池的方法，它是如何使用<code>ThreadPoolExecutor</code>来创建线程池的</p>\n<ol>\n<li>单线程化线程池（SingleThreadExecutor）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">                                threadFactory));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>特点：创建一个核心线程个数和最大线程个数都为1的线程池，并且阻塞队列长度为Integer.MAX_VALUE。keepAliveTime为0说明只要线程个数比核心线程数多并且当前空闲则回收。</li>\n<li>应用场景：不适合并发但可能引起IO阻塞性及影响UI线程响应的操作，如数据库操作、文件操作等。</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">    singleThreadExecutor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(index);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，index的值是递增的，因为只有一个线程在执行任务</p>\n<ol start=\"2\">\n<li>定长线程池（FixedThreadPool）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                    <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                    <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">                                    threadFactory);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>特点：只有核心线程，线程数量固定（其<code>corePoolSize</code>和<code>maximumPoolSize</code>值相同），执行完立即回收（<code>keepAliveTime</code>为0），阻塞队列长度为Integer.MAX_VALUE。</li>\n<li>应用场景：控制线程最大并发数。</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\"></span><br><span class=\"line\">    fixedThreadPool.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(index);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，index的值不是递增的，因为只有三个线程在执行任务</p>\n<ol start=\"3\">\n<li>可缓存线程池（CachedThreadPool）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                    <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                    <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                    <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                    <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">                                    threadFactory);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>特点：无核心线程，非核心线程数量无限，执行完闲置60s后回收，这个类型的特殊之处在于，加入同步队列的任务会被马上执行，同步队列里面最多只有一个任务（因为每来一个任务就会马上创建一个线程来执行）</li>\n<li>应用场景：执行大量、耗时少的任务。</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">    cachedThreadPool.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                System.out.println(index);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，index的值不是递增的，原因与上一个相同。</p>\n<ol start=\"4\">\n<li>定时线程池（ScheduledThreadPool）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> corePoolSize, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(corePoolSize, threadFactory);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>注：这个与上面三个有点区别，这是使用的是<code>ScheduledThreadPoolExecutor</code>创建的，此类继承<code>ThreadPoolExecutor</code>类。</p>\n</li>\n<li><p>特点：核心线程数量固定，非核心线程数量无限，执行完闲置10ms后回收，任务队列为延时阻塞队列。</p>\n</li>\n<li><p>应用场景：执行定时或周期性的任务。</p>\n</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">scheduledThreadPool.schedule(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"delay 3 seconds\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">3</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：<br>    延迟3秒后打印出<code>delay 3 seconds</code></p>\n<p>下面我们来用代码具体看下，这些线程池的区别</p>\n<ol>\n<li>单线程化线程池（SingleThreadExecutor）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个单线程的线程池  </span></span><br><span class=\"line\">ExecutorService pool = Executors.newSingleThreadExecutor();  </span><br><span class=\"line\"><span class=\"comment\">// 创建线程  </span></span><br><span class=\"line\">Thread t1 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t2 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t3 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t4 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t5 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\"><span class=\"comment\">// 将线程放入池中进行执行  </span></span><br><span class=\"line\">pool.execute(t1);  </span><br><span class=\"line\">pool.execute(t2);  </span><br><span class=\"line\">pool.execute(t3);  </span><br><span class=\"line\">pool.execute(t4);  </span><br><span class=\"line\">pool.execute(t5);  </span><br><span class=\"line\"><span class=\"comment\">// 关闭线程池  </span></span><br><span class=\"line\">pool.shutdown();</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br></pre></td></tr></table></figure>\n\n<p>通过执行结果我们可以看到，虽然我们在线程池中放了5个线程，但是由于线程池是单线程池，所以只有第一个线程存在于线程池中。<br>每次调用execute方法，其实最后都是调用了thread-1的run方法。</p>\n<ol start=\"2\">\n<li>定长线程池（FixedThreadPool）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService pool = Executors.newFixedThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建线程  </span></span><br><span class=\"line\">Thread t1 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t2 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t3 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t4 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t5 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\"><span class=\"comment\">// 将线程放入池中进行执行  </span></span><br><span class=\"line\">pool.execute(t1);  </span><br><span class=\"line\">pool.execute(t2);  </span><br><span class=\"line\">pool.execute(t3);  </span><br><span class=\"line\">pool.execute(t4);  </span><br><span class=\"line\">pool.execute(t5);  </span><br><span class=\"line\"><span class=\"comment\">// 关闭线程池  </span></span><br><span class=\"line\">pool.shutdown();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">4</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">5</span>正在执行。。。</span><br></pre></td></tr></table></figure>\n\n<p>将<code>Executors.newFixedThreadPool(5)</code>中的<code>5</code>改为<code>2</code>再试试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span>正在执行。。。</span><br></pre></td></tr></table></figure>\n\n<p>从以上结果可以看出，newFixedThreadPool的参数指定了可以运行的线程的最大数目，超过这个数目的线程加进去以后，不会运行。其次，加入线程池的线程属于托管状态，线程的运行不受加入顺序的影响。</p>\n<ol start=\"3\">\n<li>可缓存线程池（CachedThreadPool）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService pool = Executors.newCachedThreadPool();</span><br><span class=\"line\"><span class=\"comment\">// 创建线程  </span></span><br><span class=\"line\">Thread t1 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t2 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t3 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t4 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\">Thread t5 = <span class=\"keyword\">new</span> MyThreadPoolTest();  </span><br><span class=\"line\"><span class=\"comment\">// 将线程放入池中进行执行  </span></span><br><span class=\"line\">pool.execute(t1);  </span><br><span class=\"line\">pool.execute(t2);  </span><br><span class=\"line\">pool.execute(t3);  </span><br><span class=\"line\">pool.execute(t4);  </span><br><span class=\"line\">pool.execute(t5);  </span><br><span class=\"line\"><span class=\"comment\">// 关闭线程池  </span></span><br><span class=\"line\">pool.shutdown();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">3</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">5</span>正在执行。。。</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">4</span>正在执行。。。</span><br></pre></td></tr></table></figure>\n\n<p>这种方式的特点是：可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。</p>\n<ol start=\"4\">\n<li>定时线程池（ScheduledThreadPool）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ScheduledThreadPoolExecutor exec = <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(<span class=\"number\">1</span>);</span><br><span class=\"line\">exec.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"================\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>, <span class=\"number\">5000</span>, TimeUnit.MILLISECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">exec.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(System.nanoTime());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>, <span class=\"number\">2000</span>, TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">================</span><br><span class=\"line\"><span class=\"number\">233471023732097</span></span><br><span class=\"line\"><span class=\"number\">233473026158692</span></span><br><span class=\"line\"><span class=\"number\">233475023768285</span></span><br><span class=\"line\">================</span><br><span class=\"line\"><span class=\"number\">233477030024240</span></span><br><span class=\"line\"><span class=\"number\">233479027432148</span></span><br><span class=\"line\">================</span><br><span class=\"line\"><span class=\"number\">233481026928538</span></span><br><span class=\"line\"><span class=\"number\">233483025530535</span></span><br><span class=\"line\"><span class=\"number\">233485025312657</span></span><br><span class=\"line\">================</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，两个任务互不影响</p>\n<p>上面的代码建议大家亲自执行以下，会有更深的体会。</p>\n"},{"title":"递归算法及应用","date":"2019-09-08T06:55:10.000Z","_content":"\n\n在上一篇讲二分查找的文章中我们提到了实现二分查找的一种方式，那就是使用递归算法。\n\n```java\n    //递归\n    public static int recursionBinarySearch(int[] arr,int key,int low,int high){\n        \n        if(key < arr[low] || key > arr[high] || low > high){\n            return -1;              \n        }\n        \n        int middle = (low + high) / 2;          //初始中间位置\n        if(arr[middle] > key){\n            //比关键字大则关键字在左区域\n            return recursionBinarySearch(arr, key,low,middle-1);\n        }else if(arr[middle] < key){\n            //比关键字小则关键字在右区域\n            return recursionBinarySearch(arr, key,middle+1,high);\n        }else {\n            return middle;\n        }\n    }\n```\n根据二分查找的原理，当我们取得中间值`arr[middle]`大于想要查找的目标值`key`的时候，我们需要排除比`key`大的那一半数据，也就是`arr[middle]`之后的数据。在代码中我们可以看到，我们通过将`high`参数设置为`middle-1`来排除`middle`之后的数据。同时我们将`middle-1`当做新的`high`传入到函数中继续调用。也就是这个函数自己又继续调用了自己本身，只是改变了参数，将问题分解为原来的一半。然后在此函数中继续上面的步骤，改变参数`low`或者`high`，将`low`或者`high`的新值作为参数继续传给自己并调用自己，这就是递归。\n\n递归算法设计的基本思想是：对于一个复杂的问题，把原问题分解为若干个相对简单类同的子问题，继续下去直到子问题简单到能够直接求解，也就是说到了递归的出口，这样原问题就有递归得解。\n例如上面二分查找(一个复杂的问题)，我们不断将查找范围减半（也就是把原问题分解为相对简单的子问题），直到查找范围就剩一个数（子问题简单到能够直接求解），我们就找到了递归的出口(也就是上述函数中的return middle)。\n\n举两个个生活中的例子来说明什么是递归\n1. 递归就是洋葱，一个洋葱是带着一层洋葱皮的洋葱，拨开一层洋葱皮，里面还是洋葱，再剥开一层洋葱皮，里面···还是洋葱。（如果你愿意一层一层一层的剥开TA的心。。。）\n2. 递归就是包子馅的包子，也就是你剥开包子皮，发现里面是一个新的包子。对这个包子取一个极限，你就会发现，这个包子就是一个馒头。。。\n\n上面说到，使用递归算法求解，需要找到递归的出口，很容易理解，若是没有出口，那么函数总是自己调用自己，永远也不会停下来，直到报出栈溢出(StackOverflowError)的异常。例如如下代码\n```java\npublic class Test {\n\n    public static void main(String[] args) {\n        test();        \n    }\n\n    public static void test(){\n        test();     //自己调用自己   \n    }\n}\n```\n\n输出结果为：\n```java\nException in thread \"main\" java.lang.StackOverflowError\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n```\n拿上面包子馅的包子来举例，我们一层层的剥开包子皮，目的就是找到最里面的包子，但如果我们在递归算法中不设置出口条件，那么就会出现不管剥开多少次包子皮，都找不到最里面的包子的情况。然后你就会发现，这包子其实就是一个馒头。。\n\n所以在我们使用递归算法的时候，必须有一个明确的递归结束条件，称为`递归出口`，有的书上也称为`基线条件`。\n每个递归函数都需要包含两部分，基线条件和递归条件。递归条件指的是函数调用自己，而基线条件指的是函数不再调用自己，从而避免无线循环。\n例如上述二分查找中的基线条件与递归条件，\n\n```java\n        if(arr[middle] > key){           //递归条件\n            return recursionBinarySearch(arr, key,low,middle-1);\n        }else if(arr[middle] < key){    //递归条件\n            return recursionBinarySearch(arr, key,middle+1,high);\n        }else {                         //基线条件（递归出口）\n            return middle;\n        }\n \n```\n递归的应用有哪些呢？最经典的应用就是求斐波那契数列了。\n```java\npublic int f(int n){  \n    if(n == 1 || n == 2){     // 基线条件（递归出口）\n        return 1;  \n    }  \n    return f(n-1) + f(n-2);    //递归条件\n}\n```\n当然斐波那契数列也可以用循环的方式来解决。\n```java\npublic int f(int n) {  \n    int f0 = 1;  \n    int f1 = 1;  \n    int f2 = 0;  \n  \n    for(int i = 2; i < n; i++){  \n        f2 = f0 + f1;  \n        f0 = f1;  \n        f1 = f2;  \n    }  \n    return f2;  \n}\n```\n这两种方法的作用相同，结过相同，但在程序运行的性能上有很大差距。\n使用递归的方式来求解斐波那契数列的时间复杂度为O(2<sup>n</sup>)，而使用循环的方式的时间复杂度为O(n)。可见递归只是让解决方案变得更清晰，并没有性能上的优势。实际上，在一些情况下，使用循环的性能更好。\n\n当然，递归的应用并不只是斐波那契数列求和，二叉树的遍历，排序算法中的排序，都可以用递归来实现。\n\n递归是一种非常优雅的问题解决方法（在不考虑程序性能的前提下），递归将人分为截然不同的阵营：恨它的、爱它的以及恨了几年后又爱上它的。\n\n最后分享一句话，Leigh Caldwell在Stack Overflow上说：“如果使用循环，程序的性能可能更高；如果使用递归，程序可能更容易理解。如何选择要看什么对你来说更重要。”\n\n\n","source":"_posts/递归算法及应用.md","raw":"---\ntitle: 递归算法及应用\ndate: 2019-09-08 14:55:10\ntags: [算法]\n---\n\n\n在上一篇讲二分查找的文章中我们提到了实现二分查找的一种方式，那就是使用递归算法。\n\n```java\n    //递归\n    public static int recursionBinarySearch(int[] arr,int key,int low,int high){\n        \n        if(key < arr[low] || key > arr[high] || low > high){\n            return -1;              \n        }\n        \n        int middle = (low + high) / 2;          //初始中间位置\n        if(arr[middle] > key){\n            //比关键字大则关键字在左区域\n            return recursionBinarySearch(arr, key,low,middle-1);\n        }else if(arr[middle] < key){\n            //比关键字小则关键字在右区域\n            return recursionBinarySearch(arr, key,middle+1,high);\n        }else {\n            return middle;\n        }\n    }\n```\n根据二分查找的原理，当我们取得中间值`arr[middle]`大于想要查找的目标值`key`的时候，我们需要排除比`key`大的那一半数据，也就是`arr[middle]`之后的数据。在代码中我们可以看到，我们通过将`high`参数设置为`middle-1`来排除`middle`之后的数据。同时我们将`middle-1`当做新的`high`传入到函数中继续调用。也就是这个函数自己又继续调用了自己本身，只是改变了参数，将问题分解为原来的一半。然后在此函数中继续上面的步骤，改变参数`low`或者`high`，将`low`或者`high`的新值作为参数继续传给自己并调用自己，这就是递归。\n\n递归算法设计的基本思想是：对于一个复杂的问题，把原问题分解为若干个相对简单类同的子问题，继续下去直到子问题简单到能够直接求解，也就是说到了递归的出口，这样原问题就有递归得解。\n例如上面二分查找(一个复杂的问题)，我们不断将查找范围减半（也就是把原问题分解为相对简单的子问题），直到查找范围就剩一个数（子问题简单到能够直接求解），我们就找到了递归的出口(也就是上述函数中的return middle)。\n\n举两个个生活中的例子来说明什么是递归\n1. 递归就是洋葱，一个洋葱是带着一层洋葱皮的洋葱，拨开一层洋葱皮，里面还是洋葱，再剥开一层洋葱皮，里面···还是洋葱。（如果你愿意一层一层一层的剥开TA的心。。。）\n2. 递归就是包子馅的包子，也就是你剥开包子皮，发现里面是一个新的包子。对这个包子取一个极限，你就会发现，这个包子就是一个馒头。。。\n\n上面说到，使用递归算法求解，需要找到递归的出口，很容易理解，若是没有出口，那么函数总是自己调用自己，永远也不会停下来，直到报出栈溢出(StackOverflowError)的异常。例如如下代码\n```java\npublic class Test {\n\n    public static void main(String[] args) {\n        test();        \n    }\n\n    public static void test(){\n        test();     //自己调用自己   \n    }\n}\n```\n\n输出结果为：\n```java\nException in thread \"main\" java.lang.StackOverflowError\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n        at Test.test(Test.java:11)\n```\n拿上面包子馅的包子来举例，我们一层层的剥开包子皮，目的就是找到最里面的包子，但如果我们在递归算法中不设置出口条件，那么就会出现不管剥开多少次包子皮，都找不到最里面的包子的情况。然后你就会发现，这包子其实就是一个馒头。。\n\n所以在我们使用递归算法的时候，必须有一个明确的递归结束条件，称为`递归出口`，有的书上也称为`基线条件`。\n每个递归函数都需要包含两部分，基线条件和递归条件。递归条件指的是函数调用自己，而基线条件指的是函数不再调用自己，从而避免无线循环。\n例如上述二分查找中的基线条件与递归条件，\n\n```java\n        if(arr[middle] > key){           //递归条件\n            return recursionBinarySearch(arr, key,low,middle-1);\n        }else if(arr[middle] < key){    //递归条件\n            return recursionBinarySearch(arr, key,middle+1,high);\n        }else {                         //基线条件（递归出口）\n            return middle;\n        }\n \n```\n递归的应用有哪些呢？最经典的应用就是求斐波那契数列了。\n```java\npublic int f(int n){  \n    if(n == 1 || n == 2){     // 基线条件（递归出口）\n        return 1;  \n    }  \n    return f(n-1) + f(n-2);    //递归条件\n}\n```\n当然斐波那契数列也可以用循环的方式来解决。\n```java\npublic int f(int n) {  \n    int f0 = 1;  \n    int f1 = 1;  \n    int f2 = 0;  \n  \n    for(int i = 2; i < n; i++){  \n        f2 = f0 + f1;  \n        f0 = f1;  \n        f1 = f2;  \n    }  \n    return f2;  \n}\n```\n这两种方法的作用相同，结过相同，但在程序运行的性能上有很大差距。\n使用递归的方式来求解斐波那契数列的时间复杂度为O(2<sup>n</sup>)，而使用循环的方式的时间复杂度为O(n)。可见递归只是让解决方案变得更清晰，并没有性能上的优势。实际上，在一些情况下，使用循环的性能更好。\n\n当然，递归的应用并不只是斐波那契数列求和，二叉树的遍历，排序算法中的排序，都可以用递归来实现。\n\n递归是一种非常优雅的问题解决方法（在不考虑程序性能的前提下），递归将人分为截然不同的阵营：恨它的、爱它的以及恨了几年后又爱上它的。\n\n最后分享一句话，Leigh Caldwell在Stack Overflow上说：“如果使用循环，程序的性能可能更高；如果使用递归，程序可能更容易理解。如何选择要看什么对你来说更重要。”\n\n\n","slug":"递归算法及应用","published":1,"updated":"2019-09-08T08:48:38.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79fo002r07k3gyxt7gb5","content":"<p>在上一篇讲二分查找的文章中我们提到了实现二分查找的一种方式，那就是使用递归算法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">recursionBinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> key,<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; arr[low] || key &gt; arr[high] || low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = (low + high) / <span class=\"number\">2</span>;          <span class=\"comment\">//初始中间位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字大则关键字在左区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,low,middle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字小则关键字在右区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,middle+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据二分查找的原理，当我们取得中间值<code>arr[middle]</code>大于想要查找的目标值<code>key</code>的时候，我们需要排除比<code>key</code>大的那一半数据，也就是<code>arr[middle]</code>之后的数据。在代码中我们可以看到，我们通过将<code>high</code>参数设置为<code>middle-1</code>来排除<code>middle</code>之后的数据。同时我们将<code>middle-1</code>当做新的<code>high</code>传入到函数中继续调用。也就是这个函数自己又继续调用了自己本身，只是改变了参数，将问题分解为原来的一半。然后在此函数中继续上面的步骤，改变参数<code>low</code>或者<code>high</code>，将<code>low</code>或者<code>high</code>的新值作为参数继续传给自己并调用自己，这就是递归。</p>\n<p>递归算法设计的基本思想是：对于一个复杂的问题，把原问题分解为若干个相对简单类同的子问题，继续下去直到子问题简单到能够直接求解，也就是说到了递归的出口，这样原问题就有递归得解。<br>例如上面二分查找(一个复杂的问题)，我们不断将查找范围减半（也就是把原问题分解为相对简单的子问题），直到查找范围就剩一个数（子问题简单到能够直接求解），我们就找到了递归的出口(也就是上述函数中的return middle)。</p>\n<p>举两个个生活中的例子来说明什么是递归</p>\n<ol>\n<li>递归就是洋葱，一个洋葱是带着一层洋葱皮的洋葱，拨开一层洋葱皮，里面还是洋葱，再剥开一层洋葱皮，里面···还是洋葱。（如果你愿意一层一层一层的剥开TA的心。。。）</li>\n<li>递归就是包子馅的包子，也就是你剥开包子皮，发现里面是一个新的包子。对这个包子取一个极限，你就会发现，这个包子就是一个馒头。。。</li>\n</ol>\n<p>上面说到，使用递归算法求解，需要找到递归的出口，很容易理解，若是没有出口，那么函数总是自己调用自己，永远也不会停下来，直到报出栈溢出(StackOverflowError)的异常。例如如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        test();        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        test();     <span class=\"comment\">//自己调用自己   </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.StackOverflowError</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br></pre></td></tr></table></figure>\n<p>拿上面包子馅的包子来举例，我们一层层的剥开包子皮，目的就是找到最里面的包子，但如果我们在递归算法中不设置出口条件，那么就会出现不管剥开多少次包子皮，都找不到最里面的包子的情况。然后你就会发现，这包子其实就是一个馒头。。</p>\n<p>所以在我们使用递归算法的时候，必须有一个明确的递归结束条件，称为<code>递归出口</code>，有的书上也称为<code>基线条件</code>。<br>每个递归函数都需要包含两部分，基线条件和递归条件。递归条件指的是函数调用自己，而基线条件指的是函数不再调用自己，从而避免无线循环。<br>例如上述二分查找中的基线条件与递归条件，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;           <span class=\"comment\">//递归条件</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,low,middle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;    <span class=\"comment\">//递归条件</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,middle+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;                         <span class=\"comment\">//基线条件（递归出口）</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>递归的应用有哪些呢？最经典的应用就是求斐波那契数列了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>)&#123;     <span class=\"comment\">// 基线条件（递归出口）</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(n-<span class=\"number\">1</span>) + f(n-<span class=\"number\">2</span>);    <span class=\"comment\">//递归条件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然斐波那契数列也可以用循环的方式来解决。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> f0 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> f1 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> f2 = <span class=\"number\">0</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n; i++)&#123;  </span><br><span class=\"line\">        f2 = f0 + f1;  </span><br><span class=\"line\">        f0 = f1;  </span><br><span class=\"line\">        f1 = f2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f2;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这两种方法的作用相同，结过相同，但在程序运行的性能上有很大差距。<br>使用递归的方式来求解斐波那契数列的时间复杂度为O(2<sup>n</sup>)，而使用循环的方式的时间复杂度为O(n)。可见递归只是让解决方案变得更清晰，并没有性能上的优势。实际上，在一些情况下，使用循环的性能更好。</p>\n<p>当然，递归的应用并不只是斐波那契数列求和，二叉树的遍历，排序算法中的排序，都可以用递归来实现。</p>\n<p>递归是一种非常优雅的问题解决方法（在不考虑程序性能的前提下），递归将人分为截然不同的阵营：恨它的、爱它的以及恨了几年后又爱上它的。</p>\n<p>最后分享一句话，Leigh Caldwell在Stack Overflow上说：“如果使用循环，程序的性能可能更高；如果使用递归，程序可能更容易理解。如何选择要看什么对你来说更重要。”</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在上一篇讲二分查找的文章中我们提到了实现二分查找的一种方式，那就是使用递归算法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">recursionBinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> key,<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; arr[low] || key &gt; arr[high] || low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = (low + high) / <span class=\"number\">2</span>;          <span class=\"comment\">//初始中间位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字大则关键字在左区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,low,middle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//比关键字小则关键字在右区域</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,middle+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据二分查找的原理，当我们取得中间值<code>arr[middle]</code>大于想要查找的目标值<code>key</code>的时候，我们需要排除比<code>key</code>大的那一半数据，也就是<code>arr[middle]</code>之后的数据。在代码中我们可以看到，我们通过将<code>high</code>参数设置为<code>middle-1</code>来排除<code>middle</code>之后的数据。同时我们将<code>middle-1</code>当做新的<code>high</code>传入到函数中继续调用。也就是这个函数自己又继续调用了自己本身，只是改变了参数，将问题分解为原来的一半。然后在此函数中继续上面的步骤，改变参数<code>low</code>或者<code>high</code>，将<code>low</code>或者<code>high</code>的新值作为参数继续传给自己并调用自己，这就是递归。</p>\n<p>递归算法设计的基本思想是：对于一个复杂的问题，把原问题分解为若干个相对简单类同的子问题，继续下去直到子问题简单到能够直接求解，也就是说到了递归的出口，这样原问题就有递归得解。<br>例如上面二分查找(一个复杂的问题)，我们不断将查找范围减半（也就是把原问题分解为相对简单的子问题），直到查找范围就剩一个数（子问题简单到能够直接求解），我们就找到了递归的出口(也就是上述函数中的return middle)。</p>\n<p>举两个个生活中的例子来说明什么是递归</p>\n<ol>\n<li>递归就是洋葱，一个洋葱是带着一层洋葱皮的洋葱，拨开一层洋葱皮，里面还是洋葱，再剥开一层洋葱皮，里面···还是洋葱。（如果你愿意一层一层一层的剥开TA的心。。。）</li>\n<li>递归就是包子馅的包子，也就是你剥开包子皮，发现里面是一个新的包子。对这个包子取一个极限，你就会发现，这个包子就是一个馒头。。。</li>\n</ol>\n<p>上面说到，使用递归算法求解，需要找到递归的出口，很容易理解，若是没有出口，那么函数总是自己调用自己，永远也不会停下来，直到报出栈溢出(StackOverflowError)的异常。例如如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        test();        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        test();     <span class=\"comment\">//自己调用自己   </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.StackOverflowError</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">        at Test.test(Test.java:<span class=\"number\">11</span>)</span><br></pre></td></tr></table></figure>\n<p>拿上面包子馅的包子来举例，我们一层层的剥开包子皮，目的就是找到最里面的包子，但如果我们在递归算法中不设置出口条件，那么就会出现不管剥开多少次包子皮，都找不到最里面的包子的情况。然后你就会发现，这包子其实就是一个馒头。。</p>\n<p>所以在我们使用递归算法的时候，必须有一个明确的递归结束条件，称为<code>递归出口</code>，有的书上也称为<code>基线条件</code>。<br>每个递归函数都需要包含两部分，基线条件和递归条件。递归条件指的是函数调用自己，而基线条件指的是函数不再调用自己，从而避免无线循环。<br>例如上述二分查找中的基线条件与递归条件，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span>(arr[middle] &gt; key)&#123;           <span class=\"comment\">//递归条件</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,low,middle-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[middle] &lt; key)&#123;    <span class=\"comment\">//递归条件</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recursionBinarySearch(arr, key,middle+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;                         <span class=\"comment\">//基线条件（递归出口）</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>递归的应用有哪些呢？最经典的应用就是求斐波那契数列了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>)&#123;     <span class=\"comment\">// 基线条件（递归出口）</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(n-<span class=\"number\">1</span>) + f(n-<span class=\"number\">2</span>);    <span class=\"comment\">//递归条件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然斐波那契数列也可以用循环的方式来解决。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> f0 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> f1 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> f2 = <span class=\"number\">0</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n; i++)&#123;  </span><br><span class=\"line\">        f2 = f0 + f1;  </span><br><span class=\"line\">        f0 = f1;  </span><br><span class=\"line\">        f1 = f2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f2;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这两种方法的作用相同，结过相同，但在程序运行的性能上有很大差距。<br>使用递归的方式来求解斐波那契数列的时间复杂度为O(2<sup>n</sup>)，而使用循环的方式的时间复杂度为O(n)。可见递归只是让解决方案变得更清晰，并没有性能上的优势。实际上，在一些情况下，使用循环的性能更好。</p>\n<p>当然，递归的应用并不只是斐波那契数列求和，二叉树的遍历，排序算法中的排序，都可以用递归来实现。</p>\n<p>递归是一种非常优雅的问题解决方法（在不考虑程序性能的前提下），递归将人分为截然不同的阵营：恨它的、爱它的以及恨了几年后又爱上它的。</p>\n<p>最后分享一句话，Leigh Caldwell在Stack Overflow上说：“如果使用循环，程序的性能可能更高；如果使用递归，程序可能更容易理解。如何选择要看什么对你来说更重要。”</p>\n"},{"title":"求一个整数转换为二进制之后其中1的个数","date":"2019-10-09T11:20:01.000Z","_content":"\n今天面试摩拜单车遇到一道算法题，题目如下：\n\n给定一个正整数范围(m,n)，返回一个数组，该数组是每个正整数转换为相应二进制之后包含1的个数\n\n> 示例\n\n```\n给定 (1,5) ， \n1的二进制位1，二进制表示中包含位1的个数位1，\n2的二进制位10，二进制表示中包含位1的个数位1，\n3的二进制为11，二进制表示中包含位1的个数位2，\n4的二进制位100，二进制表示中包含位1的个数位1，\n5的二进制位101，二进制表示中包含位1的个数位2，\n所以返回数组 [1，1，2，1，2]\n```\n\n这道题有点像LeetCode上`位1的个数`这道题目。\n\n那么怎么解决呢？\n\n最简单的方法就是，求出每一个数二进制中位1的个数，拼成一个数组，那么如何求出正整数中二进制位1的个数呢？\n\n重点就是求每个数的位1的个数。\n\n这里就要用到位运算了。大家初中高中或者大学学计算机基础的时候应该都学过基础位运算，也就是`与`，`或`，`非`的运算。(还有一些比较复杂的，例如`异或`，`与非`等组合位运算)\n\n代码如下：\n\n```Java\npublic static int NumberOfOne(int n){\n    int count = 0;\n    while (n != 0) {\n        count++;\n        n &= (n - 1);\n    }\n    return count;\n}\n```\n\n我们不断把数字最后一个 `1` 反转，并把答案加一。当数字变成 `0` 的时候偶，我们就知道它没有 `1` 的位了，此时返回答案。\n\n这里关键的想法是对于任意数字 `n` ，将 `n` 和 `n-1`做与运算，会把最后一个 `1` 的位变成 `0` 。为什么？考虑 `n` 和 `n−1` 的二进制表示。\n\n我们来详细解读一下 `n & (n - 1)`\n1. 假设`n=5`,`n & (n - 1)`就是`5&4`，转换为二进制就是 `101&100=100`\n2. 假设`n=4`,`n & (n - 1)`就是`4&3`，转换为二进制就是 `100&011=000`\n\n可以看到，每一次`n&(n-1)`的操作就会把n中的位1减少一位，为什么呢？因为二进制，无论数字是多少，在二进制运算中，只要做了-1的操作，就会改变最后一位的值，1变为0或者0变为1.\n\n1变为0就是上面`1`的情况，\n0变为1就是上面`2`的情况。\n\n可以发现，由于每次`- 1`操作都会带了位的变化，所以每次`n&n-1`,都会把二进制中`最后的一位1`消除掉，比如`101&100=100`，消除了`101`最后的1变为`100`，`100&011=000`，消除了`100`最后的`1`，也是惟一的1变为`000`。所以，当我们不断把`n&=n-1`，直到`n=0`的时候，n中的位1就被完全消除了，这个操作做了几次，也就代表n转换为二进制，其中位1的个数有几个。\n\n看到这里，这道题最重要的问题就解决了，剩下的工作就是写个for循环将每位数的结果封装成一个数组就行了，for循环很简单，这里就不再赘述了。\n\n","source":"_posts/求一个整数转换为二进制之后其中1的个数.md","raw":"---\ntitle: 求一个整数转换为二进制之后其中1的个数\ndate: 2019-10-09 19:20:01\ntags: [算法,LeetCode]\n---\n\n今天面试摩拜单车遇到一道算法题，题目如下：\n\n给定一个正整数范围(m,n)，返回一个数组，该数组是每个正整数转换为相应二进制之后包含1的个数\n\n> 示例\n\n```\n给定 (1,5) ， \n1的二进制位1，二进制表示中包含位1的个数位1，\n2的二进制位10，二进制表示中包含位1的个数位1，\n3的二进制为11，二进制表示中包含位1的个数位2，\n4的二进制位100，二进制表示中包含位1的个数位1，\n5的二进制位101，二进制表示中包含位1的个数位2，\n所以返回数组 [1，1，2，1，2]\n```\n\n这道题有点像LeetCode上`位1的个数`这道题目。\n\n那么怎么解决呢？\n\n最简单的方法就是，求出每一个数二进制中位1的个数，拼成一个数组，那么如何求出正整数中二进制位1的个数呢？\n\n重点就是求每个数的位1的个数。\n\n这里就要用到位运算了。大家初中高中或者大学学计算机基础的时候应该都学过基础位运算，也就是`与`，`或`，`非`的运算。(还有一些比较复杂的，例如`异或`，`与非`等组合位运算)\n\n代码如下：\n\n```Java\npublic static int NumberOfOne(int n){\n    int count = 0;\n    while (n != 0) {\n        count++;\n        n &= (n - 1);\n    }\n    return count;\n}\n```\n\n我们不断把数字最后一个 `1` 反转，并把答案加一。当数字变成 `0` 的时候偶，我们就知道它没有 `1` 的位了，此时返回答案。\n\n这里关键的想法是对于任意数字 `n` ，将 `n` 和 `n-1`做与运算，会把最后一个 `1` 的位变成 `0` 。为什么？考虑 `n` 和 `n−1` 的二进制表示。\n\n我们来详细解读一下 `n & (n - 1)`\n1. 假设`n=5`,`n & (n - 1)`就是`5&4`，转换为二进制就是 `101&100=100`\n2. 假设`n=4`,`n & (n - 1)`就是`4&3`，转换为二进制就是 `100&011=000`\n\n可以看到，每一次`n&(n-1)`的操作就会把n中的位1减少一位，为什么呢？因为二进制，无论数字是多少，在二进制运算中，只要做了-1的操作，就会改变最后一位的值，1变为0或者0变为1.\n\n1变为0就是上面`1`的情况，\n0变为1就是上面`2`的情况。\n\n可以发现，由于每次`- 1`操作都会带了位的变化，所以每次`n&n-1`,都会把二进制中`最后的一位1`消除掉，比如`101&100=100`，消除了`101`最后的1变为`100`，`100&011=000`，消除了`100`最后的`1`，也是惟一的1变为`000`。所以，当我们不断把`n&=n-1`，直到`n=0`的时候，n中的位1就被完全消除了，这个操作做了几次，也就代表n转换为二进制，其中位1的个数有几个。\n\n看到这里，这道题最重要的问题就解决了，剩下的工作就是写个for循环将每位数的结果封装成一个数组就行了，for循环很简单，这里就不再赘述了。\n\n","slug":"求一个整数转换为二进制之后其中1的个数","published":1,"updated":"2019-10-09T12:38:10.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka7j79fr002t07k398385jjq","content":"<p>今天面试摩拜单车遇到一道算法题，题目如下：</p>\n<p>给定一个正整数范围(m,n)，返回一个数组，该数组是每个正整数转换为相应二进制之后包含1的个数</p>\n<blockquote>\n<p>示例</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 (1,5) ， </span><br><span class=\"line\">1的二进制位1，二进制表示中包含位1的个数位1，</span><br><span class=\"line\">2的二进制位10，二进制表示中包含位1的个数位1，</span><br><span class=\"line\">3的二进制为11，二进制表示中包含位1的个数位2，</span><br><span class=\"line\">4的二进制位100，二进制表示中包含位1的个数位1，</span><br><span class=\"line\">5的二进制位101，二进制表示中包含位1的个数位2，</span><br><span class=\"line\">所以返回数组 [1，1，2，1，2]</span><br></pre></td></tr></table></figure>\n\n<p>这道题有点像LeetCode上<code>位1的个数</code>这道题目。</p>\n<p>那么怎么解决呢？</p>\n<p>最简单的方法就是，求出每一个数二进制中位1的个数，拼成一个数组，那么如何求出正整数中二进制位1的个数呢？</p>\n<p>重点就是求每个数的位1的个数。</p>\n<p>这里就要用到位运算了。大家初中高中或者大学学计算机基础的时候应该都学过基础位运算，也就是<code>与</code>，<code>或</code>，<code>非</code>的运算。(还有一些比较复杂的，例如<code>异或</code>，<code>与非</code>等组合位运算)</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOfOne</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        n &amp;= (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们不断把数字最后一个 <code>1</code> 反转，并把答案加一。当数字变成 <code>0</code> 的时候偶，我们就知道它没有 <code>1</code> 的位了，此时返回答案。</p>\n<p>这里关键的想法是对于任意数字 <code>n</code> ，将 <code>n</code> 和 <code>n-1</code>做与运算，会把最后一个 <code>1</code> 的位变成 <code>0</code> 。为什么？考虑 <code>n</code> 和 <code>n−1</code> 的二进制表示。</p>\n<p>我们来详细解读一下 <code>n &amp; (n - 1)</code></p>\n<ol>\n<li>假设<code>n=5</code>,<code>n &amp; (n - 1)</code>就是<code>5&amp;4</code>，转换为二进制就是 <code>101&amp;100=100</code></li>\n<li>假设<code>n=4</code>,<code>n &amp; (n - 1)</code>就是<code>4&amp;3</code>，转换为二进制就是 <code>100&amp;011=000</code></li>\n</ol>\n<p>可以看到，每一次<code>n&amp;(n-1)</code>的操作就会把n中的位1减少一位，为什么呢？因为二进制，无论数字是多少，在二进制运算中，只要做了-1的操作，就会改变最后一位的值，1变为0或者0变为1.</p>\n<p>1变为0就是上面<code>1</code>的情况，<br>0变为1就是上面<code>2</code>的情况。</p>\n<p>可以发现，由于每次<code>- 1</code>操作都会带了位的变化，所以每次<code>n&amp;n-1</code>,都会把二进制中<code>最后的一位1</code>消除掉，比如<code>101&amp;100=100</code>，消除了<code>101</code>最后的1变为<code>100</code>，<code>100&amp;011=000</code>，消除了<code>100</code>最后的<code>1</code>，也是惟一的1变为<code>000</code>。所以，当我们不断把<code>n&amp;=n-1</code>，直到<code>n=0</code>的时候，n中的位1就被完全消除了，这个操作做了几次，也就代表n转换为二进制，其中位1的个数有几个。</p>\n<p>看到这里，这道题最重要的问题就解决了，剩下的工作就是写个for循环将每位数的结果封装成一个数组就行了，for循环很简单，这里就不再赘述了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天面试摩拜单车遇到一道算法题，题目如下：</p>\n<p>给定一个正整数范围(m,n)，返回一个数组，该数组是每个正整数转换为相应二进制之后包含1的个数</p>\n<blockquote>\n<p>示例</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 (1,5) ， </span><br><span class=\"line\">1的二进制位1，二进制表示中包含位1的个数位1，</span><br><span class=\"line\">2的二进制位10，二进制表示中包含位1的个数位1，</span><br><span class=\"line\">3的二进制为11，二进制表示中包含位1的个数位2，</span><br><span class=\"line\">4的二进制位100，二进制表示中包含位1的个数位1，</span><br><span class=\"line\">5的二进制位101，二进制表示中包含位1的个数位2，</span><br><span class=\"line\">所以返回数组 [1，1，2，1，2]</span><br></pre></td></tr></table></figure>\n\n<p>这道题有点像LeetCode上<code>位1的个数</code>这道题目。</p>\n<p>那么怎么解决呢？</p>\n<p>最简单的方法就是，求出每一个数二进制中位1的个数，拼成一个数组，那么如何求出正整数中二进制位1的个数呢？</p>\n<p>重点就是求每个数的位1的个数。</p>\n<p>这里就要用到位运算了。大家初中高中或者大学学计算机基础的时候应该都学过基础位运算，也就是<code>与</code>，<code>或</code>，<code>非</code>的运算。(还有一些比较复杂的，例如<code>异或</code>，<code>与非</code>等组合位运算)</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOfOne</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        n &amp;= (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们不断把数字最后一个 <code>1</code> 反转，并把答案加一。当数字变成 <code>0</code> 的时候偶，我们就知道它没有 <code>1</code> 的位了，此时返回答案。</p>\n<p>这里关键的想法是对于任意数字 <code>n</code> ，将 <code>n</code> 和 <code>n-1</code>做与运算，会把最后一个 <code>1</code> 的位变成 <code>0</code> 。为什么？考虑 <code>n</code> 和 <code>n−1</code> 的二进制表示。</p>\n<p>我们来详细解读一下 <code>n &amp; (n - 1)</code></p>\n<ol>\n<li>假设<code>n=5</code>,<code>n &amp; (n - 1)</code>就是<code>5&amp;4</code>，转换为二进制就是 <code>101&amp;100=100</code></li>\n<li>假设<code>n=4</code>,<code>n &amp; (n - 1)</code>就是<code>4&amp;3</code>，转换为二进制就是 <code>100&amp;011=000</code></li>\n</ol>\n<p>可以看到，每一次<code>n&amp;(n-1)</code>的操作就会把n中的位1减少一位，为什么呢？因为二进制，无论数字是多少，在二进制运算中，只要做了-1的操作，就会改变最后一位的值，1变为0或者0变为1.</p>\n<p>1变为0就是上面<code>1</code>的情况，<br>0变为1就是上面<code>2</code>的情况。</p>\n<p>可以发现，由于每次<code>- 1</code>操作都会带了位的变化，所以每次<code>n&amp;n-1</code>,都会把二进制中<code>最后的一位1</code>消除掉，比如<code>101&amp;100=100</code>，消除了<code>101</code>最后的1变为<code>100</code>，<code>100&amp;011=000</code>，消除了<code>100</code>最后的<code>1</code>，也是惟一的1变为<code>000</code>。所以，当我们不断把<code>n&amp;=n-1</code>，直到<code>n=0</code>的时候，n中的位1就被完全消除了，这个操作做了几次，也就代表n转换为二进制，其中位1的个数有几个。</p>\n<p>看到这里，这道题最重要的问题就解决了，剩下的工作就是写个for循环将每位数的结果封装成一个数组就行了，for循环很简单，这里就不再赘述了。</p>\n"},{"title":"Java代理模式","date":"2020-05-15T02:17:17.000Z","_content":"\n代理模式的含义是，给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。代理模式是一种结构型设计模式。\n\n代理模式角色分为 3 种：\n\nSubject（抽象主题角色）：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；\n\nRealSubject（真实主题角色）：真正实现业务逻辑的类；\n\nProxy（代理主题角色）：用来代理和封装真实主题；\n\n先来看看静态代理\n\n编写一个接口（抽象主题角色）\n\n```java\npublic interface UserService {\n    public void select();   \n    public void update();\n}\n```\n\n然后编写该接口的实现类（真实主题角色）\n\n```java\npublic class UserServiceImpl implements UserService {  \n    public void select() {  \n        System.out.println(\"查询 selectById\");\n    }\n    public void update() {\n        System.out.println(\"更新 update\");\n    }\n}\n```\n\n写一个代理类 UserServiceProxy（代理主题角色），代理类需要实现`UserService`，对`UserServiceImpl`进行功能一些增强\n\n```java\npublic class UserServiceProxy implements UserService {\n    private UserService target; // 被代理的对象\n\n    public UserServiceProxy(UserService target) {\n        this.target = target;\n    }\n    public void select() {\n        before();\n        target.select();    // 这里才实际调用真实主题角色的方法\n        after();\n    }\n    public void update() {\n        before();\n        target.update();    // 这里才实际调用真实主题角色的方法\n        after();\n    }\n\n    private void before() {     // 在执行方法之前执行\n        System.out.println(String.format(\"log start time [%s] \", new Date()));\n    }\n    private void after() {      // 在执行方法之后执行\n        System.out.println(String.format(\"log end time [%s] \", new Date()));\n    }\n}\n```\n\n然后测试一下\n\n```java\npublic class Client1 {\n    public static void main(String[] args) {\n        UserService userServiceImpl = new UserServiceImpl();\n        UserService proxy = new UserServiceProxy(userServiceImpl);//传入需要被代理的角色\n\n        proxy.select();\n        proxy.update();\n    }\n}\n```\n\n输出：\n\n```java\nlog start time [Fri May 15 10:27:28 CST 2020] \n查询 selectById\nlog end time [Fri May 15 10:27:28 CST 2020] \nlog start time [Fri May 15 10:27:28 CST 2020] \n更新 update\nlog end time [Fri May 15 10:27:28 CST 2020] \n```\n\n可以看到，我们通过代理类对`userServiceImpl`的两个方法进行了增强，在方法执行前后打印了一些日志。\n\n大家可能会想到，Spring中AOP功能，也可以在一些方法执行前后打印一些日志，做一些操作。其实这也是用了代理模式，但是SpringAOP中用的并不是上述的简单的静态代理，而是使用的动态代理，jdk动态代理，或者cglib动态代理。\n\n静态代理有一些优缺点我们来看一下：\n\n- 静态代理优点\n1. 达到了功能增强的目的，而且没有侵入原代码\n\n- 静态代理缺点\n1. 当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：\n   只维护一个代理类，由这个代理类实现多个接口，但是这样就导致代理类过于庞大 \n   新建多个代理类，每个目标对象对应一个代理类，但是这样会产生过多的代理类\n2. 当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，不易维护。\n\n一句话总结缺点，不够灵活简便。\n\n那么来看看动态代理\n\n1. jdk动态代理\n\njdk动态代理主要涉及两个类：`java.lang.reflect.Proxy` 和 `java.lang.reflect.InvocationHandler`，一看到`reflect`包，应该就能想到动态代理利用看Java的反射特性。\n\n我们还编写一个代理类，实现上述静态代理中打印日志的功能\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.util.Date;\n\npublic class LogHandler implements InvocationHandler {\n    Object target;  // 被代理的对象，实际的方法执行者\n\n    public LogHandler(Object target) {\n        this.target = target;\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        before();\n        Object result = method.invoke(target, args);  // 调用 target 的 method 方法\n        after();\n        return result;  // 返回方法的执行结果\n    }\n    // 调用invoke方法之前执行\n    private void before() {\n        System.out.println(String.format(\"log start time [%s] \", new Date()));\n    }\n    // 调用invoke方法之后执行\n    private void after() {\n        System.out.println(String.format(\"log end time [%s] \", new Date()));\n    }\n}\n```\n\n写一个主类来测试\n```java\npublic class Client2 {\n    public static void main(String[] args) throws IllegalAccessException, InstantiationException {\n        // 1. 创建被代理的对象，UserService接口的实现类\n        UserServiceImpl userServiceImpl = new UserServiceImpl();\n        // 2. 获取对应的 ClassLoader\n        ClassLoader classLoader = userServiceImpl.getClass().getClassLoader();\n        // 3. 获取所有接口的Class，这里的UserServiceImpl只实现了一个接口UserService，\n        Class[] interfaces = userServiceImpl.getClass().getInterfaces();\n        // 4. 创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用\n        //     这里创建的是一个自定义的日志处理器，须传入实际的执行对象 userServiceImpl\n        InvocationHandler logHandler = new LogHandler(userServiceImpl);\n        /*\n\t\t   5.根据上面提供的信息，创建代理对象 在这个过程中，\n               a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码\n               b.然后根据相应的字节码转换成对应的class，\n               c.然后调用newInstance()创建代理实例\n\t\t */\n        UserService proxy = (UserService) Proxy.newProxyInstance(classLoader, interfaces, logHandler);\n        // 调用代理的方法\n        proxy.select();\n        proxy.update();\n    }\n}\n```\n\n执行结果\n```java\nlog start time [Fri May 15 10:38:31 CST 2020] \n查询 selectById\nlog end time [Fri May 15 10:38:31 CST 2020] \nlog start time [Fri May 15 10:38:31 CST 2020] \n更新 update\nlog end time [Fri May 15 10:38:31 CST 2020] \n```\n\nInvocationHandler 和 Proxy 的主要方法介绍如下：\n\n - java.lang.reflect.InvocationHandler\n`Object invoke(Object proxy, Method method, Object[] args)` 定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用\n\n- java.lang.reflect.Proxy\n`static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)` 构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的 invoke 方法\n\n2. cglib动态代理\n\nmaven引入CGLIB包\n\n```xml\n<dependency>\n    <groupId>cglib</groupId>\n    <artifactId>cglib</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n- 注意，从`Spring 3.2`开始， 不需要定义cglib依赖关系它已经被重新打包并直接集成在 `spring-core` 这个jar包中。\n\n编写一个UserDao类，它没有接口，只有两个方法，select() 和 update()\n\n```java\npublic class UserDao {\n    public void select() {\n        System.out.println(\"UserDao 查询 selectById\");\n    }\n    public void update() {\n        System.out.println(\"UserDao 更新 update\");\n    }\n}\n```\n\n编写一个 LogInterceptor ，继承了 MethodInterceptor，用于方法的拦截回调\n\n```java\npublic class LogInterceptor implements MethodInterceptor {\n    /**\n     * @param object 表示要进行增强的对象\n     * @param method 表示拦截的方法\n     * @param objects 数组表示参数列表，基本数据类型需要传入其包装类型，如int-->Integer、long-Long、double-->Double\n     * @param methodProxy 表示对方法的代理，invokeSuper方法表示对被代理对象方法的调用\n     * @return 执行结果\n     * @throws Throwable\n     */\n    @Override\n    public Object intercept(Object object, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n        before();\n        Object result = methodProxy.invokeSuper(object, objects);   // 注意这里是调用 invokeSuper 而不是 invoke，否则死循环，methodProxy.invokesuper执行的是原始类的方法，method.invoke执行的是子类的方法\n        after();\n        return result;\n    }\n    private void before() {\n        System.out.println(String.format(\"log start time [%s] \", new Date()));\n    }\n    private void after() {\n        System.out.println(String.format(\"log end time [%s] \", new Date()));\n    }\n}\n```\n\n测试类：\n\n```java\npublic class CglibTest {\n    public static void main(String[] args) {\n        LogInterceptor logInterceptor = new LogInterceptor();\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(UserDao.class);   // 设置超类，cglib是通过继承来实现的\n        enhancer.setCallback(logInterceptor);\n\n        UserDao proxy = (UserDao) enhancer.create();   // 创建代理类\n        proxy.select();\n        proxy.update();\n\n    }\n}\n```\n\n执行结果：\n\n```java\nlog start time [Fri May 15 10:50:36 CST 2020] \nUserDao 查询 selectById\nlog end time [Fri May 15 10:50:36 CST 2020] \nlog start time [Fri May 15 10:50:36 CST 2020] \nUserDao 更新 update\nlog end time [Fri May 15 10:50:36 CST 2020] \n```\n\n还可以进一步多个 MethodInterceptor 进行过滤筛选\n\n定义`LogInterceptor2`\n\n```java\npublic class LogInterceptor2 implements MethodInterceptor {\n    @Override\n    public Object intercept(Object object, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n        before();\n        Object result = methodProxy.invokeSuper(object, objects);\n        after();\n        return result;\n    }\n    private void before() {\n        System.out.println(String.format(\"log2 start time [%s] \", new Date()));\n    }\n    private void after() {\n        System.out.println(String.format(\"log2 end time [%s] \", new Date()));\n    }\n}\n```\n\n定义一个回调过滤器，在cglib回调时可以设置对不同方法执行不同的回调逻辑，或者根本不执行回调。\n\n```java\npublic class DaoFilter implements CallbackFilter {\n    @Override\n    public int accept(Method method) {\n        if (\"select\".equals(method.getName())) {\n            return 0;   // Callback 列表第1个拦截器 UserDao.select方法执行第一个拦截器\n        }\n        return 1;   // Callback 列表第2个拦截器，return 2 则为第3个，以此类推\n    }\n}\n```\n\n测试类：\n\n```java\npublic class CglibTest2 {\n    public static void main(String[] args) {\n        LogInterceptor logInterceptor = new LogInterceptor();\n        LogInterceptor2 logInterceptor2 = new LogInterceptor2();\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(UserDao.class);   // 设置超类，cglib是通过继承来实现的\n        enhancer.setCallbacks(new Callback[]{logInterceptor, logInterceptor2, NoOp.INSTANCE});   // 设置多个拦截器，NoOp.INSTANCE是一个空拦截器，不做任何处理\n        enhancer.setCallbackFilter(new DaoFilter());\n\n        UserDao proxy = (UserDao) enhancer.create();   // 创建代理类\n        proxy.select();\n        proxy.update();\n    }\n}\n```\n\n运行结果\n\n```java\nlog start time [Fri May 15 10:54:18 CST 2020] \nUserDao 查询 selectById\nlog end time [Fri May 15 10:54:18 CST 2020] \nlog2 start time [Fri May 15 10:54:18 CST 2020] \nUserDao 更新 update\nlog2 end time [Fri May 15 10:54:18 CST 2020] \n```\n可以看到\n- select方法执行第一个拦截器，打印`log`\n- update方法执行第二个拦截器，打印`log2`\n\ncglib 创建动态代理类的模式是：\n\n1. 查找目标类上的所有非final 的public类型的方法定义；\n2. 将这些方法的定义转换成字节码；\n3. 将组成的字节码转换成相应的代理的class对象；\n4. 实现 MethodInterceptor接口，用来处理对代理类上所有方法的请求\n\njdk动态代理与cglib动态代理对比:\n\n- jdk动态代理：基于Java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象。\n- cglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。\n\njdk动态代理的优势：\n\n1. 最小化依赖关系，减少依赖意味着简化开发和维护，JDK 本身的支持，可能比 cglib 更加可靠。\n2. 平滑进行 JDK 版本升级，而字节码类库通常需要进行更新以保证在新版 Java 上能够使用。\n3. 代码实现简单。\n\ncglib动态代理的优势：\n\n1. 无需实现接口，达到代理类无侵入\n2. 只操作我们关心的类，而不必为其他相关类增加工作量。\n3. 高性能\n\n另外：\n\n- Spring5 之前的版本 AOP 在默认情况下是使用 jdk 动态代理的，之后的版本默认使用 jdk 动态代理，如果对象没有实现接口，则使用 cglib 代理。\n- 在 SpringBoot 1.5.x 版本中，默认还是使用 jdk 动态代理的。\n- SpringBoot 2.x 为何默认使用 cglib\n\n\nSpringBoot 2.x 版本为什么要默认使用 Cglib 来实现 AOP 呢？这么做的好处又是什么呢？\n\n假设，我们有一个UserServiceImpl和UserService类，此时需要在UserContoller中使用UserService。在 Spring 中通常都习惯这样写代码：\n\n```java\n@Autowired\nUserService userService;\n```\n\n在这种情况下，无论是使用 jdk 动态代理，还是 cglib 都不会出现问题。\n\n但是，如果你的代码是这样的呢：\n\n```java\n@Autowired\nUserServiceImpl userService;\n```\n\n这个时候，如果我们是使用 JDK 动态代理，那在启动时就会报错：\n\n因为 JDK 动态代理是基于接口的，代理生成的对象只能赋值给接口变量。\n而 CGLIB 就不存在这个问题。因为 CGLIB 是通过生成子类来实现的，代理对象无论是赋值给接口还是实现类这两者都是代理对象的父类。\nSpringBoot 正是出于这种考虑，于是在 2.x 版本中，将 AOP 默认实现改为了 CGLIB。\n","source":"_posts/Java代理模式.md","raw":"---\ntitle: Java代理模式\ndate: 2020-05-15 10:17:17\ntags: [设计模式,jdk动态代理,cglib]\n---\n\n代理模式的含义是，给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。代理模式是一种结构型设计模式。\n\n代理模式角色分为 3 种：\n\nSubject（抽象主题角色）：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；\n\nRealSubject（真实主题角色）：真正实现业务逻辑的类；\n\nProxy（代理主题角色）：用来代理和封装真实主题；\n\n先来看看静态代理\n\n编写一个接口（抽象主题角色）\n\n```java\npublic interface UserService {\n    public void select();   \n    public void update();\n}\n```\n\n然后编写该接口的实现类（真实主题角色）\n\n```java\npublic class UserServiceImpl implements UserService {  \n    public void select() {  \n        System.out.println(\"查询 selectById\");\n    }\n    public void update() {\n        System.out.println(\"更新 update\");\n    }\n}\n```\n\n写一个代理类 UserServiceProxy（代理主题角色），代理类需要实现`UserService`，对`UserServiceImpl`进行功能一些增强\n\n```java\npublic class UserServiceProxy implements UserService {\n    private UserService target; // 被代理的对象\n\n    public UserServiceProxy(UserService target) {\n        this.target = target;\n    }\n    public void select() {\n        before();\n        target.select();    // 这里才实际调用真实主题角色的方法\n        after();\n    }\n    public void update() {\n        before();\n        target.update();    // 这里才实际调用真实主题角色的方法\n        after();\n    }\n\n    private void before() {     // 在执行方法之前执行\n        System.out.println(String.format(\"log start time [%s] \", new Date()));\n    }\n    private void after() {      // 在执行方法之后执行\n        System.out.println(String.format(\"log end time [%s] \", new Date()));\n    }\n}\n```\n\n然后测试一下\n\n```java\npublic class Client1 {\n    public static void main(String[] args) {\n        UserService userServiceImpl = new UserServiceImpl();\n        UserService proxy = new UserServiceProxy(userServiceImpl);//传入需要被代理的角色\n\n        proxy.select();\n        proxy.update();\n    }\n}\n```\n\n输出：\n\n```java\nlog start time [Fri May 15 10:27:28 CST 2020] \n查询 selectById\nlog end time [Fri May 15 10:27:28 CST 2020] \nlog start time [Fri May 15 10:27:28 CST 2020] \n更新 update\nlog end time [Fri May 15 10:27:28 CST 2020] \n```\n\n可以看到，我们通过代理类对`userServiceImpl`的两个方法进行了增强，在方法执行前后打印了一些日志。\n\n大家可能会想到，Spring中AOP功能，也可以在一些方法执行前后打印一些日志，做一些操作。其实这也是用了代理模式，但是SpringAOP中用的并不是上述的简单的静态代理，而是使用的动态代理，jdk动态代理，或者cglib动态代理。\n\n静态代理有一些优缺点我们来看一下：\n\n- 静态代理优点\n1. 达到了功能增强的目的，而且没有侵入原代码\n\n- 静态代理缺点\n1. 当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：\n   只维护一个代理类，由这个代理类实现多个接口，但是这样就导致代理类过于庞大 \n   新建多个代理类，每个目标对象对应一个代理类，但是这样会产生过多的代理类\n2. 当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，不易维护。\n\n一句话总结缺点，不够灵活简便。\n\n那么来看看动态代理\n\n1. jdk动态代理\n\njdk动态代理主要涉及两个类：`java.lang.reflect.Proxy` 和 `java.lang.reflect.InvocationHandler`，一看到`reflect`包，应该就能想到动态代理利用看Java的反射特性。\n\n我们还编写一个代理类，实现上述静态代理中打印日志的功能\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.util.Date;\n\npublic class LogHandler implements InvocationHandler {\n    Object target;  // 被代理的对象，实际的方法执行者\n\n    public LogHandler(Object target) {\n        this.target = target;\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        before();\n        Object result = method.invoke(target, args);  // 调用 target 的 method 方法\n        after();\n        return result;  // 返回方法的执行结果\n    }\n    // 调用invoke方法之前执行\n    private void before() {\n        System.out.println(String.format(\"log start time [%s] \", new Date()));\n    }\n    // 调用invoke方法之后执行\n    private void after() {\n        System.out.println(String.format(\"log end time [%s] \", new Date()));\n    }\n}\n```\n\n写一个主类来测试\n```java\npublic class Client2 {\n    public static void main(String[] args) throws IllegalAccessException, InstantiationException {\n        // 1. 创建被代理的对象，UserService接口的实现类\n        UserServiceImpl userServiceImpl = new UserServiceImpl();\n        // 2. 获取对应的 ClassLoader\n        ClassLoader classLoader = userServiceImpl.getClass().getClassLoader();\n        // 3. 获取所有接口的Class，这里的UserServiceImpl只实现了一个接口UserService，\n        Class[] interfaces = userServiceImpl.getClass().getInterfaces();\n        // 4. 创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用\n        //     这里创建的是一个自定义的日志处理器，须传入实际的执行对象 userServiceImpl\n        InvocationHandler logHandler = new LogHandler(userServiceImpl);\n        /*\n\t\t   5.根据上面提供的信息，创建代理对象 在这个过程中，\n               a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码\n               b.然后根据相应的字节码转换成对应的class，\n               c.然后调用newInstance()创建代理实例\n\t\t */\n        UserService proxy = (UserService) Proxy.newProxyInstance(classLoader, interfaces, logHandler);\n        // 调用代理的方法\n        proxy.select();\n        proxy.update();\n    }\n}\n```\n\n执行结果\n```java\nlog start time [Fri May 15 10:38:31 CST 2020] \n查询 selectById\nlog end time [Fri May 15 10:38:31 CST 2020] \nlog start time [Fri May 15 10:38:31 CST 2020] \n更新 update\nlog end time [Fri May 15 10:38:31 CST 2020] \n```\n\nInvocationHandler 和 Proxy 的主要方法介绍如下：\n\n - java.lang.reflect.InvocationHandler\n`Object invoke(Object proxy, Method method, Object[] args)` 定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用\n\n- java.lang.reflect.Proxy\n`static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)` 构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的 invoke 方法\n\n2. cglib动态代理\n\nmaven引入CGLIB包\n\n```xml\n<dependency>\n    <groupId>cglib</groupId>\n    <artifactId>cglib</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n- 注意，从`Spring 3.2`开始， 不需要定义cglib依赖关系它已经被重新打包并直接集成在 `spring-core` 这个jar包中。\n\n编写一个UserDao类，它没有接口，只有两个方法，select() 和 update()\n\n```java\npublic class UserDao {\n    public void select() {\n        System.out.println(\"UserDao 查询 selectById\");\n    }\n    public void update() {\n        System.out.println(\"UserDao 更新 update\");\n    }\n}\n```\n\n编写一个 LogInterceptor ，继承了 MethodInterceptor，用于方法的拦截回调\n\n```java\npublic class LogInterceptor implements MethodInterceptor {\n    /**\n     * @param object 表示要进行增强的对象\n     * @param method 表示拦截的方法\n     * @param objects 数组表示参数列表，基本数据类型需要传入其包装类型，如int-->Integer、long-Long、double-->Double\n     * @param methodProxy 表示对方法的代理，invokeSuper方法表示对被代理对象方法的调用\n     * @return 执行结果\n     * @throws Throwable\n     */\n    @Override\n    public Object intercept(Object object, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n        before();\n        Object result = methodProxy.invokeSuper(object, objects);   // 注意这里是调用 invokeSuper 而不是 invoke，否则死循环，methodProxy.invokesuper执行的是原始类的方法，method.invoke执行的是子类的方法\n        after();\n        return result;\n    }\n    private void before() {\n        System.out.println(String.format(\"log start time [%s] \", new Date()));\n    }\n    private void after() {\n        System.out.println(String.format(\"log end time [%s] \", new Date()));\n    }\n}\n```\n\n测试类：\n\n```java\npublic class CglibTest {\n    public static void main(String[] args) {\n        LogInterceptor logInterceptor = new LogInterceptor();\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(UserDao.class);   // 设置超类，cglib是通过继承来实现的\n        enhancer.setCallback(logInterceptor);\n\n        UserDao proxy = (UserDao) enhancer.create();   // 创建代理类\n        proxy.select();\n        proxy.update();\n\n    }\n}\n```\n\n执行结果：\n\n```java\nlog start time [Fri May 15 10:50:36 CST 2020] \nUserDao 查询 selectById\nlog end time [Fri May 15 10:50:36 CST 2020] \nlog start time [Fri May 15 10:50:36 CST 2020] \nUserDao 更新 update\nlog end time [Fri May 15 10:50:36 CST 2020] \n```\n\n还可以进一步多个 MethodInterceptor 进行过滤筛选\n\n定义`LogInterceptor2`\n\n```java\npublic class LogInterceptor2 implements MethodInterceptor {\n    @Override\n    public Object intercept(Object object, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n        before();\n        Object result = methodProxy.invokeSuper(object, objects);\n        after();\n        return result;\n    }\n    private void before() {\n        System.out.println(String.format(\"log2 start time [%s] \", new Date()));\n    }\n    private void after() {\n        System.out.println(String.format(\"log2 end time [%s] \", new Date()));\n    }\n}\n```\n\n定义一个回调过滤器，在cglib回调时可以设置对不同方法执行不同的回调逻辑，或者根本不执行回调。\n\n```java\npublic class DaoFilter implements CallbackFilter {\n    @Override\n    public int accept(Method method) {\n        if (\"select\".equals(method.getName())) {\n            return 0;   // Callback 列表第1个拦截器 UserDao.select方法执行第一个拦截器\n        }\n        return 1;   // Callback 列表第2个拦截器，return 2 则为第3个，以此类推\n    }\n}\n```\n\n测试类：\n\n```java\npublic class CglibTest2 {\n    public static void main(String[] args) {\n        LogInterceptor logInterceptor = new LogInterceptor();\n        LogInterceptor2 logInterceptor2 = new LogInterceptor2();\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(UserDao.class);   // 设置超类，cglib是通过继承来实现的\n        enhancer.setCallbacks(new Callback[]{logInterceptor, logInterceptor2, NoOp.INSTANCE});   // 设置多个拦截器，NoOp.INSTANCE是一个空拦截器，不做任何处理\n        enhancer.setCallbackFilter(new DaoFilter());\n\n        UserDao proxy = (UserDao) enhancer.create();   // 创建代理类\n        proxy.select();\n        proxy.update();\n    }\n}\n```\n\n运行结果\n\n```java\nlog start time [Fri May 15 10:54:18 CST 2020] \nUserDao 查询 selectById\nlog end time [Fri May 15 10:54:18 CST 2020] \nlog2 start time [Fri May 15 10:54:18 CST 2020] \nUserDao 更新 update\nlog2 end time [Fri May 15 10:54:18 CST 2020] \n```\n可以看到\n- select方法执行第一个拦截器，打印`log`\n- update方法执行第二个拦截器，打印`log2`\n\ncglib 创建动态代理类的模式是：\n\n1. 查找目标类上的所有非final 的public类型的方法定义；\n2. 将这些方法的定义转换成字节码；\n3. 将组成的字节码转换成相应的代理的class对象；\n4. 实现 MethodInterceptor接口，用来处理对代理类上所有方法的请求\n\njdk动态代理与cglib动态代理对比:\n\n- jdk动态代理：基于Java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象。\n- cglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。\n\njdk动态代理的优势：\n\n1. 最小化依赖关系，减少依赖意味着简化开发和维护，JDK 本身的支持，可能比 cglib 更加可靠。\n2. 平滑进行 JDK 版本升级，而字节码类库通常需要进行更新以保证在新版 Java 上能够使用。\n3. 代码实现简单。\n\ncglib动态代理的优势：\n\n1. 无需实现接口，达到代理类无侵入\n2. 只操作我们关心的类，而不必为其他相关类增加工作量。\n3. 高性能\n\n另外：\n\n- Spring5 之前的版本 AOP 在默认情况下是使用 jdk 动态代理的，之后的版本默认使用 jdk 动态代理，如果对象没有实现接口，则使用 cglib 代理。\n- 在 SpringBoot 1.5.x 版本中，默认还是使用 jdk 动态代理的。\n- SpringBoot 2.x 为何默认使用 cglib\n\n\nSpringBoot 2.x 版本为什么要默认使用 Cglib 来实现 AOP 呢？这么做的好处又是什么呢？\n\n假设，我们有一个UserServiceImpl和UserService类，此时需要在UserContoller中使用UserService。在 Spring 中通常都习惯这样写代码：\n\n```java\n@Autowired\nUserService userService;\n```\n\n在这种情况下，无论是使用 jdk 动态代理，还是 cglib 都不会出现问题。\n\n但是，如果你的代码是这样的呢：\n\n```java\n@Autowired\nUserServiceImpl userService;\n```\n\n这个时候，如果我们是使用 JDK 动态代理，那在启动时就会报错：\n\n因为 JDK 动态代理是基于接口的，代理生成的对象只能赋值给接口变量。\n而 CGLIB 就不存在这个问题。因为 CGLIB 是通过生成子类来实现的，代理对象无论是赋值给接口还是实现类这两者都是代理对象的父类。\nSpringBoot 正是出于这种考虑，于是在 2.x 版本中，将 AOP 默认实现改为了 CGLIB。\n","slug":"Java代理模式","published":1,"updated":"2020-05-15T07:10:56.311Z","_id":"cka7me9g00000x9k3fa7n5kr7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>代理模式的含义是，给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。代理模式是一种结构型设计模式。</p>\n<p>代理模式角色分为 3 种：</p>\n<p>Subject（抽象主题角色）：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；</p>\n<p>RealSubject（真实主题角色）：真正实现业务逻辑的类；</p>\n<p>Proxy（代理主题角色）：用来代理和封装真实主题；</p>\n<p>先来看看静态代理</p>\n<p>编写一个接口（抽象主题角色）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span></span>;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后编写该接口的实现类（真实主题角色）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"查询 selectById\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"更新 update\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写一个代理类 UserServiceProxy（代理主题角色），代理类需要实现<code>UserService</code>，对<code>UserServiceImpl</code>进行功能一些增强</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService target; <span class=\"comment\">// 被代理的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserServiceProxy</span><span class=\"params\">(UserService target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        target.select();    <span class=\"comment\">// 这里才实际调用真实主题角色的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        target.update();    <span class=\"comment\">// 这里才实际调用真实主题角色的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;     <span class=\"comment\">// 在执行方法之前执行</span></span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;      <span class=\"comment\">// 在执行方法之后执行</span></span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后测试一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        UserService userServiceImpl = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">        UserService proxy = <span class=\"keyword\">new</span> UserServiceProxy(userServiceImpl);<span class=\"comment\">//传入需要被代理的角色</span></span><br><span class=\"line\"></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">27</span>:<span class=\"number\">28</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">查询 selectById</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">27</span>:<span class=\"number\">28</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">27</span>:<span class=\"number\">28</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">更新 update</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">27</span>:<span class=\"number\">28</span> CST <span class=\"number\">2020</span>]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，我们通过代理类对<code>userServiceImpl</code>的两个方法进行了增强，在方法执行前后打印了一些日志。</p>\n<p>大家可能会想到，Spring中AOP功能，也可以在一些方法执行前后打印一些日志，做一些操作。其实这也是用了代理模式，但是SpringAOP中用的并不是上述的简单的静态代理，而是使用的动态代理，jdk动态代理，或者cglib动态代理。</p>\n<p>静态代理有一些优缺点我们来看一下：</p>\n<ul>\n<li>静态代理优点</li>\n</ul>\n<ol>\n<li>达到了功能增强的目的，而且没有侵入原代码</li>\n</ol>\n<ul>\n<li>静态代理缺点</li>\n</ul>\n<ol>\n<li>当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：<br>只维护一个代理类，由这个代理类实现多个接口，但是这样就导致代理类过于庞大<br>新建多个代理类，每个目标对象对应一个代理类，但是这样会产生过多的代理类</li>\n<li>当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，不易维护。</li>\n</ol>\n<p>一句话总结缺点，不够灵活简便。</p>\n<p>那么来看看动态代理</p>\n<ol>\n<li>jdk动态代理</li>\n</ol>\n<p>jdk动态代理主要涉及两个类：<code>java.lang.reflect.Proxy</code> 和 <code>java.lang.reflect.InvocationHandler</code>，一看到<code>reflect</code>包，应该就能想到动态代理利用看Java的反射特性。</p>\n<p>我们还编写一个代理类，实现上述静态代理中打印日志的功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    Object target;  <span class=\"comment\">// 被代理的对象，实际的方法执行者</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LogHandler</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        Object result = method.invoke(target, args);  <span class=\"comment\">// 调用 target 的 method 方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  <span class=\"comment\">// 返回方法的执行结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用invoke方法之前执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用invoke方法之后执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写一个主类来测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 创建被代理的对象，UserService接口的实现类</span></span><br><span class=\"line\">        UserServiceImpl userServiceImpl = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">        <span class=\"comment\">// 2. 获取对应的 ClassLoader</span></span><br><span class=\"line\">        ClassLoader classLoader = userServiceImpl.getClass().getClassLoader();</span><br><span class=\"line\">        <span class=\"comment\">// 3. 获取所有接口的Class，这里的UserServiceImpl只实现了一个接口UserService，</span></span><br><span class=\"line\">        Class[] interfaces = userServiceImpl.getClass().getInterfaces();</span><br><span class=\"line\">        <span class=\"comment\">// 4. 创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用</span></span><br><span class=\"line\">        <span class=\"comment\">//     这里创建的是一个自定义的日志处理器，须传入实际的执行对象 userServiceImpl</span></span><br><span class=\"line\">        InvocationHandler logHandler = <span class=\"keyword\">new</span> LogHandler(userServiceImpl);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   5.根据上面提供的信息，创建代理对象 在这个过程中，</span></span><br><span class=\"line\"><span class=\"comment\">               a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码</span></span><br><span class=\"line\"><span class=\"comment\">               b.然后根据相应的字节码转换成对应的class，</span></span><br><span class=\"line\"><span class=\"comment\">               c.然后调用newInstance()创建代理实例</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">        UserService proxy = (UserService) Proxy.newProxyInstance(classLoader, interfaces, logHandler);</span><br><span class=\"line\">        <span class=\"comment\">// 调用代理的方法</span></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">38</span>:<span class=\"number\">31</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">查询 selectById</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">38</span>:<span class=\"number\">31</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">38</span>:<span class=\"number\">31</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">更新 update</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">38</span>:<span class=\"number\">31</span> CST <span class=\"number\">2020</span>]</span><br></pre></td></tr></table></figure>\n\n<p>InvocationHandler 和 Proxy 的主要方法介绍如下：</p>\n<ul>\n<li>java.lang.reflect.InvocationHandler<br><code>Object invoke(Object proxy, Method method, Object[] args)</code> 定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用</li>\n</ul>\n<ul>\n<li>java.lang.reflect.Proxy<br><code>static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code> 构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的 invoke 方法</li>\n</ul>\n<ol start=\"2\">\n<li>cglib动态代理</li>\n</ol>\n<p>maven引入CGLIB包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意，从<code>Spring 3.2</code>开始， 不需要定义cglib依赖关系它已经被重新打包并直接集成在 <code>spring-core</code> 这个jar包中。</li>\n</ul>\n<p>编写一个UserDao类，它没有接口，只有两个方法，select() 和 update()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"UserDao 查询 selectById\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"UserDao 更新 update\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写一个 LogInterceptor ，继承了 MethodInterceptor，用于方法的拦截回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object 表示要进行增强的对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method 表示拦截的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> objects 数组表示参数列表，基本数据类型需要传入其包装类型，如int--&gt;Integer、long-Long、double--&gt;Double</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> methodProxy 表示对方法的代理，invokeSuper方法表示对被代理对象方法的调用</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 执行结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object object, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        Object result = methodProxy.invokeSuper(object, objects);   <span class=\"comment\">// 注意这里是调用 invokeSuper 而不是 invoke，否则死循环，methodProxy.invokesuper执行的是原始类的方法，method.invoke执行的是子类的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        LogInterceptor logInterceptor = <span class=\"keyword\">new</span> LogInterceptor();</span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(UserDao.class);   <span class=\"comment\">// 设置超类，cglib是通过继承来实现的</span></span><br><span class=\"line\">        enhancer.setCallback(logInterceptor);</span><br><span class=\"line\"></span><br><span class=\"line\">        UserDao proxy = (UserDao) enhancer.create();   <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">50</span>:<span class=\"number\">36</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">UserDao 查询 selectById</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">50</span>:<span class=\"number\">36</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">50</span>:<span class=\"number\">36</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">UserDao 更新 update</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">50</span>:<span class=\"number\">36</span> CST <span class=\"number\">2020</span>]</span><br></pre></td></tr></table></figure>\n\n<p>还可以进一步多个 MethodInterceptor 进行过滤筛选</p>\n<p>定义<code>LogInterceptor2</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogInterceptor2</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object object, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        Object result = methodProxy.invokeSuper(object, objects);</span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log2 start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log2 end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个回调过滤器，在cglib回调时可以设置对不同方法执行不同的回调逻辑，或者根本不执行回调。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaoFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">CallbackFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">accept</span><span class=\"params\">(Method method)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"select\"</span>.equals(method.getName())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;   <span class=\"comment\">// Callback 列表第1个拦截器 UserDao.select方法执行第一个拦截器</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;   <span class=\"comment\">// Callback 列表第2个拦截器，return 2 则为第3个，以此类推</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibTest2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        LogInterceptor logInterceptor = <span class=\"keyword\">new</span> LogInterceptor();</span><br><span class=\"line\">        LogInterceptor2 logInterceptor2 = <span class=\"keyword\">new</span> LogInterceptor2();</span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(UserDao.class);   <span class=\"comment\">// 设置超类，cglib是通过继承来实现的</span></span><br><span class=\"line\">        enhancer.setCallbacks(<span class=\"keyword\">new</span> Callback[]&#123;logInterceptor, logInterceptor2, NoOp.INSTANCE&#125;);   <span class=\"comment\">// 设置多个拦截器，NoOp.INSTANCE是一个空拦截器，不做任何处理</span></span><br><span class=\"line\">        enhancer.setCallbackFilter(<span class=\"keyword\">new</span> DaoFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        UserDao proxy = (UserDao) enhancer.create();   <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">54</span>:<span class=\"number\">18</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">UserDao 查询 selectById</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">54</span>:<span class=\"number\">18</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">log2 start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">54</span>:<span class=\"number\">18</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">UserDao 更新 update</span><br><span class=\"line\">log2 end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">54</span>:<span class=\"number\">18</span> CST <span class=\"number\">2020</span>]</span><br></pre></td></tr></table></figure>\n<p>可以看到</p>\n<ul>\n<li>select方法执行第一个拦截器，打印<code>log</code></li>\n<li>update方法执行第二个拦截器，打印<code>log2</code></li>\n</ul>\n<p>cglib 创建动态代理类的模式是：</p>\n<ol>\n<li>查找目标类上的所有非final 的public类型的方法定义；</li>\n<li>将这些方法的定义转换成字节码；</li>\n<li>将组成的字节码转换成相应的代理的class对象；</li>\n<li>实现 MethodInterceptor接口，用来处理对代理类上所有方法的请求</li>\n</ol>\n<p>jdk动态代理与cglib动态代理对比:</p>\n<ul>\n<li>jdk动态代理：基于Java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象。</li>\n<li>cglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。</li>\n</ul>\n<p>jdk动态代理的优势：</p>\n<ol>\n<li>最小化依赖关系，减少依赖意味着简化开发和维护，JDK 本身的支持，可能比 cglib 更加可靠。</li>\n<li>平滑进行 JDK 版本升级，而字节码类库通常需要进行更新以保证在新版 Java 上能够使用。</li>\n<li>代码实现简单。</li>\n</ol>\n<p>cglib动态代理的优势：</p>\n<ol>\n<li>无需实现接口，达到代理类无侵入</li>\n<li>只操作我们关心的类，而不必为其他相关类增加工作量。</li>\n<li>高性能</li>\n</ol>\n<p>另外：</p>\n<ul>\n<li>Spring5 之前的版本 AOP 在默认情况下是使用 jdk 动态代理的，之后的版本默认使用 jdk 动态代理，如果对象没有实现接口，则使用 cglib 代理。</li>\n<li>在 SpringBoot 1.5.x 版本中，默认还是使用 jdk 动态代理的。</li>\n<li>SpringBoot 2.x 为何默认使用 cglib</li>\n</ul>\n<p>SpringBoot 2.x 版本为什么要默认使用 Cglib 来实现 AOP 呢？这么做的好处又是什么呢？</p>\n<p>假设，我们有一个UserServiceImpl和UserService类，此时需要在UserContoller中使用UserService。在 Spring 中通常都习惯这样写代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">UserService userService;</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，无论是使用 jdk 动态代理，还是 cglib 都不会出现问题。</p>\n<p>但是，如果你的代码是这样的呢：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">UserServiceImpl userService;</span><br></pre></td></tr></table></figure>\n\n<p>这个时候，如果我们是使用 JDK 动态代理，那在启动时就会报错：</p>\n<p>因为 JDK 动态代理是基于接口的，代理生成的对象只能赋值给接口变量。<br>而 CGLIB 就不存在这个问题。因为 CGLIB 是通过生成子类来实现的，代理对象无论是赋值给接口还是实现类这两者都是代理对象的父类。<br>SpringBoot 正是出于这种考虑，于是在 2.x 版本中，将 AOP 默认实现改为了 CGLIB。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>代理模式的含义是，给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。代理模式是一种结构型设计模式。</p>\n<p>代理模式角色分为 3 种：</p>\n<p>Subject（抽象主题角色）：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；</p>\n<p>RealSubject（真实主题角色）：真正实现业务逻辑的类；</p>\n<p>Proxy（代理主题角色）：用来代理和封装真实主题；</p>\n<p>先来看看静态代理</p>\n<p>编写一个接口（抽象主题角色）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span></span>;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后编写该接口的实现类（真实主题角色）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"查询 selectById\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"更新 update\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写一个代理类 UserServiceProxy（代理主题角色），代理类需要实现<code>UserService</code>，对<code>UserServiceImpl</code>进行功能一些增强</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService target; <span class=\"comment\">// 被代理的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserServiceProxy</span><span class=\"params\">(UserService target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        target.select();    <span class=\"comment\">// 这里才实际调用真实主题角色的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        target.update();    <span class=\"comment\">// 这里才实际调用真实主题角色的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;     <span class=\"comment\">// 在执行方法之前执行</span></span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;      <span class=\"comment\">// 在执行方法之后执行</span></span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后测试一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        UserService userServiceImpl = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">        UserService proxy = <span class=\"keyword\">new</span> UserServiceProxy(userServiceImpl);<span class=\"comment\">//传入需要被代理的角色</span></span><br><span class=\"line\"></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">27</span>:<span class=\"number\">28</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">查询 selectById</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">27</span>:<span class=\"number\">28</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">27</span>:<span class=\"number\">28</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">更新 update</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">27</span>:<span class=\"number\">28</span> CST <span class=\"number\">2020</span>]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，我们通过代理类对<code>userServiceImpl</code>的两个方法进行了增强，在方法执行前后打印了一些日志。</p>\n<p>大家可能会想到，Spring中AOP功能，也可以在一些方法执行前后打印一些日志，做一些操作。其实这也是用了代理模式，但是SpringAOP中用的并不是上述的简单的静态代理，而是使用的动态代理，jdk动态代理，或者cglib动态代理。</p>\n<p>静态代理有一些优缺点我们来看一下：</p>\n<ul>\n<li>静态代理优点</li>\n</ul>\n<ol>\n<li>达到了功能增强的目的，而且没有侵入原代码</li>\n</ol>\n<ul>\n<li>静态代理缺点</li>\n</ul>\n<ol>\n<li>当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：<br>只维护一个代理类，由这个代理类实现多个接口，但是这样就导致代理类过于庞大<br>新建多个代理类，每个目标对象对应一个代理类，但是这样会产生过多的代理类</li>\n<li>当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，不易维护。</li>\n</ol>\n<p>一句话总结缺点，不够灵活简便。</p>\n<p>那么来看看动态代理</p>\n<ol>\n<li>jdk动态代理</li>\n</ol>\n<p>jdk动态代理主要涉及两个类：<code>java.lang.reflect.Proxy</code> 和 <code>java.lang.reflect.InvocationHandler</code>，一看到<code>reflect</code>包，应该就能想到动态代理利用看Java的反射特性。</p>\n<p>我们还编写一个代理类，实现上述静态代理中打印日志的功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    Object target;  <span class=\"comment\">// 被代理的对象，实际的方法执行者</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LogHandler</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        Object result = method.invoke(target, args);  <span class=\"comment\">// 调用 target 的 method 方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  <span class=\"comment\">// 返回方法的执行结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用invoke方法之前执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用invoke方法之后执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写一个主类来测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 创建被代理的对象，UserService接口的实现类</span></span><br><span class=\"line\">        UserServiceImpl userServiceImpl = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">        <span class=\"comment\">// 2. 获取对应的 ClassLoader</span></span><br><span class=\"line\">        ClassLoader classLoader = userServiceImpl.getClass().getClassLoader();</span><br><span class=\"line\">        <span class=\"comment\">// 3. 获取所有接口的Class，这里的UserServiceImpl只实现了一个接口UserService，</span></span><br><span class=\"line\">        Class[] interfaces = userServiceImpl.getClass().getInterfaces();</span><br><span class=\"line\">        <span class=\"comment\">// 4. 创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用</span></span><br><span class=\"line\">        <span class=\"comment\">//     这里创建的是一个自定义的日志处理器，须传入实际的执行对象 userServiceImpl</span></span><br><span class=\"line\">        InvocationHandler logHandler = <span class=\"keyword\">new</span> LogHandler(userServiceImpl);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   5.根据上面提供的信息，创建代理对象 在这个过程中，</span></span><br><span class=\"line\"><span class=\"comment\">               a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码</span></span><br><span class=\"line\"><span class=\"comment\">               b.然后根据相应的字节码转换成对应的class，</span></span><br><span class=\"line\"><span class=\"comment\">               c.然后调用newInstance()创建代理实例</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">        UserService proxy = (UserService) Proxy.newProxyInstance(classLoader, interfaces, logHandler);</span><br><span class=\"line\">        <span class=\"comment\">// 调用代理的方法</span></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">38</span>:<span class=\"number\">31</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">查询 selectById</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">38</span>:<span class=\"number\">31</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">38</span>:<span class=\"number\">31</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">更新 update</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">38</span>:<span class=\"number\">31</span> CST <span class=\"number\">2020</span>]</span><br></pre></td></tr></table></figure>\n\n<p>InvocationHandler 和 Proxy 的主要方法介绍如下：</p>\n<ul>\n<li>java.lang.reflect.InvocationHandler<br><code>Object invoke(Object proxy, Method method, Object[] args)</code> 定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用</li>\n</ul>\n<ul>\n<li>java.lang.reflect.Proxy<br><code>static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code> 构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的 invoke 方法</li>\n</ul>\n<ol start=\"2\">\n<li>cglib动态代理</li>\n</ol>\n<p>maven引入CGLIB包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意，从<code>Spring 3.2</code>开始， 不需要定义cglib依赖关系它已经被重新打包并直接集成在 <code>spring-core</code> 这个jar包中。</li>\n</ul>\n<p>编写一个UserDao类，它没有接口，只有两个方法，select() 和 update()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"UserDao 查询 selectById\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"UserDao 更新 update\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写一个 LogInterceptor ，继承了 MethodInterceptor，用于方法的拦截回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object 表示要进行增强的对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method 表示拦截的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> objects 数组表示参数列表，基本数据类型需要传入其包装类型，如int--&gt;Integer、long-Long、double--&gt;Double</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> methodProxy 表示对方法的代理，invokeSuper方法表示对被代理对象方法的调用</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 执行结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object object, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        Object result = methodProxy.invokeSuper(object, objects);   <span class=\"comment\">// 注意这里是调用 invokeSuper 而不是 invoke，否则死循环，methodProxy.invokesuper执行的是原始类的方法，method.invoke执行的是子类的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        LogInterceptor logInterceptor = <span class=\"keyword\">new</span> LogInterceptor();</span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(UserDao.class);   <span class=\"comment\">// 设置超类，cglib是通过继承来实现的</span></span><br><span class=\"line\">        enhancer.setCallback(logInterceptor);</span><br><span class=\"line\"></span><br><span class=\"line\">        UserDao proxy = (UserDao) enhancer.create();   <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">50</span>:<span class=\"number\">36</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">UserDao 查询 selectById</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">50</span>:<span class=\"number\">36</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">50</span>:<span class=\"number\">36</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">UserDao 更新 update</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">50</span>:<span class=\"number\">36</span> CST <span class=\"number\">2020</span>]</span><br></pre></td></tr></table></figure>\n\n<p>还可以进一步多个 MethodInterceptor 进行过滤筛选</p>\n<p>定义<code>LogInterceptor2</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogInterceptor2</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object object, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        Object result = methodProxy.invokeSuper(object, objects);</span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log2 start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log2 end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个回调过滤器，在cglib回调时可以设置对不同方法执行不同的回调逻辑，或者根本不执行回调。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaoFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">CallbackFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">accept</span><span class=\"params\">(Method method)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"select\"</span>.equals(method.getName())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;   <span class=\"comment\">// Callback 列表第1个拦截器 UserDao.select方法执行第一个拦截器</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;   <span class=\"comment\">// Callback 列表第2个拦截器，return 2 则为第3个，以此类推</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibTest2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        LogInterceptor logInterceptor = <span class=\"keyword\">new</span> LogInterceptor();</span><br><span class=\"line\">        LogInterceptor2 logInterceptor2 = <span class=\"keyword\">new</span> LogInterceptor2();</span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(UserDao.class);   <span class=\"comment\">// 设置超类，cglib是通过继承来实现的</span></span><br><span class=\"line\">        enhancer.setCallbacks(<span class=\"keyword\">new</span> Callback[]&#123;logInterceptor, logInterceptor2, NoOp.INSTANCE&#125;);   <span class=\"comment\">// 设置多个拦截器，NoOp.INSTANCE是一个空拦截器，不做任何处理</span></span><br><span class=\"line\">        enhancer.setCallbackFilter(<span class=\"keyword\">new</span> DaoFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        UserDao proxy = (UserDao) enhancer.create();   <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">54</span>:<span class=\"number\">18</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">UserDao 查询 selectById</span><br><span class=\"line\">log end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">54</span>:<span class=\"number\">18</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">log2 start time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">54</span>:<span class=\"number\">18</span> CST <span class=\"number\">2020</span>] </span><br><span class=\"line\">UserDao 更新 update</span><br><span class=\"line\">log2 end time [Fri May <span class=\"number\">15</span> <span class=\"number\">10</span>:<span class=\"number\">54</span>:<span class=\"number\">18</span> CST <span class=\"number\">2020</span>]</span><br></pre></td></tr></table></figure>\n<p>可以看到</p>\n<ul>\n<li>select方法执行第一个拦截器，打印<code>log</code></li>\n<li>update方法执行第二个拦截器，打印<code>log2</code></li>\n</ul>\n<p>cglib 创建动态代理类的模式是：</p>\n<ol>\n<li>查找目标类上的所有非final 的public类型的方法定义；</li>\n<li>将这些方法的定义转换成字节码；</li>\n<li>将组成的字节码转换成相应的代理的class对象；</li>\n<li>实现 MethodInterceptor接口，用来处理对代理类上所有方法的请求</li>\n</ol>\n<p>jdk动态代理与cglib动态代理对比:</p>\n<ul>\n<li>jdk动态代理：基于Java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象。</li>\n<li>cglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。</li>\n</ul>\n<p>jdk动态代理的优势：</p>\n<ol>\n<li>最小化依赖关系，减少依赖意味着简化开发和维护，JDK 本身的支持，可能比 cglib 更加可靠。</li>\n<li>平滑进行 JDK 版本升级，而字节码类库通常需要进行更新以保证在新版 Java 上能够使用。</li>\n<li>代码实现简单。</li>\n</ol>\n<p>cglib动态代理的优势：</p>\n<ol>\n<li>无需实现接口，达到代理类无侵入</li>\n<li>只操作我们关心的类，而不必为其他相关类增加工作量。</li>\n<li>高性能</li>\n</ol>\n<p>另外：</p>\n<ul>\n<li>Spring5 之前的版本 AOP 在默认情况下是使用 jdk 动态代理的，之后的版本默认使用 jdk 动态代理，如果对象没有实现接口，则使用 cglib 代理。</li>\n<li>在 SpringBoot 1.5.x 版本中，默认还是使用 jdk 动态代理的。</li>\n<li>SpringBoot 2.x 为何默认使用 cglib</li>\n</ul>\n<p>SpringBoot 2.x 版本为什么要默认使用 Cglib 来实现 AOP 呢？这么做的好处又是什么呢？</p>\n<p>假设，我们有一个UserServiceImpl和UserService类，此时需要在UserContoller中使用UserService。在 Spring 中通常都习惯这样写代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">UserService userService;</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，无论是使用 jdk 动态代理，还是 cglib 都不会出现问题。</p>\n<p>但是，如果你的代码是这样的呢：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">UserServiceImpl userService;</span><br></pre></td></tr></table></figure>\n\n<p>这个时候，如果我们是使用 JDK 动态代理，那在启动时就会报错：</p>\n<p>因为 JDK 动态代理是基于接口的，代理生成的对象只能赋值给接口变量。<br>而 CGLIB 就不存在这个问题。因为 CGLIB 是通过生成子类来实现的，代理对象无论是赋值给接口还是实现类这两者都是代理对象的父类。<br>SpringBoot 正是出于这种考虑，于是在 2.x 版本中，将 AOP 默认实现改为了 CGLIB。</p>\n"},{"title":"Java如何快速读取大文件","date":"2020-05-20T02:16:47.000Z","_content":"\n最近看到一种快速读取大文件的方法，记录一下，与平时常用的方法做一下对比。\n\n1. 普通输入流\n\n```java\n/**\n    * 普通输入流\n    * @param filename\n    */\npublic static void inputStream(Path filename) {\n    try (InputStream is = Files.newInputStream(filename)) {\n        int c;\n        while((c = is.read()) != -1) {\n\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n2. 带缓冲的输入流\n\n```java\n/**\n    * 带缓冲的输入流\n    * @param filename\n    */\npublic static void bufferedInputStream(Path filename) {\n    try (InputStream is = new BufferedInputStream(Files.newInputStream(filename))) {\n        int c;\n        while((c = is.read()) != -1) {\n\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n3. 随机访问文件\n\n```java\n/**\n    * 随机访问文件\n    * @param filename\n    */\npublic static void randomAccessFile(Path filename) {\n    try (RandomAccessFile randomAccessFile  = new RandomAccessFile(filename.toFile(), \"r\")) {\n        for (long i = 0; i < randomAccessFile.length(); i++) {\n            randomAccessFile.seek(i);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n4. 内存映射文件\n\n```java\n/**\n    * 内存映射文件\n    * @param filename\n    */\npublic static void mappedFile(Path filename) {\n    try (FileChannel fileChannel = FileChannel.open(filename)) {\n        long size = fileChannel.size();\n        MappedByteBuffer mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, size);\n        for (int i = 0; i < size; i++) {\n            mappedByteBuffer.get(i);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n5. 测试主类 \n\n```java\npublic class IOTest {\n    public static void main(String[] args) {\n        //测试文件大小为987.2M\n        long start = System.currentTimeMillis();\n        //bufferedInputStream(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\"));//22038\n        //inputStream(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\")); //龟速，没有耐心等出结果\n        //randomAccessFile(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\"));//龟速，没有耐心等出结果\n        mappedFile(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\"));//816\n        long end = System.currentTimeMillis();\n        System.out.println(end-start);\n\n    }   \n}\n\n```\n\n可以看到，内存映射文件的方式比传统方式快了N倍，这就是Java NIO的威力。\n\n- 简单介绍一下内存映射文件：\n\n所谓内存映射文件，就是将文件映射到内存，文件对应于内存中的一个字节数组，对文件的操作变为对这个字节数组的操作，而字节数组的操作直接映射到文件上。这种映射可以是映射文件全部区域，也可以是只映射一部分区域。\n\n不过，这种映射是操作系统提供的一种假象，文件一般不会马上加载到内存，操作系统只是记录下了这回事，当实际发生读写时，才会按需加载。操作系统一般是按页加载的，页可以理解为就是一块，页的大小与操作系统和硬件相关，典型的配置可能是4K, 8K等，当操作系统发现读写区域不在内存时，就会加载该区域对应的一个页到内存。\n\n这种按需加载的方式，使得内存映射文件可以方便处理非常大的文件，内存放不下整个文件也不要紧，操作系统会自动进行处理，将需要的内容读到内存，将修改的内容保存到硬盘，将不再使用的内存释放。\n\n在应用程序写的时候，它写的是内存中的字节数组，这个内容什么时候同步到文件上呢？这个时机是不确定的，由操作系统决定，不过，只要操作系统不崩溃，操作系统会保证同步到文件上，即使映射这个文件的应用程序已经退出了。\n\n在一般的文件读写中，会有两次数据拷贝，一次是从硬盘拷贝到操作系统内核，另一次是从操作系统内核拷贝到用户态的应用程序。而在内存映射文件中，一般情况下，只有一次拷贝，且内存分配在操作系统内核，应用程序访问的就是操作系统的内核内存空间，这显然要比普通的读写效率更高。\n\n内存映射文件的另一个重要特点是，它可以被多个不同的应用程序共享，多个程序可以映射同一个文件，映射到同一块内存区域，一个程序对内存的修改，可以让其他程序也看到，这使得它特别适合用于不同应用程序之间的通信。\n\n操作系统自身在加载可执行文件的时候，一般都利用了内存映射文件，比如：\n\n1. 按需加载代码，只有当前运行的代码在内存，其他暂时用不到的代码还在硬盘\n2. 同时启动多次同一个可执行文件，文件代码在内存也只有一份\n3. 不同应用程序共享的动态链接库代码在内存也只有一份 \n4. 内存映射文件也有局限性，比如，它不太适合处理小文件，它是按页分配内存的，对于小文件，会浪费空间，另外，映射文件要消耗一定的操作系统资源，初始化比较慢。\n\n简单总结下，对于一般的文件读写不需要使用内存映射文件，但如果处理的是大文件，要求极高的读写效率，比如数据库系统，或者需要在不同程序间进行共享和通信，那就可以考虑内存映射文件。","source":"_posts/Java如何快速读取大文件.md","raw":"---\ntitle: Java如何快速读取大文件\ndate: 2020-05-20 10:16:47\ntags: [大文件,NIO,Java]\n---\n\n最近看到一种快速读取大文件的方法，记录一下，与平时常用的方法做一下对比。\n\n1. 普通输入流\n\n```java\n/**\n    * 普通输入流\n    * @param filename\n    */\npublic static void inputStream(Path filename) {\n    try (InputStream is = Files.newInputStream(filename)) {\n        int c;\n        while((c = is.read()) != -1) {\n\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n2. 带缓冲的输入流\n\n```java\n/**\n    * 带缓冲的输入流\n    * @param filename\n    */\npublic static void bufferedInputStream(Path filename) {\n    try (InputStream is = new BufferedInputStream(Files.newInputStream(filename))) {\n        int c;\n        while((c = is.read()) != -1) {\n\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n3. 随机访问文件\n\n```java\n/**\n    * 随机访问文件\n    * @param filename\n    */\npublic static void randomAccessFile(Path filename) {\n    try (RandomAccessFile randomAccessFile  = new RandomAccessFile(filename.toFile(), \"r\")) {\n        for (long i = 0; i < randomAccessFile.length(); i++) {\n            randomAccessFile.seek(i);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n4. 内存映射文件\n\n```java\n/**\n    * 内存映射文件\n    * @param filename\n    */\npublic static void mappedFile(Path filename) {\n    try (FileChannel fileChannel = FileChannel.open(filename)) {\n        long size = fileChannel.size();\n        MappedByteBuffer mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, size);\n        for (int i = 0; i < size; i++) {\n            mappedByteBuffer.get(i);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n5. 测试主类 \n\n```java\npublic class IOTest {\n    public static void main(String[] args) {\n        //测试文件大小为987.2M\n        long start = System.currentTimeMillis();\n        //bufferedInputStream(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\"));//22038\n        //inputStream(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\")); //龟速，没有耐心等出结果\n        //randomAccessFile(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\"));//龟速，没有耐心等出结果\n        mappedFile(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\"));//816\n        long end = System.currentTimeMillis();\n        System.out.println(end-start);\n\n    }   \n}\n\n```\n\n可以看到，内存映射文件的方式比传统方式快了N倍，这就是Java NIO的威力。\n\n- 简单介绍一下内存映射文件：\n\n所谓内存映射文件，就是将文件映射到内存，文件对应于内存中的一个字节数组，对文件的操作变为对这个字节数组的操作，而字节数组的操作直接映射到文件上。这种映射可以是映射文件全部区域，也可以是只映射一部分区域。\n\n不过，这种映射是操作系统提供的一种假象，文件一般不会马上加载到内存，操作系统只是记录下了这回事，当实际发生读写时，才会按需加载。操作系统一般是按页加载的，页可以理解为就是一块，页的大小与操作系统和硬件相关，典型的配置可能是4K, 8K等，当操作系统发现读写区域不在内存时，就会加载该区域对应的一个页到内存。\n\n这种按需加载的方式，使得内存映射文件可以方便处理非常大的文件，内存放不下整个文件也不要紧，操作系统会自动进行处理，将需要的内容读到内存，将修改的内容保存到硬盘，将不再使用的内存释放。\n\n在应用程序写的时候，它写的是内存中的字节数组，这个内容什么时候同步到文件上呢？这个时机是不确定的，由操作系统决定，不过，只要操作系统不崩溃，操作系统会保证同步到文件上，即使映射这个文件的应用程序已经退出了。\n\n在一般的文件读写中，会有两次数据拷贝，一次是从硬盘拷贝到操作系统内核，另一次是从操作系统内核拷贝到用户态的应用程序。而在内存映射文件中，一般情况下，只有一次拷贝，且内存分配在操作系统内核，应用程序访问的就是操作系统的内核内存空间，这显然要比普通的读写效率更高。\n\n内存映射文件的另一个重要特点是，它可以被多个不同的应用程序共享，多个程序可以映射同一个文件，映射到同一块内存区域，一个程序对内存的修改，可以让其他程序也看到，这使得它特别适合用于不同应用程序之间的通信。\n\n操作系统自身在加载可执行文件的时候，一般都利用了内存映射文件，比如：\n\n1. 按需加载代码，只有当前运行的代码在内存，其他暂时用不到的代码还在硬盘\n2. 同时启动多次同一个可执行文件，文件代码在内存也只有一份\n3. 不同应用程序共享的动态链接库代码在内存也只有一份 \n4. 内存映射文件也有局限性，比如，它不太适合处理小文件，它是按页分配内存的，对于小文件，会浪费空间，另外，映射文件要消耗一定的操作系统资源，初始化比较慢。\n\n简单总结下，对于一般的文件读写不需要使用内存映射文件，但如果处理的是大文件，要求极高的读写效率，比如数据库系统，或者需要在不同程序间进行共享和通信，那就可以考虑内存映射文件。","slug":"Java如何快速读取大文件","published":1,"updated":"2020-05-20T02:33:47.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaeqfrgo0000ylk311sb6snd","content":"<p>最近看到一种快速读取大文件的方法，记录一下，与平时常用的方法做一下对比。</p>\n<ol>\n<li>普通输入流</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 普通输入流</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> filename</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">inputStream</span><span class=\"params\">(Path filename)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (InputStream is = Files.newInputStream(filename)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((c = is.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>带缓冲的输入流</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 带缓冲的输入流</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> filename</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bufferedInputStream</span><span class=\"params\">(Path filename)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (InputStream is = <span class=\"keyword\">new</span> BufferedInputStream(Files.newInputStream(filename))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((c = is.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>随机访问文件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 随机访问文件</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> filename</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">randomAccessFile</span><span class=\"params\">(Path filename)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (RandomAccessFile randomAccessFile  = <span class=\"keyword\">new</span> RandomAccessFile(filename.toFile(), <span class=\"string\">\"r\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = <span class=\"number\">0</span>; i &lt; randomAccessFile.length(); i++) &#123;</span><br><span class=\"line\">            randomAccessFile.seek(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>内存映射文件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 内存映射文件</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> filename</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mappedFile</span><span class=\"params\">(Path filename)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (FileChannel fileChannel = FileChannel.open(filename)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> size = fileChannel.size();</span><br><span class=\"line\">        MappedByteBuffer mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            mappedByteBuffer.get(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>测试主类 </li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//测试文件大小为987.2M</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">//bufferedInputStream(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\"));//22038</span></span><br><span class=\"line\">        <span class=\"comment\">//inputStream(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\")); //龟速，没有耐心等出结果</span></span><br><span class=\"line\">        <span class=\"comment\">//randomAccessFile(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\"));//龟速，没有耐心等出结果</span></span><br><span class=\"line\">        mappedFile(Paths.get(<span class=\"string\">\"/Users/constantine/Downloads/jisuzhuisha.mp4\"</span>));<span class=\"comment\">//816</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(end-start);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，内存映射文件的方式比传统方式快了N倍，这就是Java NIO的威力。</p>\n<ul>\n<li>简单介绍一下内存映射文件：</li>\n</ul>\n<p>所谓内存映射文件，就是将文件映射到内存，文件对应于内存中的一个字节数组，对文件的操作变为对这个字节数组的操作，而字节数组的操作直接映射到文件上。这种映射可以是映射文件全部区域，也可以是只映射一部分区域。</p>\n<p>不过，这种映射是操作系统提供的一种假象，文件一般不会马上加载到内存，操作系统只是记录下了这回事，当实际发生读写时，才会按需加载。操作系统一般是按页加载的，页可以理解为就是一块，页的大小与操作系统和硬件相关，典型的配置可能是4K, 8K等，当操作系统发现读写区域不在内存时，就会加载该区域对应的一个页到内存。</p>\n<p>这种按需加载的方式，使得内存映射文件可以方便处理非常大的文件，内存放不下整个文件也不要紧，操作系统会自动进行处理，将需要的内容读到内存，将修改的内容保存到硬盘，将不再使用的内存释放。</p>\n<p>在应用程序写的时候，它写的是内存中的字节数组，这个内容什么时候同步到文件上呢？这个时机是不确定的，由操作系统决定，不过，只要操作系统不崩溃，操作系统会保证同步到文件上，即使映射这个文件的应用程序已经退出了。</p>\n<p>在一般的文件读写中，会有两次数据拷贝，一次是从硬盘拷贝到操作系统内核，另一次是从操作系统内核拷贝到用户态的应用程序。而在内存映射文件中，一般情况下，只有一次拷贝，且内存分配在操作系统内核，应用程序访问的就是操作系统的内核内存空间，这显然要比普通的读写效率更高。</p>\n<p>内存映射文件的另一个重要特点是，它可以被多个不同的应用程序共享，多个程序可以映射同一个文件，映射到同一块内存区域，一个程序对内存的修改，可以让其他程序也看到，这使得它特别适合用于不同应用程序之间的通信。</p>\n<p>操作系统自身在加载可执行文件的时候，一般都利用了内存映射文件，比如：</p>\n<ol>\n<li>按需加载代码，只有当前运行的代码在内存，其他暂时用不到的代码还在硬盘</li>\n<li>同时启动多次同一个可执行文件，文件代码在内存也只有一份</li>\n<li>不同应用程序共享的动态链接库代码在内存也只有一份 </li>\n<li>内存映射文件也有局限性，比如，它不太适合处理小文件，它是按页分配内存的，对于小文件，会浪费空间，另外，映射文件要消耗一定的操作系统资源，初始化比较慢。</li>\n</ol>\n<p>简单总结下，对于一般的文件读写不需要使用内存映射文件，但如果处理的是大文件，要求极高的读写效率，比如数据库系统，或者需要在不同程序间进行共享和通信，那就可以考虑内存映射文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近看到一种快速读取大文件的方法，记录一下，与平时常用的方法做一下对比。</p>\n<ol>\n<li>普通输入流</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 普通输入流</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> filename</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">inputStream</span><span class=\"params\">(Path filename)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (InputStream is = Files.newInputStream(filename)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((c = is.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>带缓冲的输入流</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 带缓冲的输入流</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> filename</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bufferedInputStream</span><span class=\"params\">(Path filename)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (InputStream is = <span class=\"keyword\">new</span> BufferedInputStream(Files.newInputStream(filename))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((c = is.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>随机访问文件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 随机访问文件</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> filename</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">randomAccessFile</span><span class=\"params\">(Path filename)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (RandomAccessFile randomAccessFile  = <span class=\"keyword\">new</span> RandomAccessFile(filename.toFile(), <span class=\"string\">\"r\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = <span class=\"number\">0</span>; i &lt; randomAccessFile.length(); i++) &#123;</span><br><span class=\"line\">            randomAccessFile.seek(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>内存映射文件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 内存映射文件</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> filename</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mappedFile</span><span class=\"params\">(Path filename)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (FileChannel fileChannel = FileChannel.open(filename)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> size = fileChannel.size();</span><br><span class=\"line\">        MappedByteBuffer mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            mappedByteBuffer.get(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>测试主类 </li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//测试文件大小为987.2M</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">//bufferedInputStream(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\"));//22038</span></span><br><span class=\"line\">        <span class=\"comment\">//inputStream(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\")); //龟速，没有耐心等出结果</span></span><br><span class=\"line\">        <span class=\"comment\">//randomAccessFile(Paths.get(\"/Users/constantine/Downloads/jisuzhuisha.mp4\"));//龟速，没有耐心等出结果</span></span><br><span class=\"line\">        mappedFile(Paths.get(<span class=\"string\">\"/Users/constantine/Downloads/jisuzhuisha.mp4\"</span>));<span class=\"comment\">//816</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(end-start);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，内存映射文件的方式比传统方式快了N倍，这就是Java NIO的威力。</p>\n<ul>\n<li>简单介绍一下内存映射文件：</li>\n</ul>\n<p>所谓内存映射文件，就是将文件映射到内存，文件对应于内存中的一个字节数组，对文件的操作变为对这个字节数组的操作，而字节数组的操作直接映射到文件上。这种映射可以是映射文件全部区域，也可以是只映射一部分区域。</p>\n<p>不过，这种映射是操作系统提供的一种假象，文件一般不会马上加载到内存，操作系统只是记录下了这回事，当实际发生读写时，才会按需加载。操作系统一般是按页加载的，页可以理解为就是一块，页的大小与操作系统和硬件相关，典型的配置可能是4K, 8K等，当操作系统发现读写区域不在内存时，就会加载该区域对应的一个页到内存。</p>\n<p>这种按需加载的方式，使得内存映射文件可以方便处理非常大的文件，内存放不下整个文件也不要紧，操作系统会自动进行处理，将需要的内容读到内存，将修改的内容保存到硬盘，将不再使用的内存释放。</p>\n<p>在应用程序写的时候，它写的是内存中的字节数组，这个内容什么时候同步到文件上呢？这个时机是不确定的，由操作系统决定，不过，只要操作系统不崩溃，操作系统会保证同步到文件上，即使映射这个文件的应用程序已经退出了。</p>\n<p>在一般的文件读写中，会有两次数据拷贝，一次是从硬盘拷贝到操作系统内核，另一次是从操作系统内核拷贝到用户态的应用程序。而在内存映射文件中，一般情况下，只有一次拷贝，且内存分配在操作系统内核，应用程序访问的就是操作系统的内核内存空间，这显然要比普通的读写效率更高。</p>\n<p>内存映射文件的另一个重要特点是，它可以被多个不同的应用程序共享，多个程序可以映射同一个文件，映射到同一块内存区域，一个程序对内存的修改，可以让其他程序也看到，这使得它特别适合用于不同应用程序之间的通信。</p>\n<p>操作系统自身在加载可执行文件的时候，一般都利用了内存映射文件，比如：</p>\n<ol>\n<li>按需加载代码，只有当前运行的代码在内存，其他暂时用不到的代码还在硬盘</li>\n<li>同时启动多次同一个可执行文件，文件代码在内存也只有一份</li>\n<li>不同应用程序共享的动态链接库代码在内存也只有一份 </li>\n<li>内存映射文件也有局限性，比如，它不太适合处理小文件，它是按页分配内存的，对于小文件，会浪费空间，另外，映射文件要消耗一定的操作系统资源，初始化比较慢。</li>\n</ol>\n<p>简单总结下，对于一般的文件读写不需要使用内存映射文件，但如果处理的是大文件，要求极高的读写效率，比如数据库系统，或者需要在不同程序间进行共享和通信，那就可以考虑内存映射文件。</p>\n"},{"title":"动态规划简述","date":"2020-05-25T10:58:51.000Z","_content":"\n最近总是碰到动态规划的问题，简单记录一下。\n\n动态规划其实就是重叠子问题，将一个问题分解为若干个小问题求解的一种方式。就是先解决子问题，然后逐步解决原来的大问题。\n\n举例来说明：\n\n1. 斐波那契数列\n\n之前的文章有讲递归求解斐波那契数列，今天看一看动态规划怎么求解。\n\n我们知道，斐波那契数列的每一个数，都是它之前两个数的和，也就是只和它之前的两个数有关系，假设斐波那契数列的第一个数我们定义为`f(1)`，第n个数定义为`f(n)`。\n\n我们写一下这个问题的状态转移方程，然后找一下问题的递归出口，然后就可以按照这个方程来编写代码了。\n\n```\nf(n) = 1                n=1 or n=2 \nf(n) = f(n-1) + f(n-2)  n > 2\n```\n\n代码如下：\n\n```java\npublic static int fib(int n){\n    int [] dp = new int[n+1]; //定义一个数组，用来记录小问题求解的每一步结果，为了方便，dp[0]不存放数据\n\n    // 按照状态转移方程来编写的代码\n    if(n == 1 || n == 2){\n        return 1;\n    }\n\n    dp[1] = 1;\n    dp[2] = 1;\n    for(int i = 3; i < n+1; i++){\n        dp[i] = dp[i-1] + dp[i-2]; //状态转移方程\n    }\n    return dp[n];\n}\n```\n\n2. 台阶问题\n\n有一座高度是n级台阶的楼梯，从下往上走，每跨一步只能向上1级或者2级台阶。要求用程序来求出一共有多少种走法。\n\n我们假设f(n)代表走到第n级台阶一共的走法，根据题目描述我们知道，一次只能走一级或者两级，我们直接看走到第n级台阶，这一步可能是从第n-1级台阶走了一级上去的，也可能是从第n-2级台阶走了两级上去的。这个问题就可以转换成来求解f(n-1)和f(n-2)。我们写一下这个问题的状态转移方程：\n\n```\nf(n) = f(n-1) + f(n-2)  n > 2\nf(n) = 1                n = 1\nf(n) = 2                n = 2\n```\n\n同样，有状态转移方程，也知道了递归出口，这个问题也可以用递归的方式来实现\n\n```java\npublic static int climb(int n) {\n    if (n < 1) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    return climb(n - 1) + climb(n - 2); //状态转移方程\n\n}\n```\n\n讲递归的时候，我们已经知道，递归的性能不好，函数堆栈比较深，时间复杂度很高，我们可以使用动态规划的另一种方式，备忘录方式。\n\n```java\npublic static int climb2(int n) {\n    if (n < 1) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    int [] dp = new int[n+1]; //同样，定义一个数组，用来记录小问题求解的每一步结果，为了方便，dp[0]不存放数据\n    dp[1] = 1;\n    dp[2] = 2;\n    for(int i = 3; i < n+1; i++){\n        dp[i] = dp[i-1] + dp[i-2]; //状态转移方程\n    }\n    return dp[n];\n}\n```\n\n看完这两个简单的问题，相信大家对动态规划也有了一定的了解，其实就是分解问题，找问题的递归出口，推导状态转移方程，然后按照状态转移方程来编写代码就可以了。\n\n我们来看一个进阶一点的动态规划题目，下面是题目描述\n\n```\n有一排石碓，每碓石头的数量不一样，想办法石碓中拿到最多的石头，不能拿相邻的石头，例：\n\nnums : [1 4 9 34 2 3]= 41\nnums : [1 8 1 1 8 1]= 16\n\n```\n\n还是，来找递归出口以及状态转移方程\n\n假设f(6)的含义为，到数组下标为6，能拿到的最多的石头数，也就是到数组下标为6，此问题的最佳解决方案，f(5)代表到数组下标为5，最佳方案是什么。\n\n详细说明一下\n\n下标为6这个位置的数字，有两种方案，选&不选。\n\n假设我们在拿石头的时候选了下标为6的数字，那么方程就可以这么写\n\nf(6) = f(4) + arr[6]\n\n如果不选呢\n\nf(6) = f(5)\n\n那么f(6)的最佳方案就是max(f(4) + arr[6],f(5))\n\n来写一下状态转移方程\n\n```\nf(n) = f(n-2) + arr[n]  选n\nf(n) = f(n-1)       不选n\nf(0) = arr[0]\nf(1) = max(arr[0],arr[1])\n```\n\n- 递归求解\n\n```java\npublic static int RecOpt(int [] nums, int n){\n    if (n == 0){\n        return nums[0];\n    } else if (n == 1) {\n        return Math.max(nums[0],nums[1]);\n    } else {\n        //状态转移方程\n        int a = RecOpt(nums,n-2) + nums[n];\n        int b = RecOpt(nums,n-1);\n        return Math.max(a,b);\n    }\n}\n```\n\n- 备忘录求解\n\n```java\npublic static int DpOpt(int [] nums){\n\n    int [] opt = new int[nums.length];\n    opt[0] = nums[0];\n    opt[1] = Math.max(nums[0],nums[1]);\n\n    //状态转移方程\n    for(int i = 2;i<nums.length;i++){\n        int a = opt[i-2] + nums[i];\n        int b = opt[i-1];\n        opt[i] = Math.max(a,b);\n    }\n\n    return opt[nums.length - 1];\n}\n```","source":"_posts/动态规划简述.md","raw":"---\ntitle: 动态规划简述\ndate: 2020-05-25 18:58:51\ntags: [算法]\n---\n\n最近总是碰到动态规划的问题，简单记录一下。\n\n动态规划其实就是重叠子问题，将一个问题分解为若干个小问题求解的一种方式。就是先解决子问题，然后逐步解决原来的大问题。\n\n举例来说明：\n\n1. 斐波那契数列\n\n之前的文章有讲递归求解斐波那契数列，今天看一看动态规划怎么求解。\n\n我们知道，斐波那契数列的每一个数，都是它之前两个数的和，也就是只和它之前的两个数有关系，假设斐波那契数列的第一个数我们定义为`f(1)`，第n个数定义为`f(n)`。\n\n我们写一下这个问题的状态转移方程，然后找一下问题的递归出口，然后就可以按照这个方程来编写代码了。\n\n```\nf(n) = 1                n=1 or n=2 \nf(n) = f(n-1) + f(n-2)  n > 2\n```\n\n代码如下：\n\n```java\npublic static int fib(int n){\n    int [] dp = new int[n+1]; //定义一个数组，用来记录小问题求解的每一步结果，为了方便，dp[0]不存放数据\n\n    // 按照状态转移方程来编写的代码\n    if(n == 1 || n == 2){\n        return 1;\n    }\n\n    dp[1] = 1;\n    dp[2] = 1;\n    for(int i = 3; i < n+1; i++){\n        dp[i] = dp[i-1] + dp[i-2]; //状态转移方程\n    }\n    return dp[n];\n}\n```\n\n2. 台阶问题\n\n有一座高度是n级台阶的楼梯，从下往上走，每跨一步只能向上1级或者2级台阶。要求用程序来求出一共有多少种走法。\n\n我们假设f(n)代表走到第n级台阶一共的走法，根据题目描述我们知道，一次只能走一级或者两级，我们直接看走到第n级台阶，这一步可能是从第n-1级台阶走了一级上去的，也可能是从第n-2级台阶走了两级上去的。这个问题就可以转换成来求解f(n-1)和f(n-2)。我们写一下这个问题的状态转移方程：\n\n```\nf(n) = f(n-1) + f(n-2)  n > 2\nf(n) = 1                n = 1\nf(n) = 2                n = 2\n```\n\n同样，有状态转移方程，也知道了递归出口，这个问题也可以用递归的方式来实现\n\n```java\npublic static int climb(int n) {\n    if (n < 1) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    return climb(n - 1) + climb(n - 2); //状态转移方程\n\n}\n```\n\n讲递归的时候，我们已经知道，递归的性能不好，函数堆栈比较深，时间复杂度很高，我们可以使用动态规划的另一种方式，备忘录方式。\n\n```java\npublic static int climb2(int n) {\n    if (n < 1) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    int [] dp = new int[n+1]; //同样，定义一个数组，用来记录小问题求解的每一步结果，为了方便，dp[0]不存放数据\n    dp[1] = 1;\n    dp[2] = 2;\n    for(int i = 3; i < n+1; i++){\n        dp[i] = dp[i-1] + dp[i-2]; //状态转移方程\n    }\n    return dp[n];\n}\n```\n\n看完这两个简单的问题，相信大家对动态规划也有了一定的了解，其实就是分解问题，找问题的递归出口，推导状态转移方程，然后按照状态转移方程来编写代码就可以了。\n\n我们来看一个进阶一点的动态规划题目，下面是题目描述\n\n```\n有一排石碓，每碓石头的数量不一样，想办法石碓中拿到最多的石头，不能拿相邻的石头，例：\n\nnums : [1 4 9 34 2 3]= 41\nnums : [1 8 1 1 8 1]= 16\n\n```\n\n还是，来找递归出口以及状态转移方程\n\n假设f(6)的含义为，到数组下标为6，能拿到的最多的石头数，也就是到数组下标为6，此问题的最佳解决方案，f(5)代表到数组下标为5，最佳方案是什么。\n\n详细说明一下\n\n下标为6这个位置的数字，有两种方案，选&不选。\n\n假设我们在拿石头的时候选了下标为6的数字，那么方程就可以这么写\n\nf(6) = f(4) + arr[6]\n\n如果不选呢\n\nf(6) = f(5)\n\n那么f(6)的最佳方案就是max(f(4) + arr[6],f(5))\n\n来写一下状态转移方程\n\n```\nf(n) = f(n-2) + arr[n]  选n\nf(n) = f(n-1)       不选n\nf(0) = arr[0]\nf(1) = max(arr[0],arr[1])\n```\n\n- 递归求解\n\n```java\npublic static int RecOpt(int [] nums, int n){\n    if (n == 0){\n        return nums[0];\n    } else if (n == 1) {\n        return Math.max(nums[0],nums[1]);\n    } else {\n        //状态转移方程\n        int a = RecOpt(nums,n-2) + nums[n];\n        int b = RecOpt(nums,n-1);\n        return Math.max(a,b);\n    }\n}\n```\n\n- 备忘录求解\n\n```java\npublic static int DpOpt(int [] nums){\n\n    int [] opt = new int[nums.length];\n    opt[0] = nums[0];\n    opt[1] = Math.max(nums[0],nums[1]);\n\n    //状态转移方程\n    for(int i = 2;i<nums.length;i++){\n        int a = opt[i-2] + nums[i];\n        int b = opt[i-1];\n        opt[i] = Math.max(a,b);\n    }\n\n    return opt[nums.length - 1];\n}\n```","slug":"动态规划简述","published":1,"updated":"2020-05-25T11:56:37.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckamfqs1p0000dhk37dixflms","content":"<p>最近总是碰到动态规划的问题，简单记录一下。</p>\n<p>动态规划其实就是重叠子问题，将一个问题分解为若干个小问题求解的一种方式。就是先解决子问题，然后逐步解决原来的大问题。</p>\n<p>举例来说明：</p>\n<ol>\n<li>斐波那契数列</li>\n</ol>\n<p>之前的文章有讲递归求解斐波那契数列，今天看一看动态规划怎么求解。</p>\n<p>我们知道，斐波那契数列的每一个数，都是它之前两个数的和，也就是只和它之前的两个数有关系，假设斐波那契数列的第一个数我们定义为<code>f(1)</code>，第n个数定义为<code>f(n)</code>。</p>\n<p>我们写一下这个问题的状态转移方程，然后找一下问题的递归出口，然后就可以按照这个方程来编写代码了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(n) &#x3D; 1                n&#x3D;1 or n&#x3D;2 </span><br><span class=\"line\">f(n) &#x3D; f(n-1) + f(n-2)  n &gt; 2</span><br></pre></td></tr></table></figure>\n\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> [] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>]; <span class=\"comment\">//定义一个数组，用来记录小问题求解的每一步结果，为了方便，dp[0]不存放数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 按照状态转移方程来编写的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt; n+<span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        dp[i] = dp[i-<span class=\"number\">1</span>] + dp[i-<span class=\"number\">2</span>]; <span class=\"comment\">//状态转移方程</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>台阶问题</li>\n</ol>\n<p>有一座高度是n级台阶的楼梯，从下往上走，每跨一步只能向上1级或者2级台阶。要求用程序来求出一共有多少种走法。</p>\n<p>我们假设f(n)代表走到第n级台阶一共的走法，根据题目描述我们知道，一次只能走一级或者两级，我们直接看走到第n级台阶，这一步可能是从第n-1级台阶走了一级上去的，也可能是从第n-2级台阶走了两级上去的。这个问题就可以转换成来求解f(n-1)和f(n-2)。我们写一下这个问题的状态转移方程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(n) &#x3D; f(n-1) + f(n-2)  n &gt; 2</span><br><span class=\"line\">f(n) &#x3D; 1                n &#x3D; 1</span><br><span class=\"line\">f(n) &#x3D; 2                n &#x3D; 2</span><br></pre></td></tr></table></figure>\n\n<p>同样，有状态转移方程，也知道了递归出口，这个问题也可以用递归的方式来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">climb</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> climb(n - <span class=\"number\">1</span>) + climb(n - <span class=\"number\">2</span>); <span class=\"comment\">//状态转移方程</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>讲递归的时候，我们已经知道，递归的性能不好，函数堆栈比较深，时间复杂度很高，我们可以使用动态规划的另一种方式，备忘录方式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">climb2</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> [] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>]; <span class=\"comment\">//同样，定义一个数组，用来记录小问题求解的每一步结果，为了方便，dp[0]不存放数据</span></span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">2</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt; n+<span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        dp[i] = dp[i-<span class=\"number\">1</span>] + dp[i-<span class=\"number\">2</span>]; <span class=\"comment\">//状态转移方程</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看完这两个简单的问题，相信大家对动态规划也有了一定的了解，其实就是分解问题，找问题的递归出口，推导状态转移方程，然后按照状态转移方程来编写代码就可以了。</p>\n<p>我们来看一个进阶一点的动态规划题目，下面是题目描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有一排石碓，每碓石头的数量不一样，想办法石碓中拿到最多的石头，不能拿相邻的石头，例：</span><br><span class=\"line\"></span><br><span class=\"line\">nums : [1 4 9 34 2 3]&#x3D; 41</span><br><span class=\"line\">nums : [1 8 1 1 8 1]&#x3D; 16</span><br></pre></td></tr></table></figure>\n\n<p>还是，来找递归出口以及状态转移方程</p>\n<p>假设f(6)的含义为，到数组下标为6，能拿到的最多的石头数，也就是到数组下标为6，此问题的最佳解决方案，f(5)代表到数组下标为5，最佳方案是什么。</p>\n<p>详细说明一下</p>\n<p>下标为6这个位置的数字，有两种方案，选&amp;不选。</p>\n<p>假设我们在拿石头的时候选了下标为6的数字，那么方程就可以这么写</p>\n<p>f(6) = f(4) + arr[6]</p>\n<p>如果不选呢</p>\n<p>f(6) = f(5)</p>\n<p>那么f(6)的最佳方案就是max(f(4) + arr[6],f(5))</p>\n<p>来写一下状态转移方程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(n) &#x3D; f(n-2) + arr[n]  选n</span><br><span class=\"line\">f(n) &#x3D; f(n-1)       不选n</span><br><span class=\"line\">f(0) &#x3D; arr[0]</span><br><span class=\"line\">f(1) &#x3D; max(arr[0],arr[1])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>递归求解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">RecOpt</span><span class=\"params\">(<span class=\"keyword\">int</span> [] nums, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(nums[<span class=\"number\">0</span>],nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//状态转移方程</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = RecOpt(nums,n-<span class=\"number\">2</span>) + nums[n];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = RecOpt(nums,n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(a,b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>备忘录求解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">DpOpt</span><span class=\"params\">(<span class=\"keyword\">int</span> [] nums)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> [] opt = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    opt[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    opt[<span class=\"number\">1</span>] = Math.max(nums[<span class=\"number\">0</span>],nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//状态转移方程</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = opt[i-<span class=\"number\">2</span>] + nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = opt[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        opt[i] = Math.max(a,b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> opt[nums.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>最近总是碰到动态规划的问题，简单记录一下。</p>\n<p>动态规划其实就是重叠子问题，将一个问题分解为若干个小问题求解的一种方式。就是先解决子问题，然后逐步解决原来的大问题。</p>\n<p>举例来说明：</p>\n<ol>\n<li>斐波那契数列</li>\n</ol>\n<p>之前的文章有讲递归求解斐波那契数列，今天看一看动态规划怎么求解。</p>\n<p>我们知道，斐波那契数列的每一个数，都是它之前两个数的和，也就是只和它之前的两个数有关系，假设斐波那契数列的第一个数我们定义为<code>f(1)</code>，第n个数定义为<code>f(n)</code>。</p>\n<p>我们写一下这个问题的状态转移方程，然后找一下问题的递归出口，然后就可以按照这个方程来编写代码了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(n) &#x3D; 1                n&#x3D;1 or n&#x3D;2 </span><br><span class=\"line\">f(n) &#x3D; f(n-1) + f(n-2)  n &gt; 2</span><br></pre></td></tr></table></figure>\n\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> [] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>]; <span class=\"comment\">//定义一个数组，用来记录小问题求解的每一步结果，为了方便，dp[0]不存放数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 按照状态转移方程来编写的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt; n+<span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        dp[i] = dp[i-<span class=\"number\">1</span>] + dp[i-<span class=\"number\">2</span>]; <span class=\"comment\">//状态转移方程</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>台阶问题</li>\n</ol>\n<p>有一座高度是n级台阶的楼梯，从下往上走，每跨一步只能向上1级或者2级台阶。要求用程序来求出一共有多少种走法。</p>\n<p>我们假设f(n)代表走到第n级台阶一共的走法，根据题目描述我们知道，一次只能走一级或者两级，我们直接看走到第n级台阶，这一步可能是从第n-1级台阶走了一级上去的，也可能是从第n-2级台阶走了两级上去的。这个问题就可以转换成来求解f(n-1)和f(n-2)。我们写一下这个问题的状态转移方程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(n) &#x3D; f(n-1) + f(n-2)  n &gt; 2</span><br><span class=\"line\">f(n) &#x3D; 1                n &#x3D; 1</span><br><span class=\"line\">f(n) &#x3D; 2                n &#x3D; 2</span><br></pre></td></tr></table></figure>\n\n<p>同样，有状态转移方程，也知道了递归出口，这个问题也可以用递归的方式来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">climb</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> climb(n - <span class=\"number\">1</span>) + climb(n - <span class=\"number\">2</span>); <span class=\"comment\">//状态转移方程</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>讲递归的时候，我们已经知道，递归的性能不好，函数堆栈比较深，时间复杂度很高，我们可以使用动态规划的另一种方式，备忘录方式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">climb2</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> [] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>]; <span class=\"comment\">//同样，定义一个数组，用来记录小问题求解的每一步结果，为了方便，dp[0]不存放数据</span></span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">2</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt; n+<span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        dp[i] = dp[i-<span class=\"number\">1</span>] + dp[i-<span class=\"number\">2</span>]; <span class=\"comment\">//状态转移方程</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看完这两个简单的问题，相信大家对动态规划也有了一定的了解，其实就是分解问题，找问题的递归出口，推导状态转移方程，然后按照状态转移方程来编写代码就可以了。</p>\n<p>我们来看一个进阶一点的动态规划题目，下面是题目描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有一排石碓，每碓石头的数量不一样，想办法石碓中拿到最多的石头，不能拿相邻的石头，例：</span><br><span class=\"line\"></span><br><span class=\"line\">nums : [1 4 9 34 2 3]&#x3D; 41</span><br><span class=\"line\">nums : [1 8 1 1 8 1]&#x3D; 16</span><br></pre></td></tr></table></figure>\n\n<p>还是，来找递归出口以及状态转移方程</p>\n<p>假设f(6)的含义为，到数组下标为6，能拿到的最多的石头数，也就是到数组下标为6，此问题的最佳解决方案，f(5)代表到数组下标为5，最佳方案是什么。</p>\n<p>详细说明一下</p>\n<p>下标为6这个位置的数字，有两种方案，选&amp;不选。</p>\n<p>假设我们在拿石头的时候选了下标为6的数字，那么方程就可以这么写</p>\n<p>f(6) = f(4) + arr[6]</p>\n<p>如果不选呢</p>\n<p>f(6) = f(5)</p>\n<p>那么f(6)的最佳方案就是max(f(4) + arr[6],f(5))</p>\n<p>来写一下状态转移方程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(n) &#x3D; f(n-2) + arr[n]  选n</span><br><span class=\"line\">f(n) &#x3D; f(n-1)       不选n</span><br><span class=\"line\">f(0) &#x3D; arr[0]</span><br><span class=\"line\">f(1) &#x3D; max(arr[0],arr[1])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>递归求解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">RecOpt</span><span class=\"params\">(<span class=\"keyword\">int</span> [] nums, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(nums[<span class=\"number\">0</span>],nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//状态转移方程</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = RecOpt(nums,n-<span class=\"number\">2</span>) + nums[n];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = RecOpt(nums,n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(a,b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>备忘录求解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">DpOpt</span><span class=\"params\">(<span class=\"keyword\">int</span> [] nums)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> [] opt = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    opt[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    opt[<span class=\"number\">1</span>] = Math.max(nums[<span class=\"number\">0</span>],nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//状态转移方程</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = opt[i-<span class=\"number\">2</span>] + nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = opt[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        opt[i] = Math.max(a,b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> opt[nums.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cka7j79bu000007k379cg817d","tag_id":"cka7j79d5000207k35qfe4n0s","_id":"cka7j79da000707k3bfak87us"},{"post_id":"cka7j79d2000107k38ekd5hsm","tag_id":"cka7j79d9000607k3gkuj68bh","_id":"cka7j79df000f07k3gtza0i4r"},{"post_id":"cka7j79d2000107k38ekd5hsm","tag_id":"cka7j79dc000a07k3619xbs55","_id":"cka7j79dg000h07k30rvd9f9u"},{"post_id":"cka7j79d6000307k3gakr89wf","tag_id":"cka7j79de000d07k35ec62p7q","_id":"cka7j79dy000r07k3ew301e7v"},{"post_id":"cka7j79d6000307k3gakr89wf","tag_id":"cka7j79dg000i07k3d3b37c14","_id":"cka7j79dz000s07k3darsddw1"},{"post_id":"cka7j79d6000307k3gakr89wf","tag_id":"cka7j79dj000m07k352gndma8","_id":"cka7j79e0000u07k3908l7haj"},{"post_id":"cka7j79dy000q07k3c53x7371","tag_id":"cka7j79de000d07k35ec62p7q","_id":"cka7j79e0000v07k3667dgapa"},{"post_id":"cka7j79dy000q07k3c53x7371","tag_id":"cka7j79dg000i07k3d3b37c14","_id":"cka7j79e1000x07k3hqkm67bv"},{"post_id":"cka7j79dy000q07k3c53x7371","tag_id":"cka7j79dj000m07k352gndma8","_id":"cka7j79e1000y07k3akayhqgd"},{"post_id":"cka7j79d7000407k39m6ahiz7","tag_id":"cka7j79de000d07k35ec62p7q","_id":"cka7j79e2001007k35631g8ut"},{"post_id":"cka7j79d7000407k39m6ahiz7","tag_id":"cka7j79dg000i07k3d3b37c14","_id":"cka7j79e2001107k348nx6bvt"},{"post_id":"cka7j79d7000407k39m6ahiz7","tag_id":"cka7j79dj000m07k352gndma8","_id":"cka7j79e2001307k30dqgexyq"},{"post_id":"cka7j79d8000507k3d7cs64e1","tag_id":"cka7j79de000d07k35ec62p7q","_id":"cka7j79e5001607k3hj6h6qvr"},{"post_id":"cka7j79d8000507k3d7cs64e1","tag_id":"cka7j79dg000i07k3d3b37c14","_id":"cka7j79e5001707k37to4dn6n"},{"post_id":"cka7j79d8000507k3d7cs64e1","tag_id":"cka7j79dj000m07k352gndma8","_id":"cka7j79e6001907k306fr0qpy"},{"post_id":"cka7j79da000807k32wdufs7z","tag_id":"cka7j79de000d07k35ec62p7q","_id":"cka7j79e7001c07k3akf63wqf"},{"post_id":"cka7j79da000807k32wdufs7z","tag_id":"cka7j79dg000i07k3d3b37c14","_id":"cka7j79e8001d07k32b4bdj7s"},{"post_id":"cka7j79da000807k32wdufs7z","tag_id":"cka7j79dj000m07k352gndma8","_id":"cka7j79e8001f07k385005agl"},{"post_id":"cka7j79db000907k3f1tub1f9","tag_id":"cka7j79de000d07k35ec62p7q","_id":"cka7j79ea001i07k3115g4ea6"},{"post_id":"cka7j79db000907k3f1tub1f9","tag_id":"cka7j79dg000i07k3d3b37c14","_id":"cka7j79ea001j07k38x8z9eib"},{"post_id":"cka7j79db000907k3f1tub1f9","tag_id":"cka7j79dj000m07k352gndma8","_id":"cka7j79eb001l07k3h3kq9sde"},{"post_id":"cka7j79dc000b07k363nt1gbh","tag_id":"cka7j79de000d07k35ec62p7q","_id":"cka7j79ed001o07k3dexo8j5u"},{"post_id":"cka7j79dc000b07k363nt1gbh","tag_id":"cka7j79dg000i07k3d3b37c14","_id":"cka7j79ed001p07k3560f0npy"},{"post_id":"cka7j79dc000b07k363nt1gbh","tag_id":"cka7j79dj000m07k352gndma8","_id":"cka7j79ee001r07k340a1hqhj"},{"post_id":"cka7j79dd000c07k3gtbqdwbp","tag_id":"cka7j79de000d07k35ec62p7q","_id":"cka7j79eg001u07k33gn9coi2"},{"post_id":"cka7j79dd000c07k3gtbqdwbp","tag_id":"cka7j79dg000i07k3d3b37c14","_id":"cka7j79eg001v07k3ak0u8g9m"},{"post_id":"cka7j79dd000c07k3gtbqdwbp","tag_id":"cka7j79dj000m07k352gndma8","_id":"cka7j79eg001x07k3at0eg8sb"},{"post_id":"cka7j79de000e07k36jub5qzj","tag_id":"cka7j79ef001t07k3cehobig7","_id":"cka7j79ej002007k31hlz4k1w"},{"post_id":"cka7j79de000e07k36jub5qzj","tag_id":"cka7j79eg001w07k33p7qghw7","_id":"cka7j79ej002107k3cozmbfgz"},{"post_id":"cka7j79de000e07k36jub5qzj","tag_id":"cka7j79eh001y07k3fjdc8laq","_id":"cka7j79ej002307k31o64b0s5"},{"post_id":"cka7j79df000g07k3dd5gecax","tag_id":"cka7j79de000d07k35ec62p7q","_id":"cka7j79el002507k3eppkhzqx"},{"post_id":"cka7j79df000g07k3dd5gecax","tag_id":"cka7j79dg000i07k3d3b37c14","_id":"cka7j79em002607k35y1lh45t"},{"post_id":"cka7j79df000g07k3dd5gecax","tag_id":"cka7j79dj000m07k352gndma8","_id":"cka7j79em002807k3a3aldbtg"},{"post_id":"cka7j79dg000j07k326zx0439","tag_id":"cka7j79ef001t07k3cehobig7","_id":"cka7j79eo002b07k38ouu3362"},{"post_id":"cka7j79dg000j07k326zx0439","tag_id":"cka7j79eg001w07k33p7qghw7","_id":"cka7j79eo002c07k3g4sxhyyq"},{"post_id":"cka7j79dg000j07k326zx0439","tag_id":"cka7j79eh001y07k3fjdc8laq","_id":"cka7j79eo002e07k36v308rm3"},{"post_id":"cka7j79di000k07k33vky72ho","tag_id":"cka7j79en002a07k35n3qbyew","_id":"cka7j79eq002g07k3322x9x5x"},{"post_id":"cka7j79di000k07k33vky72ho","tag_id":"cka7j79eo002d07k3fgzogx7t","_id":"cka7j79eq002h07k3143d4mus"},{"post_id":"cka7j79dj000l07k30tp1gxvs","tag_id":"cka7j79ep002f07k3f9deaarf","_id":"cka7j79es002k07k37x04hoob"},{"post_id":"cka7j79dj000l07k30tp1gxvs","tag_id":"cka7j79er002i07k3fis4cy4y","_id":"cka7j79es002l07k3dngzcz72"},{"post_id":"cka7j79dk000n07k3fbhg3kzn","tag_id":"cka7j79ep002f07k3f9deaarf","_id":"cka7j79eu002o07k37oa2cn5n"},{"post_id":"cka7j79dk000n07k3fbhg3kzn","tag_id":"cka7j79er002i07k3fis4cy4y","_id":"cka7j79eu002p07k37sis8keg"},{"post_id":"cka7j79dl000o07k330dm0b63","tag_id":"cka7j79ef001t07k3cehobig7","_id":"cka7j79eu002q07k3cfsncfrc"},{"post_id":"cka7j79fo002r07k3gyxt7gb5","tag_id":"cka7j79ef001t07k3cehobig7","_id":"cka7j79fu002v07k36tr3b0ax"},{"post_id":"cka7j79fr002t07k398385jjq","tag_id":"cka7j79ef001t07k3cehobig7","_id":"cka7j79fv002w07k351ji67d3"},{"post_id":"cka7j79fr002t07k398385jjq","tag_id":"cka7j79eg001w07k33p7qghw7","_id":"cka7j79fv002x07k3fig4fn15"},{"post_id":"cka7me9g00000x9k3fa7n5kr7","tag_id":"cka7me9g70001x9k33gn1fial","_id":"cka7me9ge0004x9k3fs09cvsx"},{"post_id":"cka7me9g00000x9k3fa7n5kr7","tag_id":"cka7me9gd0002x9k36nw52205","_id":"cka7me9ge0005x9k3e6jgf63q"},{"post_id":"cka7me9g00000x9k3fa7n5kr7","tag_id":"cka7me9gd0003x9k30f546he2","_id":"cka7me9ge0006x9k35vs2akdt"},{"post_id":"ckaeqfrgo0000ylk311sb6snd","tag_id":"ckaeqfrgw0001ylk34c16352y","_id":"ckaeqfrh30003ylk32sis85wo"},{"post_id":"ckaeqfrgo0000ylk311sb6snd","tag_id":"ckaeqfrh30002ylk31ufl37fl","_id":"ckaeqfrh30004ylk33jidgxaz"},{"post_id":"ckaeqfrgo0000ylk311sb6snd","tag_id":"cka7j79dj000m07k352gndma8","_id":"ckaeqfrh40005ylk396911p10"},{"post_id":"ckamfqs1p0000dhk37dixflms","tag_id":"cka7j79ef001t07k3cehobig7","_id":"ckamfqs1w0001dhk32qo1a2e9"}],"Tag":[{"name":"Java基础","_id":"cka7j79d5000207k35qfe4n0s"},{"name":"JavaScript","_id":"cka7j79d9000607k3gkuj68bh"},{"name":"前端","_id":"cka7j79dc000a07k3619xbs55"},{"name":"多线程","_id":"cka7j79de000d07k35ec62p7q"},{"name":"并发","_id":"cka7j79dg000i07k3d3b37c14"},{"name":"Java","_id":"cka7j79dj000m07k352gndma8"},{"name":"算法","_id":"cka7j79ef001t07k3cehobig7"},{"name":"LeetCode","_id":"cka7j79eg001w07k33p7qghw7"},{"name":"面试题","_id":"cka7j79eh001y07k3fjdc8laq"},{"name":"MySQL","_id":"cka7j79en002a07k35n3qbyew"},{"name":"SQL优化","_id":"cka7j79eo002d07k3fgzogx7t"},{"name":"Redis","_id":"cka7j79ep002f07k3f9deaarf"},{"name":"数据结构","_id":"cka7j79er002i07k3fis4cy4y"},{"name":"设计模式","_id":"cka7me9g70001x9k33gn1fial"},{"name":"jdk动态代理","_id":"cka7me9gd0002x9k36nw52205"},{"name":"cglib","_id":"cka7me9gd0003x9k30f546he2"},{"name":"大文件","_id":"ckaeqfrgw0001ylk34c16352y"},{"name":"NIO","_id":"ckaeqfrh30002ylk31ufl37fl"}]}}